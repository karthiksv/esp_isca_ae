// Generated by stratus_hls 20.24-s100  (94682.280542)
// Mon Aug 16 10:40:12 2021
// from ../src/fft2.cpp

`timescale 1ps / 1ps


module fft2_stratus_basic_fx32_dma64( clk, rst, dma_read_chnl_valid, dma_read_chnl_data, dma_read_chnl_ready, conf_info_logn_samples, conf_info_num_ffts, conf_info_do_inverse, conf_info_do_shift, conf_info_scale_factor, conf_done, acc_done, debug, dma_read_ctrl_valid, dma_read_ctrl_data_index, dma_read_ctrl_data_length, dma_read_ctrl_data_size, dma_read_ctrl_ready, dma_write_ctrl_valid, dma_write_ctrl_data_index, dma_write_ctrl_data_length, dma_write_ctrl_data_size, dma_write_ctrl_ready, dma_write_chnl_valid
      , dma_write_chnl_data, dma_write_chnl_ready );

    input clk;
    input rst;
    input dma_read_chnl_valid;
    input [63:0] dma_read_chnl_data;
    input [31:0] conf_info_logn_samples;
    input [31:0] conf_info_num_ffts;
    input [31:0] conf_info_do_inverse;
    input [31:0] conf_info_do_shift;
    input [31:0] conf_info_scale_factor;
    input conf_done;
    input dma_read_ctrl_ready;
    input dma_write_ctrl_ready;
    input dma_write_chnl_ready;
    output dma_read_chnl_ready;
    output acc_done;
    reg acc_done;
    output [31:0] debug;
    output dma_read_ctrl_valid;
    reg dma_read_ctrl_valid;
    output [31:0] dma_read_ctrl_data_index;
    output [31:0] dma_read_ctrl_data_length;
    output [2:0] dma_read_ctrl_data_size;
    output dma_write_ctrl_valid;
    reg dma_write_ctrl_valid;
    output [31:0] dma_write_ctrl_data_index;
    output [31:0] dma_write_ctrl_data_length;
    output [2:0] dma_write_ctrl_data_size;
    output dma_write_chnl_valid;
    output [63:0] dma_write_chnl_data;
    reg [63:0] dma_write_chnl_data;
    reg A0_shared_WE0_wire;
    reg A0_shared_CE0_wire;
    reg[31:0] A0_shared_D0_wire;
    reg[14:0] A0_shared_A0_wire;
    reg[31:0] A0_shared_WEM0_wire;
    reg A0_shared_WE1_wire;
    reg A0_shared_CE1_wire;
    reg[31:0] A0_shared_D1_wire;
    reg[14:0] A0_shared_A1_wire;
    reg[31:0] A0_shared_WEM1_wire;
    reg A0_shared_CE2_wire;
    reg[14:0] A0_shared_A2_wire;
    reg A0_shared_CE3_wire;
    reg[14:0] A0_shared_A3_wire;
    reg[1:0] cfg_config_accelerator_next;
    reg[1:0] global_state3;
    wire fft2_Not_1U_1U_1_163_out1;
    wire fft2_Xor_1Ux1U_1U_4_159_out1;
    wire fft2_And_1Ux1U_1U_4_158_out1;
    wire fft2_Not_1U_1U_4_157_out1;
    wire fft2_Xor_1Ux1U_1U_4_156_out1;
    wire fft2_Or_1Ux1U_1U_4_160_out1;
    wire fft2_Not_1U_1U_4_161_out1;
    reg dma_write_chnl_sync_snd_valid_flop;
    reg fft2_N_Muxb_1_2_5_4_162_out1;
    reg dma_write_chnl_sync_snd_reset_valid_curr;
    reg dma_write_chnl_sync_snd_reset_valid_prev;
    reg dma_write_chnl_sync_snd_set_valid_prev;
    wire fft2_And_1Ux1U_1U_1_138_out1;
    wire fft2_And_1Ux1U_1U_1_137_out1;
    wire fft2_Not_1U_1U_1_136_out1;
    wire fft2_Xor_1Ux1U_1U_4_128_out1;
    wire fft2_And_1Ux1U_1U_4_127_out1;
    wire fft2_Not_1U_1U_4_126_out1;
    wire fft2_Xor_1Ux1U_1U_4_125_out1;
    wire fft2_Or_1Ux1U_1U_4_129_out1;
    wire fft2_And_1Ux1U_1U_4_133_out1;
    wire fft2_Not_1U_1U_4_131_out1;
    wire fft2_Not_1U_1U_4_130_out1;
    wire fft2_Or_1Ux1U_1U_4_132_out1;
    reg dma_read_chnl_sync_rcv_ready_flop;
    reg fft2_N_Muxb_1_2_5_4_134_out1;
    reg dma_read_chnl_sync_rcv_reset_ready_curr;
    reg dma_read_chnl_sync_rcv_reset_ready_prev;
    reg dma_read_chnl_sync_rcv_set_ready_prev;
    reg dma_read_chnl_ready_mask;
    reg[63:0] fft2_N_MuxB_64_2_1_4_135_out1;
    reg[3:0] global_state2_next;
    reg A0_store_output_CE2;
    reg[1:0] gs_ctrl73;
    wire[14:0] A0_store_output_A2;
    reg A0_store_output_CE3;
    reg[1:0] gs_ctrl72;
    reg[14:0] A0_store_output_A3;
    reg gs_ctrl71;
    wire[14:0] fft2_Add_15Ux1U_15U_4_175_out1;
    reg[14:0] fft2_Add_15Ux1U_15U_4_175_in2;
    reg gs_ctrl70;
    reg[15:0] fft2_Add_16Ux2U_16U_4_174_in2;
    reg gs_ctrl69;
    wire fft2_GreaterThan_32Sx17S_1U_4_171_out1;
    /*signed*/wire[31:0] fft2_Or_32Sx1U_32S_1_168_out1;
    /*signed*/wire[31:0] fft2_Sub_32Sx1U_32S_1_167_out1;
    /*signed*/wire[31:0] fft2_Sub_32Sx1U_32S_1_167_in2;
    /*signed*/wire[30:0] fft2_LeftShift_1Ux5U_31S_1_165_out1;
    wire[15:0] fft2_Add_16Ux2U_16U_4_174_out1;
    reg[15:0] s_reg_164;
    /*signed*/wire[31:0] fft2_Sub_32Sx16U_32S_4_173_out1;
    reg[31:0] s_reg_159;
    /*signed*/wire[31:0] fft2_Add_32Sx1U_32S_1_169_out1;
    reg[31:0] s_reg_157;
    reg[30:0] s_reg_154;
    reg[4:0] s_reg_153;
    wire[31:0] fft2_Add_32Ux32U_32U_4_179_out1;
    wire fft2_LessThan_16Ux32U_1U_4_176_out1;
    reg[31:0] s_reg_158;
    wire fft2_Not_1U_1U_4_177_out1;
    reg dma_write_chnl_set_valid_curr;
    wire fft2_GreaterThan_32Sx17S_1U_4_178_out1;
    wire fft2_GreaterThan_32Sx17S_1U_1_170_out1;
    reg[31:0] s_reg_147;
    reg[30:0] dma_write_ctrl_data_index_slice;
    reg[31:0] fft2_N_Mux_32_2_0_4_172_out1;
    reg[30:0] dma_write_ctrl_data_length_slice;
    reg dma_write_ctrl_data_size_slice;
    reg[63:0] s_reg_166;
    wire fft2_Or_1Ux1U_1U_1_164_out1;
    reg[3:0] global_state2;
    reg[5:0] global_state1_next;
    /*signed*/wire[31:0] fft2_Add_32Sx1U_32S_4_115_in2;
    wire[49:0] fft2_Add_50Ux50U_50U_4_111_in1;
    /*signed*/wire[31:0] fft2_Add_32Sx1U_32S_4_110_in2;
    wire[31:0] A0_compute_kernel_Q2;
    wire fft2_Add_32Sx1U_32S_1_108_in1;
    /*signed*/wire[31:0] fft2_Add_32Sx1U_32S_1_108_in2;
    wire[49:0] fft2_Sub_50Ux50U_50U_1_107_out1;
    wire fft2_Add_32Sx1U_32S_1_106_in1;
    /*signed*/wire[31:0] fft2_Add_32Sx1U_32S_1_106_in2;
    wire[49:0] fft2_Sub_50Ux50U_50U_4_105_out1;
    wire[49:0] fft2_Sub_50Ux50U_50U_4_105_in2;
    reg[13:0] fft2_Add_14Ux14U_14U_1_89_in1;
    reg gs_ctrl68;
    wire[13:0] fft2_Add_14Ux14U_14U_1_88_out1;
    reg[13:0] fft2_Add_14Ux14U_14U_1_88_in1;
    reg[1:0] gs_ctrl67;
    reg[31:0] fft2_Add_32Ux32U_32U_1_86_in1;
    reg gs_ctrl66;
    reg[31:0] fft2_Add_32Ux32U_32U_1_86_in2;
    reg gs_ctrl65;
    /*signed*/reg[30:0] fft2_Add_31Sx1U_32S_1_84_in2;
    reg gs_ctrl64;
    wire fft2_And_1Ux1U_1U_4_83_out1;
    reg fft2_And_1Ux1U_1U_4_83_in1;
    reg gs_ctrl63;
    reg fft2_And_1Ux1U_1U_4_83_in2;
    reg gs_ctrl62;
    /*signed*/reg fft2_Mul_19Sx2S_21S_4_82_in1_slice;
    reg gs_ctrl61;
    reg[18:0] fft2_N_Mux_19_16_4_1_81_out1;
    reg[31:0] fft2_N_Mux_19_16_4_1_81_ctrl1;
    reg gs_ctrl60;
    reg[31:0] fft2_N_Mux_20_12_3_1_80_ctrl1;
    reg gs_ctrl59;
    reg[31:0] fft2_Add_32Ux1U_32U_1_78_in2;
    reg gs_ctrl58;
    reg[4:0] fft2_LeftShift_1Ux5U_32S_1_77_in1;
    reg gs_ctrl57;
    wire[31:0] fft2_RightShift_32Ux5U_32U_4_72_out1;
    /*signed*/wire[4:0] fft2_Minus_5U_5S_4_71_out1;
    reg[4:0] fft2_LeftShift_32Ux5U_32U_1_70_in1;
    reg[31:0] fft2_LeftShift_32Ux5U_32U_1_70_in2;
    wire fft2_OrReduction_29U_1U_4_66_out1;
    /*signed*/wire[31:0] fft2_Sub_32Sx1U_32S_1_64_out1;
    /*signed*/wire[31:0] fft2_Sub_32Sx1U_32S_1_63_out1;
    /*signed*/wire[31:0] fft2_Sub_32Sx1U_32S_1_62_out1;
    wire fft2_OrReduction_29U_1U_4_61_out1;
    wire fft2_OrReduction_29U_1U_4_60_out1;
    wire fft2_OrReduction_29U_1U_1_59_out1;
    reg[31:0] fft2_N_Mux_32_2_2_4_58_in2;
    reg[1:0] gs_ctrl56;
    reg[31:0] fft2_N_Mux_32_2_2_4_57_in2;
    reg[1:0] gs_ctrl55;
    wire fft2_OrReduction_29U_1U_4_56_out1;
    reg[23:0] fft2_OrReduction_29U_1U_4_56_in1_slice;
    reg[1:0] gs_ctrl54;
    reg[31:0] fft2_N_Mux_32_2_2_4_55_out1;
    reg[31:0] fft2_N_Mux_32_2_2_4_55_in2;
    reg[1:0] gs_ctrl53;
    reg[31:0] fft2_N_Mux_32_2_2_4_54_out1;
    reg[31:0] fft2_N_Mux_32_2_2_4_54_in2;
    reg[1:0] gs_ctrl52;
    reg[31:0] fft2_N_Mux_32_2_2_4_52_out1;
    reg[31:0] fft2_N_Mux_32_2_2_4_52_in2;
    reg[1:0] gs_ctrl51;
    /*signed*/wire[31:0] fft2_Sub_32Sx1U_32S_1_51_out1;
    wire fft2_OrReduction_29U_1U_4_50_out1;
    reg[27:0] fft2_OrReduction_29U_1U_4_50_in1_slice;
    reg[1:0] gs_ctrl50;
    reg[31:0] fft2_N_Mux_32_2_2_4_49_out1;
    reg[31:0] fft2_N_Mux_32_2_2_4_49_in2;
    reg[1:0] gs_ctrl49;
    /*signed*/wire[31:0] fft2_Sub_32Sx1U_32S_1_48_out1;
    wire fft2_OrReduction_29U_1U_4_47_out1;
    reg[28:0] fft2_OrReduction_29U_1U_4_47_in1;
    reg[1:0] gs_ctrl48;
    reg[31:0] fft2_N_Mux_32_2_2_4_46_out1;
    reg[31:0] fft2_N_Mux_32_2_2_4_46_in2;
    reg[1:0] gs_ctrl47;
    /*signed*/wire[31:0] fft2_Sub_32Sx1U_32S_1_45_out1;
    /*signed*/reg[31:0] fft2_Sub_32Sx1U_32S_1_45_in2;
    reg gs_ctrl46;
    wire fft2_OrReduction_31U_1U_4_44_out1;
    reg[29:0] fft2_OrReduction_31U_1U_4_44_in1_slice;
    reg[1:0] gs_ctrl45;
    reg[31:0] fft2_N_Mux_32_2_2_4_43_out1;
    reg[31:0] fft2_N_Mux_32_2_2_4_43_in2;
    reg[1:0] gs_ctrl44;
    reg[31:0] fft2_N_Mux_32_2_2_4_43_in3;
    reg[1:0] gs_ctrl43;
    wire fft2_OrReduction_31U_1U_4_42_out1;
    reg[30:0] fft2_OrReduction_31U_1U_4_42_in1;
    reg[1:0] gs_ctrl42;
    wire fft2_OrReduction_31U_1U_4_41_out1;
    reg[30:0] fft2_OrReduction_31U_1U_4_41_in1;
    reg[1:0] gs_ctrl41;
    wire fft2_OrReduction_31U_1U_4_40_out1;
    reg[29:0] fft2_OrReduction_31U_1U_4_40_in1_slice;
    reg[1:0] gs_ctrl40;
    wire fft2_OrReduction_29U_1U_4_39_out1;
    reg[28:0] fft2_OrReduction_29U_1U_4_39_in1;
    reg[1:0] gs_ctrl39;
    wire fft2_OrReduction_29U_1U_4_38_out1;
    reg[27:0] fft2_OrReduction_29U_1U_4_38_in1_slice;
    reg[1:0] gs_ctrl38;
    wire fft2_OrReduction_29U_1U_4_37_out1;
    reg[26:0] fft2_OrReduction_29U_1U_4_37_in1_slice;
    reg[1:0] gs_ctrl37;
    wire fft2_OrReduction_29U_1U_4_35_out1;
    reg[25:0] fft2_OrReduction_29U_1U_4_35_in1_slice;
    reg[1:0] gs_ctrl36;
    wire fft2_OrReduction_29U_1U_4_33_out1;
    reg[24:0] fft2_OrReduction_29U_1U_4_33_in1_slice;
    reg[1:0] gs_ctrl35;
    wire[5:0] fft2_Add_5Ux3U_6U_4_32_out1;
    reg[4:0] fft2_Add_5Ux3U_6U_4_32_in2;
    reg gs_ctrl34;
    reg[31:0] A0_compute_kernel_WEM0;
    reg gs_ctrl33;
    reg A0_compute_kernel_CE0;
    reg gs_ctrl32;
    reg A0_compute_kernel_WE0;
    reg gs_ctrl31;
    reg[31:0] A0_compute_kernel_D0;
    wire[31:0] fft2_Add_32Ux32U_32U_4_112_out1;
    reg[2:0] gs_ctrl30;
    reg[14:0] A0_compute_kernel_A0;
    reg[2:0] gs_ctrl29;
    reg[31:0] A0_compute_kernel_WEM1;
    reg gs_ctrl28;
    reg A0_compute_kernel_CE1;
    reg gs_ctrl27;
    reg A0_compute_kernel_WE1;
    reg gs_ctrl26;
    reg[31:0] A0_compute_kernel_D1;
    wire[31:0] fft2_Sub_32Ux32U_32U_4_114_out1;
    reg[2:0] gs_ctrl25;
    reg[14:0] A0_compute_kernel_A1;
    reg[2:0] gs_ctrl24;
    reg A0_compute_kernel_CE2;
    reg[1:0] gs_ctrl23;
    reg[14:0] A0_compute_kernel_A2;
    reg[2:0] gs_ctrl22;
    reg A0_compute_kernel_CE3;
    wire fft2_LessThan_6Sx6S_1U_4_68_out1;
    reg[1:0] gs_ctrl21;
    reg[14:0] A0_compute_kernel_A3;
    reg[2:0] gs_ctrl20;
    reg[13:0] fft2_Add_14Ux14U_14U_4_27_in1;
    reg gs_ctrl19;
    reg[13:0] fft2_Add_14Ux14U_14U_4_27_in2;
    reg gs_ctrl18;
    reg gs_ctrl17;
    reg[31:0] fft2_Add_32Ux1U_32U_4_25_in2;
    reg gs_ctrl16;
    reg[31:0] fft2_N_Mux_32_2_0_4_22_out1;
    reg[31:0] fft2_N_Mux_32_2_0_4_22_in2;
    reg gs_ctrl15;
    reg[31:0] fft2_N_Mux_32_2_0_4_21_out1;
    reg[31:0] fft2_N_Mux_32_2_0_4_21_in2;
    reg gs_ctrl14;
    /*signed*/reg[31:0] fft2_Sub_32Sx16U_32S_1_20_in2;
    reg gs_ctrl13;
    wire fft2_GreaterThan_32Sx17S_1U_4_19_out1;
    /*signed*/reg[31:0] fft2_GreaterThan_32Sx17S_1U_4_19_in2;
    reg gs_ctrl12;
    wire fft2_GreaterThan_32Ux16U_1U_4_18_out1;
    reg[31:0] fft2_GreaterThan_32Ux16U_1U_4_18_in2;
    reg gs_ctrl11;
    reg[31:0] fft2_GreaterThan_32Ux32U_1U_4_17_in1;
    reg gs_ctrl10;
    reg[31:0] fft2_Sub_32Ux32U_32U_4_16_in1;
    reg gs_ctrl9;
    /*signed*/wire[31:0] fft2_GreaterThan_32Sx17S_1U_1_15_in2;
    wire fft2_And_1Ux1U_1U_4_10_out1;
    wire fft2_OrReduction_32S_1U_4_9_out1;
    /*signed*/wire[31:0] fft2_OrReduction_32S_1U_4_9_in1;
    wire fft2_Not_32S_1U_4_8_out1;
    wire fft2_OrReduction_32S_1U_4_7_out1;
    wire fft2_And_1Ux1U_1U_4_5_out1;
    wire fft2_OrReduction_32S_1U_4_4_out1;
    /*signed*/wire[31:0] fft2_OrReduction_32S_1U_4_4_in1;
    wire fft2_OrReduction_32S_1U_4_3_out1;
    wire fft2_OrReduction_32S_1U_4_2_out1;
    wire[31:0] fft2_Add_32Ux32U_32U_1_109_out1;
    reg[31:0] s_reg_99;
    /*signed*/wire[31:0] fft2_Add_32Sx1U_32S_4_110_out1;
    reg[31:0] s_reg_98;
    reg[31:0] s_reg_97;
    reg[31:0] s_reg_96;
    /*signed*/wire[31:0] fft2_Add_32Sx1U_32S_1_108_out1;
    reg[31:0] s_reg_95;
    /*signed*/wire[31:0] fft2_Add_32Sx1U_32S_1_106_out1;
    reg[49:0] s_reg_93;
    reg[49:0] s_reg_92;
    wire[49:0] fft2_Add_50Ux50U_50U_1_102_out1;
    reg[32:0] s_reg_91;
    wire fft2_And_1Ux1U_1U_4_6_out1;
    wire[13:0] fft2_Add_14Ux14U_14U_4_99_out1;
    reg[13:0] s_reg_88;
    wire[49:0] fft2_Sub_50Ux50U_50U_1_98_out1;
    reg[49:0] s_reg_87;
    wire[49:0] fft2_Add_50Ux50U_50U_1_97_out1;
    reg[49:0] s_reg_86;
    /*signed*/wire[31:0] fft2_Add_32Sx1U_32S_4_92_out1;
    wire[13:0] fft2_Add_14Ux14U_14U_4_91_out1;
    reg[13:0] s_reg_84;
    wire[13:0] fft2_Add_14Ux14U_14U_4_90_out1;
    reg[13:0] s_reg_81;
    wire[13:0] fft2_Add_14Ux14U_14U_1_89_out1;
    reg[13:0] s_reg_80;
    reg[30:0] s_reg_8_slice;
    reg[31:0] s_reg_85;
    reg[31:0] s_reg_79;
    /*signed*/wire[31:0] fft2_Add_32Sx1U_32S_4_115_out1;
    reg[31:0] s_reg_78;
    reg[31:0] s_reg_94;
    reg[31:0] s_reg_77;
    reg s_reg_76;
    wire[31:0] fft2_Add_32Ux32U_32U_1_86_out1;
    reg[31:0] s_reg_74;
    reg[31:0] s_reg_73;
    /*signed*/wire[31:0] fft2_Add_31Sx1U_32S_1_84_out1;
    reg[31:0] s_reg_72;
    /*signed*/wire[20:0] fft2_Mul_19Sx2S_21S_4_82_out1;
    reg[20:0] s_reg_71;
    reg[19:0] fft2_N_Mux_20_12_3_1_80_out1;
    reg[19:0] s_reg_70;
    wire[31:0] fft2_Add_32Ux1U_32U_1_78_out1;
    reg[31:0] s_reg_68;
    /*signed*/wire[31:0] fft2_LeftShift_1Ux5U_32S_1_77_out1;
    reg[31:0] s_reg_67;
    wire fft2_OrReduction_32S_1U_4_76_out1;
    reg s_reg_66;
    reg[31:0] s_reg_65;
    reg[31:0] s_reg_64;
    wire fft2_LessThan_32Ux32U_1U_4_75_out1;
    reg[31:0] s_reg_60;
    reg[31:0] s_reg_6;
    reg[31:0] s_reg_59;
    wire[13:0] fft2_Add_14Ux14U_14U_4_74_out1;
    reg[13:0] s_reg_58;
    wire fft2_LessThan_32Ux32U_1U_4_73_out1;
    wire[31:0] fft2_LeftShift_32Ux5U_32U_1_70_out1;
    reg[31:0] s_reg_56;
    wire[13:0] fft2_Add_14Ux14U_14U_4_69_out1;
    reg[13:0] s_reg_53;
    /*signed*/wire[31:0] fft2_Sub_32Sx1U_32S_1_67_out1;
    reg[31:0] s_reg_52;
    wire[31:0] fft2_Add_32Ux1U_32U_4_65_out1;
    reg[31:0] fft2_N_Mux_32_2_2_4_58_out1;
    reg[31:0] s_reg_50;
    reg[31:0] fft2_N_Mux_32_2_2_4_57_out1;
    reg[31:0] s_reg_49;
    /*signed*/wire[31:0] fft2_Sub_32Sx1U_32S_1_53_out1;
    reg[31:0] s_reg_47;
    wire[5:0] fft2_Add_5Ux1U_6U_4_36_out1;
    reg[5:0] s_reg_46;
    wire fft2_LessThan_6Sx6S_1U_4_34_out1;
    reg s_reg_45;
    reg[24:0] s_reg_44;
    reg[25:0] s_reg_43;
    reg[23:0] s_reg_48_slice;
    reg[26:0] s_reg_42;
    reg[31:0] s_reg_51;
    reg[31:0] s_reg_41;
    reg[31:0] s_reg_40;
    reg[31:0] s_reg_4;
    wire fft2_LessThan_32Ux32U_1U_4_31_out1;
    reg[31:0] s_reg_38;
    reg[31:0] s_reg_37;
    wire[13:0] fft2_Add_14Ux14U_14U_4_30_out1;
    reg[13:0] s_reg_34;
    wire[31:0] fft2_Add_32Ux1U_32U_4_29_out1;
    reg[31:0] s_reg_32;
    reg[31:0] s_reg_31;
    wire[13:0] fft2_Add_14Ux14U_14U_4_28_out1;
    reg[13:0] s_reg_30;
    wire[13:0] fft2_Add_14Ux14U_14U_4_27_out1;
    reg[13:0] s_reg_27;
    reg[31:0] s_reg_33;
    reg[31:0] s_reg_26;
    reg[31:0] s_reg_25;
    wire[31:0] fft2_Add_32Ux1U_32U_4_25_out1;
    reg[31:0] s_reg_24;
    reg[31:0] s_reg_23;
    reg[31:0] s_reg_21;
    wire fft2_GreaterThan_32Sx17S_1U_4_23_out1;
    /*signed*/wire[31:0] fft2_Sub_32Sx16U_32S_1_20_out1;
    reg[31:0] s_reg_18;
    wire fft2_GreaterThan_32Ux32U_1U_4_17_out1;
    reg s_reg_17;
    wire[31:0] fft2_Sub_32Ux32U_32U_4_16_out1;
    reg[31:0] s_reg_16;
    /*signed*/wire[31:0] fft2_Sub_32Ux16U_32S_4_124_out1;
    reg[31:0] s_reg_14;
    /*signed*/wire[31:0] fft2_LeftShift_1Ux5U_32S_4_13_out1;
    reg[31:0] s_reg_13;
    /*signed*/wire[4:0] fft2_Sub_4Ux5S_5S_4_12_out1;
    reg[4:0] s_reg_12;
    reg[31:0] s_reg_115;
    reg[31:0] s_reg_114;
    wire[13:0] fft2_Add_14Ux14U_14U_4_121_out1;
    reg[13:0] s_reg_111;
    wire fft2_LessThan_32Ux32U_1U_4_120_out1;
    wire fft2_And_1Ux1U_1U_4_11_out1;
    wire[31:0] A0_shared_Q2_wire;
    reg[31:0] s_reg_109;
    wire[31:0] A0_shared_Q3_wire;
    reg[31:0] s_reg_108;
    wire[13:0] fft2_Add_14Ux14U_14U_4_119_out1;
    reg[13:0] s_reg_107;
    wire[31:0] fft2_Add_32Ux1U_32U_4_118_out1;
    wire[13:0] fft2_Add_14Ux14U_14U_4_117_out1;
    reg[13:0] s_reg_103;
    reg[31:0] s_reg_106;
    reg[31:0] s_reg_102;
    wire[31:0] fft2_Sub_32Ux32U_32U_4_113_out1;
    reg[31:0] s_reg_101;
    wire[49:0] fft2_Add_50Ux50U_50U_4_111_out1;
    reg[32:0] s_reg_100;
    /*signed*/wire[31:0] fft2_LeftShift_1Ux5U_32S_4_1_out1;
    reg[30:0] s_reg_10_slice;
    reg[31:0] s_reg_116;
    wire[31:0] fft2_Add_32Ux1U_32U_4_123_out1;
    reg[31:0] s_reg_1;
    reg s_reg_110;
    wire fft2_LessThan_32Sx33S_1U_4_116_out1;
    reg s_reg_75;
    reg s_reg_69;
    wire fft2_LessThan_17Sx33S_1U_4_85_out1;
    wire fft2_LessThan_32Ux32U_1U_4_87_out1;
    reg s_reg_57;
    reg s_reg_61;
    reg s_reg_39;
    wire fft2_LessThanEQ_32Ux32U_1U_4_79_out1;
    reg s_reg_11;
    wire fft2_LessThan_32Ux32U_1U_4_122_out1;
    reg[31:0] s_reg_5;
    reg s_reg_9;
    reg[31:0] s_reg_7;
    reg[31:0] fft2_N_Mux_32_2_2_4_24_out1;
    reg output_ready_channel_ready;
    reg output_ready_channel_valid;
    reg s_reg_20;
    wire fft2_GreaterThan_32Sx17S_1U_1_15_out1;
    reg[5:0] global_state1;
    reg cfg_done;
    reg[3:0] global_state_next;
    reg[31:0] A0_load_input_WEM0;
    reg gs_ctrl8;
    reg A0_load_input_CE0;
    reg gs_ctrl7;
    reg A0_load_input_WE0;
    reg gs_ctrl6;
    wire[31:0] A0_load_input_D0;
    wire[14:0] A0_load_input_A0;
    reg[31:0] A0_load_input_WEM1;
    reg gs_ctrl5;
    reg A0_load_input_CE1;
    reg gs_ctrl4;
    reg A0_load_input_WE1;
    reg gs_ctrl3;
    wire[31:0] A0_load_input_D1;
    wire[14:0] A0_load_input_A1;
    wire[14:0] fft2_Add_15Ux1U_15U_4_154_out1;
    reg[63:0] dma_read_chnl_data_buf;
    reg[15:0] fft2_Add_16Ux2U_16U_4_151_in2;
    reg gs_ctrl2;
    reg[31:0] fft2_N_Mux_32_2_0_4_147_in2;
    reg gs_ctrl1;
    wire fft2_GreaterThan_32Sx17S_1U_4_146_out1;
    /*signed*/reg[31:0] fft2_GreaterThan_32Sx17S_1U_4_146_in2;
    reg gs_ctrl0;
    wire fft2_GreaterThan_32Sx17S_1U_4_145_out1;
    /*signed*/wire[31:0] fft2_Or_32Sx1U_32S_4_143_out1;
    /*signed*/wire[31:0] fft2_Sub_32Sx1U_32S_1_142_out1;
    /*signed*/wire[31:0] fft2_Sub_32Sx1U_32S_1_142_in2;
    /*signed*/wire[30:0] fft2_LeftShift_1Ux5U_31S_4_140_out1;
    reg[63:0] fft2_N_MuxB_64_2_1_4_152_out1;
    reg[63:0] s_reg_142;
    wire[15:0] fft2_Add_16Ux2U_16U_4_151_out1;
    reg[15:0] s_reg_141;
    reg[15:0] s_reg_140;
    wire fft2_GreaterThan_32Sx17S_1U_4_150_out1;
    reg s_reg_139;
    /*signed*/wire[31:0] fft2_Sub_32Sx16U_32S_4_149_out1;
    wire[31:0] fft2_Add_32Ux32U_32U_4_148_out1;
    reg[31:0] fft2_N_Mux_32_2_0_4_147_out1;
    reg[31:0] s_reg_135;
    /*signed*/wire[31:0] fft2_Add_32Sx1U_32S_1_144_out1;
    reg[31:0] s_reg_131;
    wire[30:0] fft2_Mul_31Ux31U_31U_1_141_out1;
    reg[30:0] s_reg_129;
    reg[31:0] s_reg_134;
    reg[31:0] s_reg_124;
    reg store_to_load_channel_valid;
    reg store_to_load_channel_ready;
    reg input_ready_channel_valid;
    reg input_ready_channel_ready;
    wire fft2_LessThan_16Ux32U_1U_4_155_out1;
    wire fft2_Not_1U_1U_4_153_out1;
    wire fft2_Or_1Ux1U_1U_1_139_out1;
    reg dma_read_chnl_set_ready_curr;
    reg[30:0] s_reg_133;
    reg[30:0] dma_read_ctrl_data_index_slice;
    reg[31:0] s_reg_132;
    reg[30:0] dma_read_ctrl_data_length_slice;
    reg[3:0] global_state;
    reg dma_read_ctrl_data_size_slice;
    wire[30:0] fft2_Mul_31Ux31U_31U_4_166_in2;
    wire[30:0] fft2_Mul_31Ux31U_31U_4_166_in1;
    wire[30:0] fft2_Mul_31Ux31U_31U_4_166_out1;
    wire[30:0] fft2_Mul_31Ux31U_31U_4_14_in2;
    wire[30:0] fft2_Mul_31Ux31U_31U_4_14_in1;
    wire[30:0] fft2_Mul_31Ux31U_31U_4_14_out1;
    /*signed*/wire[31:0] fft2_Mul_32Sx21S_50S_4_94_in2;
    /*signed*/wire[20:0] fft2_Mul_32Sx21S_50S_4_94_in1;
    /*signed*/wire[49:0] fft2_Mul_32Sx21S_50S_4_94_out1;
    /*signed*/wire[31:0] fft2_Mul_32Sx21S_50S_4_96_in2;
    /*signed*/wire[20:0] fft2_Mul_32Sx21S_50S_4_96_in1;
    /*signed*/wire[49:0] fft2_Mul_32Sx21S_50S_4_96_out1;
    /*signed*/wire[31:0] fft2_Mul_32Sx22S_50S_4_93_in2;
    /*signed*/wire[21:0] fft2_Mul_32Sx22S_50S_4_93_in1;
    /*signed*/wire[49:0] fft2_Mul_32Sx22S_50S_4_93_out1;
    /*signed*/wire[31:0] fft2_Mul_32Sx22S_50S_4_95_in2;
    /*signed*/wire[21:0] fft2_Mul_32Sx22S_50S_4_95_in1;
    /*signed*/wire[49:0] fft2_Mul_32Sx22S_50S_4_95_out1;
    /*signed*/wire[31:0] fft2_Mul_32Sx32S_50S_4_100_in2;
    /*signed*/wire[31:0] fft2_Mul_32Sx32S_50S_4_100_in1;
    /*signed*/wire[49:0] fft2_Mul_32Sx32S_50S_4_100_out1;
    /*signed*/wire[31:0] fft2_Mul_32Sx32S_50S_4_101_in2;
    /*signed*/wire[31:0] fft2_Mul_32Sx32S_50S_4_101_in1;
    /*signed*/wire[49:0] fft2_Mul_32Sx32S_50S_4_101_out1;
    /*signed*/wire[31:0] fft2_Mul_32Sx32S_50S_4_103_in2;
    /*signed*/wire[31:0] fft2_Mul_32Sx32S_50S_4_103_in1;
    /*signed*/wire[49:0] fft2_Mul_32Sx32S_50S_4_103_out1;
    /*signed*/wire[31:0] fft2_Mul_32Sx32S_50S_4_104_in2;
    /*signed*/wire[31:0] fft2_Mul_32Sx32S_50S_4_104_in1;
    /*signed*/wire[49:0] fft2_Mul_32Sx32S_50S_4_104_out1;
    reg[31:0] fft2_Mul_32Ux32U_32U_4_26_in2;
    wire[31:0] fft2_Mul_32Ux32U_32U_4_26_in1;
    wire[31:0] fft2_Mul_32Ux32U_32U_4_26_out1;

    
    // instance: drive_debug
    assign debug = 32'd0000000000;
    fft2_Mul_32Ux32U_32U_4 fft2_Mul_32Ux32U_32U_4_26( 
                             .in2( fft2_Mul_32Ux32U_32U_4_26_in2 ),
                             .in1( fft2_Mul_32Ux32U_32U_4_26_in1 ),
                             .out1( fft2_Mul_32Ux32U_32U_4_26_out1 ),
                             .clk( clk ),
                             .clr( rst )
                           );
    fft2_Mul_32Sx32S_50S_4 fft2_Mul_32Sx32S_50S_4_104( 
                             .in2( fft2_Mul_32Sx32S_50S_4_104_in2 ),
                             .in1( fft2_Mul_32Sx32S_50S_4_104_in1 ),
                             .out1( fft2_Mul_32Sx32S_50S_4_104_out1 ),
                             .clk( clk ),
                             .clr( rst )
                           );
    fft2_Mul_32Sx32S_50S_4 fft2_Mul_32Sx32S_50S_4_103( 
                             .in2( fft2_Mul_32Sx32S_50S_4_103_in2 ),
                             .in1( fft2_Mul_32Sx32S_50S_4_103_in1 ),
                             .out1( fft2_Mul_32Sx32S_50S_4_103_out1 ),
                             .clk( clk ),
                             .clr( rst )
                           );
    fft2_Mul_32Sx32S_50S_4 fft2_Mul_32Sx32S_50S_4_101( 
                             .in2( fft2_Mul_32Sx32S_50S_4_101_in2 ),
                             .in1( fft2_Mul_32Sx32S_50S_4_101_in1 ),
                             .out1( fft2_Mul_32Sx32S_50S_4_101_out1 ),
                             .clk( clk ),
                             .clr( rst )
                           );
    fft2_Mul_32Sx32S_50S_4 fft2_Mul_32Sx32S_50S_4_100( 
                             .in2( fft2_Mul_32Sx32S_50S_4_100_in2 ),
                             .in1( fft2_Mul_32Sx32S_50S_4_100_in1 ),
                             .out1( fft2_Mul_32Sx32S_50S_4_100_out1 ),
                             .clk( clk ),
                             .clr( rst )
                           );
    fft2_Mul_32Sx22S_50S_4 fft2_Mul_32Sx22S_50S_4_95( 
                             .in2( fft2_Mul_32Sx22S_50S_4_95_in2 ),
                             .in1( fft2_Mul_32Sx22S_50S_4_95_in1 ),
                             .out1( fft2_Mul_32Sx22S_50S_4_95_out1 ),
                             .clk( clk ),
                             .clr( rst )
                           );
    fft2_Mul_32Sx22S_50S_4 fft2_Mul_32Sx22S_50S_4_93( 
                             .in2( fft2_Mul_32Sx22S_50S_4_93_in2 ),
                             .in1( fft2_Mul_32Sx22S_50S_4_93_in1 ),
                             .out1( fft2_Mul_32Sx22S_50S_4_93_out1 ),
                             .clk( clk ),
                             .clr( rst )
                           );
    fft2_Mul_32Sx21S_50S_4 fft2_Mul_32Sx21S_50S_4_96( 
                             .in2( fft2_Mul_32Sx21S_50S_4_96_in2 ),
                             .in1( fft2_Mul_32Sx21S_50S_4_96_in1 ),
                             .out1( fft2_Mul_32Sx21S_50S_4_96_out1 ),
                             .clk( clk ),
                             .clr( rst )
                           );
    fft2_Mul_32Sx21S_50S_4 fft2_Mul_32Sx21S_50S_4_94( 
                             .in2( fft2_Mul_32Sx21S_50S_4_94_in2 ),
                             .in1( fft2_Mul_32Sx21S_50S_4_94_in1 ),
                             .out1( fft2_Mul_32Sx21S_50S_4_94_out1 ),
                             .clk( clk ),
                             .clr( rst )
                           );
    fft2_Mul_31Ux31U_31U_4 fft2_Mul_31Ux31U_31U_4_14( 
                             .in2( fft2_Mul_31Ux31U_31U_4_14_in2 ),
                             .in1( fft2_Mul_31Ux31U_31U_4_14_in1 ),
                             .out1( fft2_Mul_31Ux31U_31U_4_14_out1 ),
                             .clk( clk ),
                             .clr( rst )
                           );
    fft2_Mul_31Ux31U_31U_4 fft2_Mul_31Ux31U_31U_4_166( 
                             .in2( fft2_Mul_31Ux31U_31U_4_166_in2 ),
                             .in1( fft2_Mul_31Ux31U_31U_4_166_in1 ),
                             .out1( fft2_Mul_31Ux31U_31U_4_166_out1 ),
                             .clk( clk ),
                             .clr( rst )
                           );
    
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_dma_read_ctrl_data_size_slice
        if (rst == 1'b0) 
          begin
            dma_read_ctrl_data_size_slice <= 1'b0;
          end 
        else 
          begin
            case (global_state) 
              4'd03: 
                begin
                  dma_read_ctrl_data_size_slice <= 1'b1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_31
    always @(posedge clk)
      begin : drive_dma_read_ctrl_data_length_slice
        if (rst == 1'b0) 
          begin
            dma_read_ctrl_data_length_slice <= 31'd0000000000;
          end 
        else 
          begin
            case (global_state) 
              4'd03: 
                begin
                  dma_read_ctrl_data_length_slice <= s_reg_132[31:1];
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_31
    always @(posedge clk)
      begin : drive_dma_read_ctrl_data_index_slice
        if (rst == 1'b0) 
          begin
            dma_read_ctrl_data_index_slice <= 31'd0000000000;
          end 
        else 
          begin
            case (global_state) 
              4'd03: 
                begin
                  dma_read_ctrl_data_index_slice <= s_reg_133;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_dma_read_ctrl_valid
        if (rst == 1'b0) 
          begin
            dma_read_ctrl_valid <= 1'd0;
          end 
        else 
          begin
            case (global_state) 
              4'd03: 
                begin
                  dma_read_ctrl_valid <= 1'd1;
                end
              4'd04: 
                begin
                  if (dma_read_ctrl_ready) 
                    begin
                      dma_read_ctrl_valid <= 1'd0;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_dma_read_chnl_set_ready_curr
        if (rst == 1'b0) 
          begin
            dma_read_chnl_set_ready_curr <= 1'd0;
          end 
        else 
          begin
            case (global_state) 
              4'd04: 
                begin
                  if (dma_read_ctrl_ready && (s_reg_132 != 32'd0000000000 && fft2_Or_1Ux1U_1U_1_139_out1)) 
                    begin
                      dma_read_chnl_set_ready_curr <= fft2_Not_1U_1U_4_153_out1;
                    end 
                end
              4'd05: 
                begin
                  if (fft2_Or_1Ux1U_1U_1_139_out1) 
                    begin
                      dma_read_chnl_set_ready_curr <= fft2_Not_1U_1U_4_153_out1;
                    end 
                end
              4'd06: 
                begin
                  if (fft2_LessThan_16Ux32U_1U_4_155_out1 && fft2_Or_1Ux1U_1U_1_139_out1) 
                    begin
                      dma_read_chnl_set_ready_curr <= fft2_Not_1U_1U_4_153_out1;
                    end 
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_input_ready_channel_ready
        if (rst == 1'b0) 
          begin
            input_ready_channel_ready <= 1'd0;
          end 
        else 
          begin
            case (global_state) 
              4'd04: 
                begin
                  if (dma_read_ctrl_ready && s_reg_132 == 32'd0000000000) 
                    begin
                      input_ready_channel_ready <= 1'd1;
                    end 
                end
              4'd06: 
                begin
                  if (fft2_LessThan_16Ux32U_1U_4_155_out1) 
                    begin
                    end 
                  else 
                    begin
                      input_ready_channel_ready <= 1'd1;
                    end
                end
              4'd07: 
                begin
                  if (input_ready_channel_valid) 
                    begin
                      input_ready_channel_ready <= 1'd0;
                    end 
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_store_to_load_channel_ready
        if (rst == 1'b0) 
          begin
            store_to_load_channel_ready <= 1'd0;
          end 
        else 
          begin
            case (global_state) 
              4'd07: 
                begin
                  if (input_ready_channel_valid) 
                    begin
                      store_to_load_channel_ready <= 1'd1;
                    end 
                end
              4'd08: 
                begin
                  if (store_to_load_channel_valid) 
                    begin
                      store_to_load_channel_ready <= 1'd0;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_124
        if (rst == 1'b0) 
          begin
            s_reg_124 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state) 
              4'd08: 
                begin
                  s_reg_124 <= s_reg_134;
                end
            endcase
          end
      end
    
    // resource: regr_ac_31
    always @(posedge clk)
      begin : drive_s_reg_129
        if (rst == 1'b0) 
          begin
            s_reg_129 <= 31'd0000000000;
          end 
        else 
          begin
            s_reg_129 <= fft2_Mul_31Ux31U_31U_1_141_out1;
          end
      end
    
    // resource: mux_32bx2i0c
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_131
        if (rst == 1'b0) 
          begin
            s_reg_131 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state) 
              4'd02: 
                begin
                  s_reg_131 <= fft2_Add_32Sx1U_32S_1_144_out1;
                end
              4'd08: 
                begin
                  s_reg_131 <= s_reg_135;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_132
        if (rst == 1'b0) 
          begin
            s_reg_132 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state) 
              4'd02, 4'd08: 
                begin
                  s_reg_132 <= fft2_N_Mux_32_2_0_4_147_out1;
                end
            endcase
          end
      end
    
    // resource: mux_31bx2i0c
    // resource: regr_en_ac_31
    always @(posedge clk)
      begin : drive_s_reg_133
        if (rst == 1'b0) 
          begin
            s_reg_133 <= 31'd0000000000;
          end 
        else 
          begin
            case (global_state) 
              4'd02: 
                begin
                  s_reg_133 <= s_reg_124[31:1];
                end
              4'd08: 
                begin
                  s_reg_133 <= s_reg_134[31:1];
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_134
        if (rst == 1'b0) 
          begin
            s_reg_134 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state) 
              4'd03: 
                begin
                  s_reg_134 <= fft2_Add_32Ux32U_32U_4_148_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_135
        if (rst == 1'b0) 
          begin
            s_reg_135 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state) 
              4'd03: 
                begin
                  s_reg_135 <= fft2_Sub_32Sx16U_32S_4_149_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_s_reg_139
        if (rst == 1'b0) 
          begin
            s_reg_139 <= 1'b0;
          end 
        else 
          begin
            case (global_state) 
              4'd04: 
                begin
                  s_reg_139 <= fft2_GreaterThan_32Sx17S_1U_4_150_out1;
                end
            endcase
          end
      end
    
    // resource: mux_16bx2i1c
    // resource: regr_en_ac_16
    always @(posedge clk)
      begin : drive_s_reg_140
        if (rst == 1'b0) 
          begin
            s_reg_140 <= 16'd00000;
          end 
        else 
          begin
            case (global_state) 
              4'd04: 
                begin
                  if (s_reg_132 != 32'd0000000000) 
                    begin
                      s_reg_140 <= 16'd00000;
                    end 
                end
              4'd06: 
                begin
                  s_reg_140 <= s_reg_141;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_16
    always @(posedge clk)
      begin : drive_s_reg_141
        if (rst == 1'b0) 
          begin
            s_reg_141 <= 16'd00000;
          end 
        else 
          begin
            case (global_state) 
              4'd04: 
                begin
                  if (s_reg_132 != 32'd0000000000) 
                    begin
                      s_reg_141 <= fft2_Add_16Ux2U_16U_4_151_out1;
                    end 
                end
              4'd06: 
                begin
                  s_reg_141 <= fft2_Add_16Ux2U_16U_4_151_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_64
    always @(posedge clk)
      begin : drive_s_reg_142
        if (rst == 1'b0) 
          begin
            s_reg_142 <= 64'd00000000000000000000;
          end 
        else 
          begin
            case (global_state) 
              4'd04: 
                begin
                  if (s_reg_132 != 32'd0000000000) 
                    begin
                      s_reg_142 <= fft2_N_MuxB_64_2_1_4_152_out1;
                    end 
                end
              4'd05, 4'd06: 
                begin
                  s_reg_142 <= fft2_N_MuxB_64_2_1_4_152_out1;
                end
            endcase
          end
      end
    
    // resource: fft2_LeftShift_1Ux5U_31S_4  instance: fft2_LeftShift_1Ux5U_31S_4_140
    assign fft2_LeftShift_1Ux5U_31S_4_140_out1 = 31'd0000000001 << conf_info_logn_samples[4:0];
    
    // resource: fft2_Mul_31Ux31U_31U_1  instance: fft2_Mul_31Ux31U_31U_1_141
    assign fft2_Mul_31Ux31U_31U_1_141_out1 = {1'b0, conf_info_num_ffts[30:0]} * fft2_LeftShift_1Ux5U_31S_4_140_out1;
    
    // instance: drive_fft2_Sub_32Sx1U_32S_1_142_in2
    assign fft2_Sub_32Sx1U_32S_1_142_in2 = {s_reg_129, 1'b0};
    
    // resource: fft2_Sub_32Sx1U_32S_1  instance: fft2_Sub_32Sx1U_32S_1_142
    assign fft2_Sub_32Sx1U_32S_1_142_out1 = fft2_Sub_32Sx1U_32S_1_142_in2 - 32'd0000000001;
    
    // resource: fft2_Or_32Sx1U_32S_4  instance: fft2_Or_32Sx1U_32S_4_143
    assign fft2_Or_32Sx1U_32S_4_143_out1 = fft2_Sub_32Sx1U_32S_1_142_out1 | 32'd0000000001;
    
    // resource: fft2_Add_32Sx1U_32S_1  instance: fft2_Add_32Sx1U_32S_1_144
    assign fft2_Add_32Sx1U_32S_1_144_out1 = fft2_Or_32Sx1U_32S_4_143_out1 + 32'd0000000001;
    
    // resource: fft2_GreaterThan_32Sx17S_1U_4  instance: fft2_GreaterThan_32Sx17S_1U_4_145
    assign fft2_GreaterThan_32Sx17S_1U_4_145_out1 = fft2_Add_32Sx1U_32S_1_144_out1[31] ^ fft2_Add_32Sx1U_32S_1_144_out1 > 32'd0000000000;
    
    // resource: mux_32bx2i0c
    always @(s_reg_135 or fft2_Add_32Sx1U_32S_1_144_out1 or gs_ctrl0)
      begin : drive_fft2_GreaterThan_32Sx17S_1U_4_146_in2
        if (gs_ctrl0) 
          begin
            fft2_GreaterThan_32Sx17S_1U_4_146_in2 = s_reg_135;
          end 
        else 
          begin
            fft2_GreaterThan_32Sx17S_1U_4_146_in2 = fft2_Add_32Sx1U_32S_1_144_out1;
          end
      end
    
    // resource: fft2_GreaterThan_32Sx17S_1U_4  instance: fft2_GreaterThan_32Sx17S_1U_4_146
    assign fft2_GreaterThan_32Sx17S_1U_4_146_out1 = fft2_GreaterThan_32Sx17S_1U_4_146_in2[31] ^ fft2_GreaterThan_32Sx17S_1U_4_146_in2 > 32'd0000032768;
    
    // resource: mux_32bx2i0c
    always @(s_reg_135 or fft2_Add_32Sx1U_32S_1_144_out1 or gs_ctrl1)
      begin : drive_fft2_N_Mux_32_2_0_4_147_in2
        if (gs_ctrl1) 
          begin
            fft2_N_Mux_32_2_0_4_147_in2 = s_reg_135;
          end 
        else 
          begin
            fft2_N_Mux_32_2_0_4_147_in2 = fft2_Add_32Sx1U_32S_1_144_out1;
          end
      end
    
    // resource: fft2_N_Mux_32_2_0_4
    always @(fft2_GreaterThan_32Sx17S_1U_4_146_out1 or fft2_N_Mux_32_2_0_4_147_in2)
      begin : fft2_N_Mux_32_2_0_4_147
        if (fft2_GreaterThan_32Sx17S_1U_4_146_out1) 
          begin
            fft2_N_Mux_32_2_0_4_147_out1 = 32'd0000032768;
          end 
        else 
          begin
            fft2_N_Mux_32_2_0_4_147_out1 = fft2_N_Mux_32_2_0_4_147_in2;
          end
      end
    
    // resource: fft2_Add_32Ux32U_32U_4  instance: fft2_Add_32Ux32U_32U_4_148
    assign fft2_Add_32Ux32U_32U_4_148_out1 = s_reg_124 + s_reg_132;
    
    // resource: fft2_Sub_32Sx16U_32S_4  instance: fft2_Sub_32Sx16U_32S_4_149
    assign fft2_Sub_32Sx16U_32S_4_149_out1 = s_reg_131 - 32'd0000032768;
    
    // resource: fft2_GreaterThan_32Sx17S_1U_4  instance: fft2_GreaterThan_32Sx17S_1U_4_150
    assign fft2_GreaterThan_32Sx17S_1U_4_150_out1 = s_reg_135[31] ^ s_reg_135 > 32'd0000000000;
    
    // resource: mux_16bx2i1c
    always @(s_reg_141 or gs_ctrl2)
      begin : drive_fft2_Add_16Ux2U_16U_4_151_in2
        if (gs_ctrl2) 
          begin
            fft2_Add_16Ux2U_16U_4_151_in2 = s_reg_141;
          end 
        else 
          begin
            fft2_Add_16Ux2U_16U_4_151_in2 = 16'd00000;
          end
      end
    
    // resource: fft2_Add_16Ux2U_16U_4  instance: fft2_Add_16Ux2U_16U_4_151
    assign fft2_Add_16Ux2U_16U_4_151_out1 = fft2_Add_16Ux2U_16U_4_151_in2 + 16'd00002;
    
    // resource: fft2_N_MuxB_64_2_1_4
    always @(dma_read_chnl_ready or dma_read_chnl_data or dma_read_chnl_data_buf)
      begin : fft2_N_MuxB_64_2_1_4_152
        if (dma_read_chnl_ready) 
          begin
            fft2_N_MuxB_64_2_1_4_152_out1 = dma_read_chnl_data;
          end 
        else 
          begin
            fft2_N_MuxB_64_2_1_4_152_out1 = dma_read_chnl_data_buf;
          end
      end
    
    // resource: fft2_Not_1U_1U_4  instance: fft2_Not_1U_1U_4_153
    assign fft2_Not_1U_1U_4_153_out1 = !dma_read_chnl_set_ready_curr;
    
    // resource: fft2_Add_15Ux1U_15U_4  instance: fft2_Add_15Ux1U_15U_4_154
    assign fft2_Add_15Ux1U_15U_4_154_out1 = s_reg_140[14:0] + 15'd00001;
    
    // resource: fft2_LessThan_16Ux32U_1U_4  instance: fft2_LessThan_16Ux32U_1U_4_155
    assign fft2_LessThan_16Ux32U_1U_4_155_out1 = {16'b0000000000000000, s_reg_141} < s_reg_132;
    
    // instance: drive_A0_load_input_A1
    assign A0_load_input_A1 = s_reg_140[14:0];
    
    // instance: drive_A0_load_input_D1
    assign A0_load_input_D1 = s_reg_142[31:0];
    
    // resource: mux_1bx2i2c
    always @(gs_ctrl3)
      begin : drive_A0_load_input_WE1
        if (gs_ctrl3) 
          begin
            A0_load_input_WE1 = 1'd1;
          end 
        else 
          begin
            A0_load_input_WE1 = 1'd0;
          end
      end
    
    // resource: mux_1bx2i2c
    always @(gs_ctrl4)
      begin : drive_A0_load_input_CE1
        if (gs_ctrl4) 
          begin
            A0_load_input_CE1 = 1'd1;
          end 
        else 
          begin
            A0_load_input_CE1 = 1'd0;
          end
      end
    
    // resource: mux_32bx2i2c
    always @(gs_ctrl5)
      begin : drive_A0_load_input_WEM1
        if (gs_ctrl5) 
          begin
            A0_load_input_WEM1 = 32'd4294967295;
          end 
        else 
          begin
            A0_load_input_WEM1 = 32'd4294967295;
          end
      end
    
    // instance: drive_A0_load_input_A0
    assign A0_load_input_A0 = fft2_Add_15Ux1U_15U_4_154_out1;
    
    // instance: drive_A0_load_input_D0
    assign A0_load_input_D0 = s_reg_142[63:32];
    
    // resource: mux_1bx2i2c
    always @(gs_ctrl6)
      begin : drive_A0_load_input_WE0
        if (gs_ctrl6) 
          begin
            A0_load_input_WE0 = 1'd1;
          end 
        else 
          begin
            A0_load_input_WE0 = 1'd0;
          end
      end
    
    // resource: mux_1bx2i2c
    always @(gs_ctrl7)
      begin : drive_A0_load_input_CE0
        if (gs_ctrl7) 
          begin
            A0_load_input_CE0 = 1'd1;
          end 
        else 
          begin
            A0_load_input_CE0 = 1'd0;
          end
      end
    
    // resource: mux_32bx2i2c
    always @(gs_ctrl8)
      begin : drive_A0_load_input_WEM0
        if (gs_ctrl8) 
          begin
            A0_load_input_WEM0 = 32'd4294967295;
          end 
        else 
          begin
            A0_load_input_WEM0 = 32'd4294967295;
          end
      end
    
    // resource: regr_ac_4
    always @(posedge clk)
      begin : drive_global_state
        if (rst == 1'b0) 
          begin
            global_state <= 4'd00;
          end 
        else 
          begin
            global_state <= global_state_next;
          end
      end
    
// pragma translate_off
    
always @(posedge clk)
      begin : drive_printf_0
        if (rst == 1'b0) 
          begin
          end 
        else 
          begin
            case (global_state) 
              4'd03: 
                begin
                  // source loc: ../src/fft2.cpp:76
                  $write( "LOAD DMA INFO : rem %u : off = %u , len %u\n", s_reg_131, s_reg_133, s_reg_132[31:1] );
                end
            endcase
          end
      end
// pragma translate_on
    
// pragma translate_off
    
always @(posedge clk)
      begin : drive_printf_1
        if (rst == 1'b0) 
          begin
          end 
        else 
          begin
            case (global_state) 
              4'd04: 
                begin
                  if (dma_read_ctrl_ready && s_reg_132 == 32'd0000000000) 
                    begin
                      // source loc: ../src/fft2.cpp:116
                      $write( "LOAD hit the load-compute handshake...\n" );
                    end 
                end
              4'd06: 
                begin
                  if (fft2_LessThan_16Ux32U_1U_4_155_out1) 
                    begin
                    end 
                  else 
                    begin
                      // source loc: ../src/fft2.cpp:116
                      $write( "LOAD hit the load-compute handshake...\n" );
                    end
                end
            endcase
          end
      end
// pragma translate_on
    
    // resource: mux_4bx10i9c
    always @(dma_read_ctrl_ready or cfg_done or input_ready_channel_valid or store_to_load_channel_valid or fft2_Or_1Ux1U_1U_1_139_out1 or s_reg_132 or s_reg_139 or fft2_GreaterThan_32Sx17S_1U_4_145_out1 or fft2_LessThan_16Ux32U_1U_4_155_out1 or global_state)
      begin : drive_global_state_next
        case (global_state) 
          4'd00, 4'd01: 
            begin
              if (cfg_done) 
                begin
                  global_state_next = 4'd02;
                end 
              else 
                begin
                  global_state_next = 4'd01;
                end
            end
          4'd02: 
            begin
              if (fft2_GreaterThan_32Sx17S_1U_4_145_out1) 
                begin
                  global_state_next = global_state + 4'd01;
                end 
              else 
                begin
                  global_state_next = 4'd09;
                end
            end
          4'd04: 
            begin
              if (dma_read_ctrl_ready) 
                begin
                  case (s_reg_132) 
                    32'd0000000000: 
                      begin
                        global_state_next = 4'd07;
                      end
                    default: 
                      begin
                        if (fft2_Or_1Ux1U_1U_1_139_out1) 
                          begin
                            global_state_next = 4'd06;
                          end 
                        else 
                          begin
                            global_state_next = global_state + 4'd01;
                          end
                      end
                  endcase
                end 
              else 
                begin
                  global_state_next = 4'd04;
                end
            end
          4'd05: 
            begin
              if (fft2_Or_1Ux1U_1U_1_139_out1) 
                begin
                  global_state_next = global_state + 4'd01;
                end 
              else 
                begin
                  global_state_next = 4'd05;
                end
            end
          4'd06: 
            begin
              if (fft2_LessThan_16Ux32U_1U_4_155_out1) 
                begin
                  if (fft2_Or_1Ux1U_1U_1_139_out1) 
                    begin
                      global_state_next = 4'd06;
                    end 
                  else 
                    begin
                      global_state_next = 4'd05;
                    end
                end 
              else 
                begin
                  global_state_next = global_state + 4'd01;
                end
            end
          4'd07: 
            begin
              if (input_ready_channel_valid) 
                begin
                  global_state_next = global_state + 4'd01;
                end 
              else 
                begin
                  global_state_next = 4'd07;
                end
            end
          4'd08: 
            begin
              if (store_to_load_channel_valid) 
                begin
                  if (s_reg_139) 
                    begin
                      global_state_next = 4'd03;
                    end 
                  else 
                    begin
                      global_state_next = global_state + 4'd01;
                    end
                end 
              else 
                begin
                  global_state_next = 4'd08;
                end
            end
          4'd09: 
            begin
              global_state_next = 4'd09;
            end
          default: 
            begin
              global_state_next = global_state + 4'd01;
            end
        endcase
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl0
        if (rst == 1'b0) 
          begin
            gs_ctrl0 <= 1'b0;
          end 
        else 
          begin
            case (global_state_next) 
              4'd08: 
                begin
                  gs_ctrl0 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl0 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl1
        if (rst == 1'b0) 
          begin
            gs_ctrl1 <= 1'b0;
          end 
        else 
          begin
            case (global_state_next) 
              4'd08: 
                begin
                  gs_ctrl1 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl1 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl2
        if (rst == 1'b0) 
          begin
            gs_ctrl2 <= 1'b0;
          end 
        else 
          begin
            case (global_state_next) 
              4'd06: 
                begin
                  gs_ctrl2 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl2 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl3
        if (rst == 1'b0) 
          begin
            gs_ctrl3 <= 1'b0;
          end 
        else 
          begin
            case (global_state_next) 
              4'd06: 
                begin
                  gs_ctrl3 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl3 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl4
        if (rst == 1'b0) 
          begin
            gs_ctrl4 <= 1'b0;
          end 
        else 
          begin
            case (global_state_next) 
              4'd06: 
                begin
                  gs_ctrl4 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl4 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl5
        if (rst == 1'b0) 
          begin
            gs_ctrl5 <= 1'b0;
          end 
        else 
          begin
            case (global_state_next) 
              4'd06: 
                begin
                  gs_ctrl5 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl5 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl6
        if (rst == 1'b0) 
          begin
            gs_ctrl6 <= 1'b0;
          end 
        else 
          begin
            case (global_state_next) 
              4'd06: 
                begin
                  gs_ctrl6 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl6 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl7
        if (rst == 1'b0) 
          begin
            gs_ctrl7 <= 1'b0;
          end 
        else 
          begin
            case (global_state_next) 
              4'd06: 
                begin
                  gs_ctrl7 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl7 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl8
        if (rst == 1'b0) 
          begin
            gs_ctrl8 <= 1'b0;
          end 
        else 
          begin
            case (global_state_next) 
              4'd06: 
                begin
                  gs_ctrl8 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl8 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_input_ready_channel_valid
        if (rst == 1'b0) 
          begin
            input_ready_channel_valid <= 1'd0;
          end 
        else 
          begin
            case (global_state1) 
              6'd03: 
                begin
                  if (fft2_GreaterThan_32Sx17S_1U_1_15_out1) 
                    begin
                      input_ready_channel_valid <= 1'd1;
                    end 
                end
              6'd04: 
                begin
                  if (input_ready_channel_ready) 
                    begin
                      input_ready_channel_valid <= 1'd0;
                    end 
                end
              6'd33: 
                begin
                  if (output_ready_channel_valid && s_reg_20) 
                    begin
                      input_ready_channel_valid <= 1'd1;
                    end 
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_output_ready_channel_ready
        if (rst == 1'b0) 
          begin
            output_ready_channel_ready <= 1'd0;
          end 
        else 
          begin
            case (global_state1) 
              6'd04: 
                begin
                  if (input_ready_channel_ready && fft2_N_Mux_32_2_2_4_24_out1 == 32'd0000000000) 
                    begin
                      output_ready_channel_ready <= 1'd1;
                    end 
                end
              6'd05: 
                begin
                  if (!(s_reg_9 || s_reg_7 != 32'd0000000000)) 
                    begin
                      case (s_reg_5) 
                        32'd0000000000: 
                          begin
                            if (!(s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1)) 
                              begin
                                output_ready_channel_ready <= 1'd1;
                              end 
                          end
                        default: 
                          begin
                            if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))) 
                              begin
                                output_ready_channel_ready <= 1'd1;
                              end 
                          end
                      endcase
                    end 
                end
              6'd10: 
                begin
                  if (!(s_reg_39 || s_reg_7 != 32'd0000000000)) 
                    begin
                      case (s_reg_5) 
                        32'd0000000000: 
                          begin
                            if (!(s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1)) 
                              begin
                                output_ready_channel_ready <= 1'd1;
                              end 
                          end
                        default: 
                          begin
                            if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))) 
                              begin
                                output_ready_channel_ready <= 1'd1;
                              end 
                          end
                      endcase
                    end 
                end
              6'd16: 
                begin
                  if (!(s_reg_57 || s_reg_61)) 
                    begin
                      case (s_reg_5) 
                        32'd0000000000: 
                          begin
                            if (!(s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1)) 
                              begin
                                output_ready_channel_ready <= 1'd1;
                              end 
                          end
                        default: 
                          begin
                            case (s_reg_7) 
                              32'd0000000000: 
                                begin
                                  if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))) 
                                    begin
                                      output_ready_channel_ready <= 1'd1;
                                    end 
                                end
                              default: 
                                begin
                                  if (!(fft2_LessThan_17Sx33S_1U_4_85_out1 || (fft2_LessThan_32Ux32U_1U_4_87_out1 || (fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))))) 
                                    begin
                                      output_ready_channel_ready <= 1'd1;
                                    end 
                                end
                            endcase
                          end
                      endcase
                    end 
                end
              6'd18: 
                begin
                  if (s_reg_61) 
                    begin
                    end 
                  else 
                    begin
                      case (s_reg_5) 
                        32'd0000000000: 
                          begin
                            if (!(s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1)) 
                              begin
                                output_ready_channel_ready <= 1'd1;
                              end 
                          end
                        default: 
                          begin
                            case (s_reg_7) 
                              32'd0000000000: 
                                begin
                                  if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))) 
                                    begin
                                      output_ready_channel_ready <= 1'd1;
                                    end 
                                end
                              default: 
                                begin
                                  if (!(fft2_LessThan_17Sx33S_1U_4_85_out1 || (fft2_LessThan_32Ux32U_1U_4_87_out1 || (fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))))) 
                                    begin
                                      output_ready_channel_ready <= 1'd1;
                                    end 
                                end
                            endcase
                          end
                      endcase
                    end
                end
              6'd24: 
                begin
                  if (!(fft2_LessThan_32Sx33S_1U_4_116_out1 || (s_reg_75 || (s_reg_69 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))))) 
                    begin
                      output_ready_channel_ready <= 1'd1;
                    end 
                end
              6'd25: 
                begin
                  if (!(fft2_LessThan_17Sx33S_1U_4_85_out1 || (fft2_LessThan_32Ux32U_1U_4_87_out1 || (s_reg_69 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))))) 
                    begin
                      output_ready_channel_ready <= 1'd1;
                    end 
                end
              6'd26: 
                begin
                  case (s_reg_7) 
                    32'd0000000000: 
                      begin
                        if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))) 
                          begin
                            output_ready_channel_ready <= 1'd1;
                          end 
                      end
                    default: 
                      begin
                        if (!(fft2_LessThan_17Sx33S_1U_4_85_out1 || (fft2_LessThan_32Ux32U_1U_4_87_out1 || (fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))))) 
                          begin
                            output_ready_channel_ready <= 1'd1;
                          end 
                      end
                  endcase
                end
              6'd32: 
                begin
                  if (!(s_reg_110 || fft2_LessThan_32Ux32U_1U_4_122_out1)) 
                    begin
                      output_ready_channel_ready <= 1'd1;
                    end 
                end
              6'd33: 
                begin
                  if (output_ready_channel_valid) 
                    begin
                      output_ready_channel_ready <= 1'd0;
                    end 
                end
            endcase
          end
      end
    
    // resource: mux_32bx2i0c
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_1
        if (rst == 1'b0) 
          begin
            s_reg_1 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd05: 
                begin
                  if (!(s_reg_9 || s_reg_7 != 32'd0000000000)) 
                    begin
                      case (s_reg_5) 
                        32'd0000000000: 
                          begin
                            if (s_reg_11) 
                              begin
                              end 
                            else 
                              begin
                                s_reg_1 <= fft2_Add_32Ux1U_32U_4_123_out1;
                              end
                          end
                        default: 
                          begin
                            if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || s_reg_11)) 
                              begin
                                s_reg_1 <= fft2_Add_32Ux1U_32U_4_123_out1;
                              end 
                          end
                      endcase
                    end 
                end
              6'd10: 
                begin
                  if (!(s_reg_39 || s_reg_7 != 32'd0000000000)) 
                    begin
                      case (s_reg_5) 
                        32'd0000000000: 
                          begin
                            if (s_reg_11) 
                              begin
                              end 
                            else 
                              begin
                                s_reg_1 <= fft2_Add_32Ux1U_32U_4_123_out1;
                              end
                          end
                        default: 
                          begin
                            if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || s_reg_11)) 
                              begin
                                s_reg_1 <= fft2_Add_32Ux1U_32U_4_123_out1;
                              end 
                          end
                      endcase
                    end 
                end
              6'd16: 
                begin
                  if (!(s_reg_57 || s_reg_61)) 
                    begin
                      case (s_reg_5) 
                        32'd0000000000: 
                          begin
                            if (s_reg_11) 
                              begin
                              end 
                            else 
                              begin
                                s_reg_1 <= fft2_Add_32Ux1U_32U_4_123_out1;
                              end
                          end
                        default: 
                          begin
                            case (s_reg_7) 
                              32'd0000000000: 
                                begin
                                  if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || s_reg_11)) 
                                    begin
                                      s_reg_1 <= fft2_Add_32Ux1U_32U_4_123_out1;
                                    end 
                                end
                              default: 
                                begin
                                  if (!(fft2_LessThan_17Sx33S_1U_4_85_out1 || (fft2_LessThan_32Ux32U_1U_4_87_out1 || (fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || s_reg_11)))) 
                                    begin
                                      s_reg_1 <= fft2_Add_32Ux1U_32U_4_123_out1;
                                    end 
                                end
                            endcase
                          end
                      endcase
                    end 
                end
              6'd18: 
                begin
                  if (s_reg_61) 
                    begin
                    end 
                  else 
                    begin
                      case (s_reg_5) 
                        32'd0000000000: 
                          begin
                            if (s_reg_11) 
                              begin
                              end 
                            else 
                              begin
                                s_reg_1 <= fft2_Add_32Ux1U_32U_4_123_out1;
                              end
                          end
                        default: 
                          begin
                            case (s_reg_7) 
                              32'd0000000000: 
                                begin
                                  if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || s_reg_11)) 
                                    begin
                                      s_reg_1 <= fft2_Add_32Ux1U_32U_4_123_out1;
                                    end 
                                end
                              default: 
                                begin
                                  if (!(fft2_LessThan_17Sx33S_1U_4_85_out1 || (fft2_LessThan_32Ux32U_1U_4_87_out1 || (fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || s_reg_11)))) 
                                    begin
                                      s_reg_1 <= fft2_Add_32Ux1U_32U_4_123_out1;
                                    end 
                                end
                            endcase
                          end
                      endcase
                    end
                end
              6'd24: 
                begin
                  if (!(fft2_LessThan_32Sx33S_1U_4_116_out1 || (s_reg_75 || (s_reg_69 || s_reg_11)))) 
                    begin
                      s_reg_1 <= fft2_Add_32Ux1U_32U_4_123_out1;
                    end 
                end
              6'd25: 
                begin
                  if (!(fft2_LessThan_17Sx33S_1U_4_85_out1 || (fft2_LessThan_32Ux32U_1U_4_87_out1 || (s_reg_69 || s_reg_11)))) 
                    begin
                      s_reg_1 <= fft2_Add_32Ux1U_32U_4_123_out1;
                    end 
                end
              6'd26: 
                begin
                  case (s_reg_7) 
                    32'd0000000000: 
                      begin
                        if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || s_reg_11)) 
                          begin
                            s_reg_1 <= fft2_Add_32Ux1U_32U_4_123_out1;
                          end 
                      end
                    default: 
                      begin
                        if (!(fft2_LessThan_17Sx33S_1U_4_85_out1 || (fft2_LessThan_32Ux32U_1U_4_87_out1 || (fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || s_reg_11)))) 
                          begin
                            s_reg_1 <= fft2_Add_32Ux1U_32U_4_123_out1;
                          end 
                      end
                  endcase
                end
              6'd32: 
                begin
                  if (s_reg_110) 
                    begin
                    end 
                  else 
                    begin
                      s_reg_1 <= fft2_Add_32Ux1U_32U_4_123_out1;
                    end
                end
              6'd33: 
                begin
                  s_reg_1 <= s_reg_116;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_31
    always @(posedge clk)
      begin : drive_s_reg_10_slice
        if (rst == 1'b0) 
          begin
            s_reg_10_slice <= 31'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd00, 6'd01: 
                begin
                  s_reg_10_slice <= fft2_LeftShift_1Ux5U_32S_4_1_out1[31:1];
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_33
    always @(posedge clk)
      begin : drive_s_reg_100
        if (rst == 1'b0) 
          begin
            s_reg_100 <= 33'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd22: 
                begin
                  s_reg_100 <= fft2_Add_50Ux50U_50U_4_111_out1[49:17];
                end
            endcase
          end
      end
    
    // resource: regr_ac_32
    always @(posedge clk)
      begin : drive_s_reg_101
        if (rst == 1'b0) 
          begin
            s_reg_101 <= 32'd0000000000;
          end 
        else 
          begin
            s_reg_101 <= {fft2_Sub_32Ux32U_32U_4_113_out1[31:1], fft2_Sub_32Ux32U_32U_4_113_out1[0]};
          end
      end
    
    // resource: mux_32bx2i1c
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_102
        if (rst == 1'b0) 
          begin
            s_reg_102 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd05, 6'd10, 6'd16, 6'd18, 6'd24, 6'd25, 6'd26: 
                begin
                  if (s_reg_11) 
                    begin
                      /* state245 */
                      s_reg_102 <= 32'd0000000000;
                    end 
                end
              6'd32: 
                begin
                  /* state244 */
                  s_reg_102 <= s_reg_106;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_14
    always @(posedge clk)
      begin : drive_s_reg_103
        if (rst == 1'b0) 
          begin
            s_reg_103 <= 14'd00000;
          end 
        else 
          begin
            case (global_state1) 
              6'd27: 
                begin
                  s_reg_103 <= fft2_Add_14Ux14U_14U_4_117_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_106
        if (rst == 1'b0) 
          begin
            s_reg_106 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd27: 
                begin
                  s_reg_106 <= fft2_Add_32Ux1U_32U_4_118_out1;
                end
            endcase
          end
      end
    
    // resource: regr_ac_14
    always @(posedge clk)
      begin : drive_s_reg_107
        if (rst == 1'b0) 
          begin
            s_reg_107 <= 14'd00000;
          end 
        else 
          begin
            s_reg_107 <= fft2_Add_14Ux14U_14U_4_119_out1;
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_108
        if (rst == 1'b0) 
          begin
            s_reg_108 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd28: 
                begin
                  s_reg_108 <= A0_shared_Q3_wire;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_109
        if (rst == 1'b0) 
          begin
            s_reg_109 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd28: 
                begin
                  s_reg_109 <= A0_shared_Q2_wire;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_s_reg_11
        if (rst == 1'b0) 
          begin
            s_reg_11 <= 1'b0;
          end 
        else 
          begin
            case (global_state1) 
              6'd00, 6'd01: 
                begin
                  s_reg_11 <= fft2_And_1Ux1U_1U_4_11_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_s_reg_110
        if (rst == 1'b0) 
          begin
            s_reg_110 <= 1'b0;
          end 
        else 
          begin
            case (global_state1) 
              6'd28: 
                begin
                  s_reg_110 <= fft2_LessThan_32Ux32U_1U_4_120_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_14
    always @(posedge clk)
      begin : drive_s_reg_111
        if (rst == 1'b0) 
          begin
            s_reg_111 <= 14'd00000;
          end 
        else 
          begin
            case (global_state1) 
              6'd29: 
                begin
                  s_reg_111 <= fft2_Add_14Ux14U_14U_4_121_out1;
                end
            endcase
          end
      end
    
    // resource: regr_ac_32
    always @(posedge clk)
      begin : drive_s_reg_114
        if (rst == 1'b0) 
          begin
            s_reg_114 <= 32'd0000000000;
          end 
        else 
          begin
            s_reg_114 <= A0_shared_Q3_wire;
          end
      end
    
    // resource: regr_ac_32
    always @(posedge clk)
      begin : drive_s_reg_115
        if (rst == 1'b0) 
          begin
            s_reg_115 <= 32'd0000000000;
          end 
        else 
          begin
            s_reg_115 <= A0_shared_Q2_wire;
          end
      end
    
    // resource: mux_32bx2i0c
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_116
        if (rst == 1'b0) 
          begin
            s_reg_116 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd04: 
                begin
                  s_reg_116 <= s_reg_1;
                end
              6'd05, 6'd10, 6'd16, 6'd18, 6'd24, 6'd25, 6'd26, 6'd32: 
                begin
                  s_reg_116 <= fft2_Add_32Ux1U_32U_4_123_out1;
                end
            endcase
          end
      end
    
    // resource: regr_ac_5
    always @(posedge clk)
      begin : drive_s_reg_12
        if (rst == 1'b0) 
          begin
            s_reg_12 <= 5'd00;
          end 
        else 
          begin
            s_reg_12 <= fft2_Sub_4Ux5S_5S_4_12_out1;
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_13
        if (rst == 1'b0) 
          begin
            s_reg_13 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd03: 
                begin
                  s_reg_13 <= fft2_LeftShift_1Ux5U_32S_4_13_out1;
                end
            endcase
          end
      end
    
    // resource: mux_32bx2i0c
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_14
        if (rst == 1'b0) 
          begin
            s_reg_14 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd03: 
                begin
                  s_reg_14 <= {fft2_Mul_31Ux31U_31U_4_14_out1, 1'b0};
                end
              6'd33: 
                begin
                  if (output_ready_channel_valid) 
                    begin
                      s_reg_14 <= fft2_Sub_32Ux16U_32S_4_124_out1;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_16
        if (rst == 1'b0) 
          begin
            s_reg_16 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd03, 6'd33: 
                begin
                  s_reg_16 <= fft2_Sub_32Ux32U_32U_4_16_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_s_reg_17
        if (rst == 1'b0) 
          begin
            s_reg_17 <= 1'b0;
          end 
        else 
          begin
            case (global_state1) 
              6'd03, 6'd33: 
                begin
                  s_reg_17 <= fft2_GreaterThan_32Ux32U_1U_4_17_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_18
        if (rst == 1'b0) 
          begin
            s_reg_18 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd03: 
                begin
                  s_reg_18 <= fft2_Sub_32Sx16U_32S_1_20_out1;
                end
              6'd33: 
                begin
                  if (output_ready_channel_valid) 
                    begin
                      s_reg_18 <= fft2_Sub_32Sx16U_32S_1_20_out1;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_s_reg_20
        if (rst == 1'b0) 
          begin
            s_reg_20 <= 1'b0;
          end 
        else 
          begin
            case (global_state1) 
              6'd04: 
                begin
                  s_reg_20 <= fft2_GreaterThan_32Sx17S_1U_4_23_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_21
        if (rst == 1'b0) 
          begin
            s_reg_21 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd04: 
                begin
                  if (fft2_N_Mux_32_2_2_4_24_out1 != 32'd0000000000) 
                    begin
                      s_reg_21 <= fft2_N_Mux_32_2_2_4_24_out1;
                    end 
                end
            endcase
          end
      end
    
// pragma translate_off
    
always @(posedge clk)
      begin : drive_s_reg_23
        if (rst == 1'b0) 
          begin
            s_reg_23 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd04: 
                begin
                  if (fft2_N_Mux_32_2_2_4_24_out1 != 32'd0000000000) 
                    begin
                      s_reg_23 <= 32'd0000000000;
                    end 
                end
              6'd05, 6'd10, 6'd16, 6'd18, 6'd24, 6'd25, 6'd26, 6'd32: 
                begin
                  s_reg_23 <= s_reg_24;
                end
            endcase
          end
      end
// pragma translate_on
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_24
        if (rst == 1'b0) 
          begin
            s_reg_24 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd04: 
                begin
                  if (fft2_N_Mux_32_2_2_4_24_out1 != 32'd0000000000) 
                    begin
                      s_reg_24 <= fft2_Add_32Ux1U_32U_4_25_out1;
                    end 
                end
              6'd05: 
                begin
                  if (!(s_reg_9 || s_reg_7 != 32'd0000000000)) 
                    begin
                      case (s_reg_5) 
                        32'd0000000000: 
                          begin
                            if (s_reg_11) 
                              begin
                              end 
                            else 
                              begin
                                s_reg_24 <= fft2_Add_32Ux1U_32U_4_25_out1;
                              end
                          end
                        default: 
                          begin
                            if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || s_reg_11)) 
                              begin
                                s_reg_24 <= fft2_Add_32Ux1U_32U_4_25_out1;
                              end 
                          end
                      endcase
                    end 
                end
              6'd10: 
                begin
                  if (!(s_reg_39 || s_reg_7 != 32'd0000000000)) 
                    begin
                      case (s_reg_5) 
                        32'd0000000000: 
                          begin
                            if (s_reg_11) 
                              begin
                              end 
                            else 
                              begin
                                s_reg_24 <= fft2_Add_32Ux1U_32U_4_25_out1;
                              end
                          end
                        default: 
                          begin
                            if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || s_reg_11)) 
                              begin
                                s_reg_24 <= fft2_Add_32Ux1U_32U_4_25_out1;
                              end 
                          end
                      endcase
                    end 
                end
              6'd16: 
                begin
                  if (!(s_reg_57 || s_reg_61)) 
                    begin
                      case (s_reg_5) 
                        32'd0000000000: 
                          begin
                            if (s_reg_11) 
                              begin
                              end 
                            else 
                              begin
                                s_reg_24 <= fft2_Add_32Ux1U_32U_4_25_out1;
                              end
                          end
                        default: 
                          begin
                            case (s_reg_7) 
                              32'd0000000000: 
                                begin
                                  if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || s_reg_11)) 
                                    begin
                                      s_reg_24 <= fft2_Add_32Ux1U_32U_4_25_out1;
                                    end 
                                end
                              default: 
                                begin
                                  if (!(fft2_LessThan_17Sx33S_1U_4_85_out1 || (fft2_LessThan_32Ux32U_1U_4_87_out1 || (fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || s_reg_11)))) 
                                    begin
                                      s_reg_24 <= fft2_Add_32Ux1U_32U_4_25_out1;
                                    end 
                                end
                            endcase
                          end
                      endcase
                    end 
                end
              6'd18: 
                begin
                  if (s_reg_61) 
                    begin
                    end 
                  else 
                    begin
                      case (s_reg_5) 
                        32'd0000000000: 
                          begin
                            if (s_reg_11) 
                              begin
                              end 
                            else 
                              begin
                                s_reg_24 <= fft2_Add_32Ux1U_32U_4_25_out1;
                              end
                          end
                        default: 
                          begin
                            case (s_reg_7) 
                              32'd0000000000: 
                                begin
                                  if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || s_reg_11)) 
                                    begin
                                      s_reg_24 <= fft2_Add_32Ux1U_32U_4_25_out1;
                                    end 
                                end
                              default: 
                                begin
                                  if (!(fft2_LessThan_17Sx33S_1U_4_85_out1 || (fft2_LessThan_32Ux32U_1U_4_87_out1 || (fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || s_reg_11)))) 
                                    begin
                                      s_reg_24 <= fft2_Add_32Ux1U_32U_4_25_out1;
                                    end 
                                end
                            endcase
                          end
                      endcase
                    end
                end
              6'd24: 
                begin
                  if (!(fft2_LessThan_32Sx33S_1U_4_116_out1 || (s_reg_75 || (s_reg_69 || s_reg_11)))) 
                    begin
                      s_reg_24 <= fft2_Add_32Ux1U_32U_4_25_out1;
                    end 
                end
              6'd25: 
                begin
                  if (!(fft2_LessThan_17Sx33S_1U_4_85_out1 || (fft2_LessThan_32Ux32U_1U_4_87_out1 || (s_reg_69 || s_reg_11)))) 
                    begin
                      s_reg_24 <= fft2_Add_32Ux1U_32U_4_25_out1;
                    end 
                end
              6'd26: 
                begin
                  case (s_reg_7) 
                    32'd0000000000: 
                      begin
                        if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || s_reg_11)) 
                          begin
                            s_reg_24 <= fft2_Add_32Ux1U_32U_4_25_out1;
                          end 
                      end
                    default: 
                      begin
                        if (!(fft2_LessThan_17Sx33S_1U_4_85_out1 || (fft2_LessThan_32Ux32U_1U_4_87_out1 || (fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || s_reg_11)))) 
                          begin
                            s_reg_24 <= fft2_Add_32Ux1U_32U_4_25_out1;
                          end 
                      end
                  endcase
                end
              6'd32: 
                begin
                  if (s_reg_110) 
                    begin
                    end 
                  else 
                    begin
                      s_reg_24 <= fft2_Add_32Ux1U_32U_4_25_out1;
                    end
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_25
        if (rst == 1'b0) 
          begin
            s_reg_25 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd05: 
                begin
                  if (s_reg_9) 
                    begin
                      s_reg_25 <= fft2_Mul_32Ux32U_32U_4_26_out1;
                    end 
                  else 
                    begin
                      /* state60 */
                      case (s_reg_7) 
                        32'd0000000000: 
                          begin
                            case (s_reg_5) 
                              32'd0000000000: 
                                begin
                                  if (s_reg_11) 
                                    begin
                                      s_reg_25 <= fft2_Mul_32Ux32U_32U_4_26_out1;
                                    end 
                                end
                              default: 
                                begin
                                  if (fft2_LessThanEQ_32Ux32U_1U_4_79_out1) 
                                    begin
                                      /* state107 */
                                      s_reg_25 <= fft2_Mul_32Ux32U_32U_4_26_out1;
                                    end 
                                  else 
                                    begin
                                      if (s_reg_11) 
                                        begin
                                          s_reg_25 <= fft2_Mul_32Ux32U_32U_4_26_out1;
                                        end 
                                    end
                                end
                            endcase
                          end
                        default: 
                          begin
                            s_reg_25 <= fft2_Mul_32Ux32U_32U_4_26_out1;
                          end
                      endcase
                    end
                end
            endcase
          end
      end
    
    // resource: mux_32bx2i1c
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_26
        if (rst == 1'b0) 
          begin
            s_reg_26 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd05: 
                begin
                  if (s_reg_9) 
                    begin
                      s_reg_26 <= 32'd0000000000;
                    end 
                end
              6'd11: 
                begin
                  s_reg_26 <= s_reg_33;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_14
    always @(posedge clk)
      begin : drive_s_reg_27
        if (rst == 1'b0) 
          begin
            s_reg_27 <= 14'd00000;
          end 
        else 
          begin
            case (global_state1) 
              6'd05: 
                begin
                  if (s_reg_9) 
                    begin
                      s_reg_27 <= fft2_Add_14Ux14U_14U_4_27_out1;
                    end 
                end
              6'd11: 
                begin
                  s_reg_27 <= fft2_Add_14Ux14U_14U_4_27_out1;
                end
            endcase
          end
      end
    
    // resource: regr_ac_14
    always @(posedge clk)
      begin : drive_s_reg_30
        if (rst == 1'b0) 
          begin
            s_reg_30 <= 14'd00000;
          end 
        else 
          begin
            s_reg_30 <= fft2_Add_14Ux14U_14U_4_28_out1;
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_31
        if (rst == 1'b0) 
          begin
            s_reg_31 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd06: 
                begin
                  s_reg_31 <= A0_shared_Q3_wire;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_32
        if (rst == 1'b0) 
          begin
            s_reg_32 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd06: 
                begin
                  s_reg_32 <= A0_shared_Q2_wire;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_33
        if (rst == 1'b0) 
          begin
            s_reg_33 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd06: 
                begin
                  s_reg_33 <= fft2_Add_32Ux1U_32U_4_29_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_14
    always @(posedge clk)
      begin : drive_s_reg_34
        if (rst == 1'b0) 
          begin
            s_reg_34 <= 14'd00000;
          end 
        else 
          begin
            case (global_state1) 
              6'd07: 
                begin
                  s_reg_34 <= fft2_Add_14Ux14U_14U_4_30_out1;
                end
            endcase
          end
      end
    
    // resource: regr_ac_32
    always @(posedge clk)
      begin : drive_s_reg_37
        if (rst == 1'b0) 
          begin
            s_reg_37 <= 32'd0000000000;
          end 
        else 
          begin
            s_reg_37 <= A0_shared_Q3_wire;
          end
      end
    
    // resource: regr_ac_32
    always @(posedge clk)
      begin : drive_s_reg_38
        if (rst == 1'b0) 
          begin
            s_reg_38 <= 32'd0000000000;
          end 
        else 
          begin
            s_reg_38 <= A0_shared_Q2_wire;
          end
      end
    
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_s_reg_39
        if (rst == 1'b0) 
          begin
            s_reg_39 <= 1'b0;
          end 
        else 
          begin
            s_reg_39 <= fft2_LessThan_32Ux32U_1U_4_31_out1;
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_4
        if (rst == 1'b0) 
          begin
            s_reg_4 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd00, 6'd01: 
                begin
                  s_reg_4 <= conf_info_num_ffts;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_40
        if (rst == 1'b0) 
          begin
            s_reg_40 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd05, 6'd10: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_40 <= s_reg_7;
                    end 
                end
            endcase
          end
      end
    
    // resource: mux_32bx2i1c
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_41
        if (rst == 1'b0) 
          begin
            s_reg_41 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd05, 6'd10: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_41 <= 32'd0000000000;
                    end 
                end
              6'd16, 6'd18: 
                begin
                  s_reg_41 <= s_reg_51;
                end
            endcase
          end
      end
    
    // resource: mux_27bx3i1c
    // resource: regr_en_ac_27
    always @(posedge clk)
      begin : drive_s_reg_42
        if (rst == 1'b0) 
          begin
            s_reg_42 <= 27'd000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd05, 6'd10: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_42 <= 27'd000000000;
                    end 
                end
              6'd13: 
                begin
                  s_reg_42 <= {8'd000, s_reg_48_slice[23:5]};
                end
              6'd16, 6'd18: 
                begin
                  s_reg_42 <= s_reg_51[31:5];
                end
            endcase
          end
      end
    
    // resource: mux_26bx3i1c
    // resource: regr_en_ac_26
    always @(posedge clk)
      begin : drive_s_reg_43
        if (rst == 1'b0) 
          begin
            s_reg_43 <= 26'd00000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd05, 6'd10: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_43 <= 26'd00000000;
                    end 
                end
              6'd13: 
                begin
                  s_reg_43 <= {8'd000, s_reg_48_slice[23:6]};
                end
              6'd16, 6'd18: 
                begin
                  s_reg_43 <= s_reg_51[31:6];
                end
            endcase
          end
      end
    
    // resource: mux_25bx3i1c
    // resource: regr_en_ac_25
    always @(posedge clk)
      begin : drive_s_reg_44
        if (rst == 1'b0) 
          begin
            s_reg_44 <= 25'd00000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd05, 6'd10: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_44 <= 25'd00000000;
                    end 
                end
              6'd13: 
                begin
                  s_reg_44 <= {8'd000, s_reg_48_slice[23:7]};
                end
              6'd16, 6'd18: 
                begin
                  s_reg_44 <= s_reg_51[31:7];
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_s_reg_45
        if (rst == 1'b0) 
          begin
            s_reg_45 <= 1'b0;
          end 
        else 
          begin
            case (global_state1) 
              6'd05, 6'd10: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_45 <= fft2_LessThan_6Sx6S_1U_4_34_out1;
                    end 
                end
              6'd13, 6'd16, 6'd18: 
                begin
                  s_reg_45 <= fft2_LessThan_6Sx6S_1U_4_34_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_6
    always @(posedge clk)
      begin : drive_s_reg_46
        if (rst == 1'b0) 
          begin
            s_reg_46 <= 6'd00;
          end 
        else 
          begin
            case (global_state1) 
              6'd05, 6'd10: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_46 <= fft2_Add_5Ux1U_6U_4_36_out1;
                    end 
                end
              6'd13, 6'd16, 6'd18: 
                begin
                  s_reg_46 <= fft2_Add_5Ux1U_6U_4_36_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_47
        if (rst == 1'b0) 
          begin
            s_reg_47 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd05, 6'd10: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_47 <= fft2_Sub_32Sx1U_32S_1_53_out1;
                    end 
                end
              6'd13, 6'd16, 6'd18: 
                begin
                  s_reg_47 <= fft2_Sub_32Sx1U_32S_1_53_out1;
                end
            endcase
          end
      end
    
    // resource: mux_24bx3i1c
    // resource: regr_en_ac_24
    always @(posedge clk)
      begin : drive_s_reg_48_slice
        if (rst == 1'b0) 
          begin
            s_reg_48_slice <= 24'd00000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd05, 6'd10: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_48_slice <= 24'd00000000;
                    end 
                end
              6'd13: 
                begin
                  s_reg_48_slice <= {8'b00000000, s_reg_48_slice[23:8]};
                end
              6'd16, 6'd18: 
                begin
                  s_reg_48_slice <= s_reg_51[31:8];
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_49
        if (rst == 1'b0) 
          begin
            s_reg_49 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd05, 6'd10: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_49 <= fft2_N_Mux_32_2_2_4_57_out1;
                    end 
                end
              6'd13, 6'd16, 6'd18: 
                begin
                  s_reg_49 <= fft2_N_Mux_32_2_2_4_57_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_5
        if (rst == 1'b0) 
          begin
            s_reg_5 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd00, 6'd01: 
                begin
                  s_reg_5 <= conf_info_logn_samples;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_50
        if (rst == 1'b0) 
          begin
            s_reg_50 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd05, 6'd10: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_50 <= fft2_N_Mux_32_2_2_4_58_out1;
                    end 
                end
              6'd13, 6'd16, 6'd18: 
                begin
                  s_reg_50 <= fft2_N_Mux_32_2_2_4_58_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_51
        if (rst == 1'b0) 
          begin
            s_reg_51 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd12: 
                begin
                  s_reg_51 <= fft2_Add_32Ux1U_32U_4_65_out1;
                end
            endcase
          end
      end
    
    // resource: regr_ac_32
    always @(posedge clk)
      begin : drive_s_reg_52
        if (rst == 1'b0) 
          begin
            s_reg_52 <= 32'd0000000000;
          end 
        else 
          begin
            /* state32 */
            s_reg_52 <= fft2_Sub_32Sx1U_32S_1_67_out1;
          end
      end
    
    // resource: regr_en_ac_14
    always @(posedge clk)
      begin : drive_s_reg_53
        if (rst == 1'b0) 
          begin
            s_reg_53 <= 14'd00000;
          end 
        else 
          begin
            case (global_state1) 
              6'd12: 
                begin
                  s_reg_53 <= fft2_Add_14Ux14U_14U_4_69_out1;
                end
            endcase
          end
      end
    
    // resource: regr_ac_32
    always @(posedge clk)
      begin : drive_s_reg_56
        if (rst == 1'b0) 
          begin
            s_reg_56 <= 32'd0000000000;
          end 
        else 
          begin
            s_reg_56 <= fft2_LeftShift_32Ux5U_32U_1_70_out1;
          end
      end
    
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_s_reg_57
        if (rst == 1'b0) 
          begin
            s_reg_57 <= 1'b0;
          end 
        else 
          begin
            case (global_state1) 
              6'd14: 
                begin
                  s_reg_57 <= fft2_LessThan_32Ux32U_1U_4_73_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_14
    always @(posedge clk)
      begin : drive_s_reg_58
        if (rst == 1'b0) 
          begin
            s_reg_58 <= 14'd00000;
          end 
        else 
          begin
            case (global_state1) 
              6'd14: 
                begin
                  s_reg_58 <= fft2_Add_14Ux14U_14U_4_74_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_59
        if (rst == 1'b0) 
          begin
            s_reg_59 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd14: 
                begin
                  s_reg_59 <= A0_shared_Q3_wire;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_6
        if (rst == 1'b0) 
          begin
            s_reg_6 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd00, 6'd01: 
                begin
                  s_reg_6 <= conf_info_do_inverse;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_60
        if (rst == 1'b0) 
          begin
            s_reg_60 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd14: 
                begin
                  s_reg_60 <= A0_shared_Q2_wire;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_s_reg_61
        if (rst == 1'b0) 
          begin
            s_reg_61 <= 1'b0;
          end 
        else 
          begin
            case (global_state1) 
              6'd14: 
                begin
                  s_reg_61 <= fft2_LessThan_32Ux32U_1U_4_75_out1;
                end
            endcase
          end
      end
    
    // resource: regr_ac_32
    always @(posedge clk)
      begin : drive_s_reg_64
        if (rst == 1'b0) 
          begin
            s_reg_64 <= 32'd0000000000;
          end 
        else 
          begin
            s_reg_64 <= A0_shared_Q3_wire;
          end
      end
    
    // resource: regr_ac_32
    always @(posedge clk)
      begin : drive_s_reg_65
        if (rst == 1'b0) 
          begin
            s_reg_65 <= 32'd0000000000;
          end 
        else 
          begin
            s_reg_65 <= A0_shared_Q2_wire;
          end
      end
    
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_s_reg_66
        if (rst == 1'b0) 
          begin
            s_reg_66 <= 1'b0;
          end 
        else 
          begin
            case (global_state1) 
              6'd05, 6'd10, 6'd16, 6'd18: 
                begin
                  if (s_reg_5 != 32'd0000000000) 
                    begin
                      s_reg_66 <= fft2_OrReduction_32S_1U_4_76_out1;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_67
        if (rst == 1'b0) 
          begin
            s_reg_67 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd16, 6'd18: 
                begin
                  if (s_reg_5 != 32'd0000000000 && s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_67 <= fft2_LeftShift_1Ux5U_32S_1_77_out1;
                    end 
                end
              6'd26: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_67 <= fft2_LeftShift_1Ux5U_32S_1_77_out1;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_68
        if (rst == 1'b0) 
          begin
            s_reg_68 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd05, 6'd10, 6'd16, 6'd18: 
                begin
                  if (s_reg_5 != 32'd0000000000) 
                    begin
                      s_reg_68 <= fft2_Add_32Ux1U_32U_1_78_out1;
                    end 
                end
              6'd26: 
                begin
                  s_reg_68 <= fft2_Add_32Ux1U_32U_1_78_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_s_reg_69
        if (rst == 1'b0) 
          begin
            s_reg_69 <= 1'b0;
          end 
        else 
          begin
            case (global_state1) 
              6'd16, 6'd18: 
                begin
                  if (s_reg_5 != 32'd0000000000 && s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_69 <= fft2_LessThanEQ_32Ux32U_1U_4_79_out1;
                    end 
                end
              6'd26: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_69 <= fft2_LessThanEQ_32Ux32U_1U_4_79_out1;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_7
        if (rst == 1'b0) 
          begin
            s_reg_7 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd00, 6'd01: 
                begin
                  s_reg_7 <= fft2_LeftShift_1Ux5U_32S_4_1_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_20
    always @(posedge clk)
      begin : drive_s_reg_70
        if (rst == 1'b0) 
          begin
            s_reg_70 <= 20'd0000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd16, 6'd18: 
                begin
                  if (s_reg_5 != 32'd0000000000 && s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_70 <= fft2_N_Mux_20_12_3_1_80_out1;
                    end 
                end
              6'd26: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_70 <= fft2_N_Mux_20_12_3_1_80_out1;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_21
    always @(posedge clk)
      begin : drive_s_reg_71
        if (rst == 1'b0) 
          begin
            s_reg_71 <= 21'd0000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd16, 6'd18: 
                begin
                  if (s_reg_5 != 32'd0000000000 && s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_71 <= fft2_Mul_19Sx2S_21S_4_82_out1;
                    end 
                end
              6'd26: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_71 <= fft2_Mul_19Sx2S_21S_4_82_out1;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_72
        if (rst == 1'b0) 
          begin
            s_reg_72 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd16, 6'd18: 
                begin
                  if (s_reg_5 != 32'd0000000000 && s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_72 <= fft2_Add_31Sx1U_32S_1_84_out1;
                    end 
                end
              6'd25: 
                begin
                  s_reg_72 <= fft2_Add_31Sx1U_32S_1_84_out1;
                end
              6'd26: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_72 <= fft2_Add_31Sx1U_32S_1_84_out1;
                    end 
                end
            endcase
          end
      end
    
    // resource: mux_32bx2i1c
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_73
        if (rst == 1'b0) 
          begin
            s_reg_73 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd16, 6'd18: 
                begin
                  if (s_reg_5 != 32'd0000000000 && s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_73 <= 32'd0000000000;
                    end 
                end
              6'd25: 
                begin
                  s_reg_73 <= s_reg_74;
                end
              6'd26: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_73 <= 32'd0000000000;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_74
        if (rst == 1'b0) 
          begin
            s_reg_74 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd16, 6'd18: 
                begin
                  if (s_reg_5 != 32'd0000000000 && s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_74 <= fft2_Add_32Ux32U_32U_1_86_out1;
                    end 
                end
              6'd25: 
                begin
                  s_reg_74 <= fft2_Add_32Ux32U_32U_1_86_out1;
                end
              6'd26: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_74 <= fft2_Add_32Ux32U_32U_1_86_out1;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_s_reg_75
        if (rst == 1'b0) 
          begin
            s_reg_75 <= 1'b0;
          end 
        else 
          begin
            case (global_state1) 
              6'd16, 6'd18: 
                begin
                  if (s_reg_5 != 32'd0000000000 && s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_75 <= fft2_LessThan_32Ux32U_1U_4_87_out1;
                    end 
                end
              6'd25: 
                begin
                  s_reg_75 <= fft2_LessThan_32Ux32U_1U_4_87_out1;
                end
              6'd26: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_75 <= fft2_LessThan_32Ux32U_1U_4_87_out1;
                    end 
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i0c
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_s_reg_76
        if (rst == 1'b0) 
          begin
            s_reg_76 <= 1'b0;
          end 
        else 
          begin
            case (global_state1) 
              6'd16, 6'd18: 
                begin
                  if (s_reg_5 != 32'd0000000000 && s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_76 <= fft2_N_Mux_20_12_3_1_80_out1[16];
                    end 
                end
              6'd25: 
                begin
                  s_reg_76 <= s_reg_70[16];
                end
              6'd26: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_76 <= fft2_N_Mux_20_12_3_1_80_out1[16];
                    end 
                end
            endcase
          end
      end
    
    // resource: mux_32bx2i1c
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_77
        if (rst == 1'b0) 
          begin
            s_reg_77 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd16, 6'd18: 
                begin
                  if (s_reg_5 != 32'd0000000000 && s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_77 <= 32'd0000262144;
                    end 
                end
              6'd24: 
                begin
                  s_reg_77 <= s_reg_94;
                end
              6'd25: 
                begin
                  s_reg_77 <= 32'd0000262144;
                end
              6'd26: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_77 <= 32'd0000262144;
                    end 
                end
            endcase
          end
      end
    
    // resource: mux_32bx2i1c
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_78
        if (rst == 1'b0) 
          begin
            s_reg_78 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd16, 6'd18: 
                begin
                  if (s_reg_5 != 32'd0000000000 && s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_78 <= 32'd0000000000;
                    end 
                end
              6'd24: 
                begin
                  s_reg_78 <= fft2_Add_32Sx1U_32S_4_115_out1;
                end
              6'd25: 
                begin
                  s_reg_78 <= 32'd0000000000;
                end
              6'd26: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_78 <= 32'd0000000000;
                    end 
                end
            endcase
          end
      end
    
    // resource: mux_32bx2i1c
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_79
        if (rst == 1'b0) 
          begin
            s_reg_79 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd16, 6'd18: 
                begin
                  if (s_reg_5 != 32'd0000000000 && s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_79 <= 32'd0000000000;
                    end 
                end
              6'd24: 
                begin
                  s_reg_79 <= s_reg_85;
                end
              6'd25: 
                begin
                  s_reg_79 <= 32'd0000000000;
                end
              6'd26: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_79 <= 32'd0000000000;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_31
    always @(posedge clk)
      begin : drive_s_reg_8_slice
        if (rst == 1'b0) 
          begin
            s_reg_8_slice <= 31'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd00, 6'd01: 
                begin
                  s_reg_8_slice <= fft2_LeftShift_1Ux5U_32S_4_1_out1[31:1];
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_14
    always @(posedge clk)
      begin : drive_s_reg_80
        if (rst == 1'b0) 
          begin
            s_reg_80 <= 14'd00000;
          end 
        else 
          begin
            case (global_state1) 
              6'd16, 6'd18: 
                begin
                  if (s_reg_5 != 32'd0000000000 && s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_80 <= fft2_Add_14Ux14U_14U_1_89_out1;
                    end 
                end
              6'd24, 6'd25: 
                begin
                  s_reg_80 <= fft2_Add_14Ux14U_14U_1_89_out1;
                end
              6'd26: 
                begin
                  if (s_reg_7 != 32'd0000000000) 
                    begin
                      s_reg_80 <= fft2_Add_14Ux14U_14U_1_89_out1;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_14
    always @(posedge clk)
      begin : drive_s_reg_81
        if (rst == 1'b0) 
          begin
            s_reg_81 <= 14'd00000;
          end 
        else 
          begin
            case (global_state1) 
              6'd19: 
                begin
                  s_reg_81 <= fft2_Add_14Ux14U_14U_4_90_out1;
                end
            endcase
          end
      end
    
    // resource: regr_ac_14
    always @(posedge clk)
      begin : drive_s_reg_84
        if (rst == 1'b0) 
          begin
            s_reg_84 <= 14'd00000;
          end 
        else 
          begin
            s_reg_84 <= fft2_Add_14Ux14U_14U_4_91_out1;
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_85
        if (rst == 1'b0) 
          begin
            s_reg_85 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd20: 
                begin
                  s_reg_85 <= fft2_Add_32Sx1U_32S_4_92_out1;
                end
            endcase
          end
      end
    
    // resource: regr_ac_50
    always @(posedge clk)
      begin : drive_s_reg_86
        if (rst == 1'b0) 
          begin
            s_reg_86 <= 50'd0000000000000000;
          end 
        else 
          begin
            s_reg_86 <= fft2_Add_50Ux50U_50U_1_97_out1;
          end
      end
    
    // resource: regr_en_ac_50
    always @(posedge clk)
      begin : drive_s_reg_87
        if (rst == 1'b0) 
          begin
            s_reg_87 <= 50'd0000000000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd20: 
                begin
                  s_reg_87 <= fft2_Sub_50Ux50U_50U_1_98_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_14
    always @(posedge clk)
      begin : drive_s_reg_88
        if (rst == 1'b0) 
          begin
            s_reg_88 <= 14'd00000;
          end 
        else 
          begin
            case (global_state1) 
              6'd21: 
                begin
                  s_reg_88 <= fft2_Add_14Ux14U_14U_4_99_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_s_reg_9
        if (rst == 1'b0) 
          begin
            s_reg_9 <= 1'b0;
          end 
        else 
          begin
            case (global_state1) 
              6'd00, 6'd01: 
                begin
                  s_reg_9 <= fft2_And_1Ux1U_1U_4_6_out1;
                end
            endcase
          end
      end
    
    // resource: regr_ac_33
    always @(posedge clk)
      begin : drive_s_reg_91
        if (rst == 1'b0) 
          begin
            s_reg_91 <= 33'd0000000000;
          end 
        else 
          begin
            s_reg_91 <= fft2_Add_50Ux50U_50U_1_102_out1[49:17];
          end
      end
    
    // resource: regr_ac_50
    always @(posedge clk)
      begin : drive_s_reg_92
        if (rst == 1'b0) 
          begin
            s_reg_92 <= 50'd0000000000000000;
          end 
        else 
          begin
            s_reg_92 <= fft2_Mul_32Sx32S_50S_4_103_out1;
          end
      end
    
    // resource: regr_ac_50
    always @(posedge clk)
      begin : drive_s_reg_93
        if (rst == 1'b0) 
          begin
            s_reg_93 <= 50'd0000000000000000;
          end 
        else 
          begin
            s_reg_93 <= fft2_Mul_32Sx32S_50S_4_104_out1;
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_94
        if (rst == 1'b0) 
          begin
            s_reg_94 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd21: 
                begin
                  s_reg_94 <= fft2_Add_32Sx1U_32S_1_106_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_95
        if (rst == 1'b0) 
          begin
            s_reg_95 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd22: 
                begin
                  s_reg_95 <= fft2_Add_32Sx1U_32S_1_108_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_96
        if (rst == 1'b0) 
          begin
            s_reg_96 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state1) 
              6'd22: 
                begin
                  s_reg_96 <= A0_shared_Q2_wire;
                end
            endcase
          end
      end
    
    // resource: regr_ac_32
    always @(posedge clk)
      begin : drive_s_reg_97
        if (rst == 1'b0) 
          begin
            s_reg_97 <= 32'd0000000000;
          end 
        else 
          begin
            s_reg_97 <= A0_shared_Q3_wire;
          end
      end
    
    // resource: regr_ac_32
    always @(posedge clk)
      begin : drive_s_reg_98
        if (rst == 1'b0) 
          begin
            s_reg_98 <= 32'd0000000000;
          end 
        else 
          begin
            s_reg_98 <= fft2_Add_32Sx1U_32S_4_110_out1;
          end
      end
    
    // resource: regr_ac_32
    always @(posedge clk)
      begin : drive_s_reg_99
        if (rst == 1'b0) 
          begin
            s_reg_99 <= 32'd0000000000;
          end 
        else 
          begin
            s_reg_99 <= {fft2_Add_32Ux32U_32U_1_109_out1[31:1], fft2_Add_32Ux32U_32U_1_109_out1[0]};
          end
      end
    
    // resource: fft2_LeftShift_1Ux5U_32S_4  instance: fft2_LeftShift_1Ux5U_32S_4_1
    assign fft2_LeftShift_1Ux5U_32S_4_1_out1 = 32'd0000000001 << conf_info_logn_samples[4:0];
    
    // resource: fft2_OrReduction_32S_1U_4  instance: fft2_OrReduction_32S_1U_4_2
    assign fft2_OrReduction_32S_1U_4_2_out1 = (|conf_info_do_shift);
    
    // resource: fft2_OrReduction_32S_1U_4  instance: fft2_OrReduction_32S_1U_4_3
    assign fft2_OrReduction_32S_1U_4_3_out1 = (|conf_info_do_inverse);
    
    // instance: drive_fft2_OrReduction_32S_1U_4_4_in1
    assign fft2_OrReduction_32S_1U_4_4_in1 = {1'b0, fft2_LeftShift_1Ux5U_32S_4_1_out1[31:1]};
    
    // resource: fft2_OrReduction_32S_1U_4  instance: fft2_OrReduction_32S_1U_4_4
    assign fft2_OrReduction_32S_1U_4_4_out1 = (|fft2_OrReduction_32S_1U_4_4_in1);
    
    // resource: fft2_And_1Ux1U_1U_4  instance: fft2_And_1Ux1U_1U_4_5
    assign fft2_And_1Ux1U_1U_4_5_out1 = fft2_OrReduction_32S_1U_4_3_out1 & fft2_OrReduction_32S_1U_4_2_out1;
    
    // resource: fft2_And_1Ux1U_1U_4  instance: fft2_And_1Ux1U_1U_4_6
    assign fft2_And_1Ux1U_1U_4_6_out1 = fft2_And_1Ux1U_1U_4_5_out1 & fft2_OrReduction_32S_1U_4_4_out1;
    
    // resource: fft2_OrReduction_32S_1U_4  instance: fft2_OrReduction_32S_1U_4_7
    assign fft2_OrReduction_32S_1U_4_7_out1 = (|conf_info_do_shift);
    
    // resource: fft2_Not_32S_1U_4  instance: fft2_Not_32S_1U_4_8
    assign fft2_Not_32S_1U_4_8_out1 = !((|conf_info_do_inverse));
    
    // instance: drive_fft2_OrReduction_32S_1U_4_9_in1
    assign fft2_OrReduction_32S_1U_4_9_in1 = {1'b0, fft2_LeftShift_1Ux5U_32S_4_1_out1[31:1]};
    
    // resource: fft2_OrReduction_32S_1U_4  instance: fft2_OrReduction_32S_1U_4_9
    assign fft2_OrReduction_32S_1U_4_9_out1 = (|fft2_OrReduction_32S_1U_4_9_in1);
    
    // resource: fft2_And_1Ux1U_1U_4  instance: fft2_And_1Ux1U_1U_4_10
    assign fft2_And_1Ux1U_1U_4_10_out1 = fft2_Not_32S_1U_4_8_out1 & fft2_OrReduction_32S_1U_4_7_out1;
    
    // resource: fft2_And_1Ux1U_1U_4  instance: fft2_And_1Ux1U_1U_4_11
    assign fft2_And_1Ux1U_1U_4_11_out1 = fft2_And_1Ux1U_1U_4_10_out1 & fft2_OrReduction_32S_1U_4_9_out1;
    
    // resource: fft2_Sub_4Ux5S_5S_4  instance: fft2_Sub_4Ux5S_5S_4_12
    assign fft2_Sub_4Ux5S_5S_4_12_out1 = 5'd14 - s_reg_5[4:0];
    
    // resource: fft2_LeftShift_1Ux5U_32S_4  instance: fft2_LeftShift_1Ux5U_32S_4_13
    assign fft2_LeftShift_1Ux5U_32S_4_13_out1 = 32'd0000000001 << s_reg_12;
    
    // instance: drive_fft2_Mul_31Ux31U_31U_4_14_in2
    assign fft2_Mul_31Ux31U_31U_4_14_in2 = s_reg_4[30:0];
    
    // instance: drive_fft2_Mul_31Ux31U_31U_4_14_in1
    assign fft2_Mul_31Ux31U_31U_4_14_in1 = s_reg_7[30:0];
    
    // instance: drive_fft2_GreaterThan_32Sx17S_1U_1_15_in2
    assign fft2_GreaterThan_32Sx17S_1U_1_15_in2 = {fft2_Mul_31Ux31U_31U_4_14_out1, 1'b0};
    
    // resource: fft2_GreaterThan_32Sx17S_1U_1  instance: fft2_GreaterThan_32Sx17S_1U_1_15
    assign fft2_GreaterThan_32Sx17S_1U_1_15_out1 = fft2_GreaterThan_32Sx17S_1U_1_15_in2[31] ^ fft2_GreaterThan_32Sx17S_1U_1_15_in2 > 32'd0000000000;
    
    // resource: mux_32bx2i0c
    always @(s_reg_1 or s_reg_116 or gs_ctrl9)
      begin : drive_fft2_Sub_32Ux32U_32U_4_16_in1
        if (gs_ctrl9) 
          begin
            fft2_Sub_32Ux32U_32U_4_16_in1 = s_reg_116;
          end 
        else 
          begin
            fft2_Sub_32Ux32U_32U_4_16_in1 = s_reg_1;
          end
      end
    
    // resource: fft2_Sub_32Ux32U_32U_4  instance: fft2_Sub_32Ux32U_32U_4_16
    assign fft2_Sub_32Ux32U_32U_4_16_out1 = s_reg_4 - fft2_Sub_32Ux32U_32U_4_16_in1;
    
    // resource: mux_32bx2i0c
    always @(s_reg_13 or fft2_LeftShift_1Ux5U_32S_4_13_out1 or gs_ctrl10)
      begin : drive_fft2_GreaterThan_32Ux32U_1U_4_17_in1
        if (gs_ctrl10) 
          begin
            fft2_GreaterThan_32Ux32U_1U_4_17_in1 = s_reg_13;
          end 
        else 
          begin
            fft2_GreaterThan_32Ux32U_1U_4_17_in1 = fft2_LeftShift_1Ux5U_32S_4_13_out1;
          end
      end
    
    // resource: fft2_GreaterThan_32Ux32U_1U_4  instance: fft2_GreaterThan_32Ux32U_1U_4_17
    assign fft2_GreaterThan_32Ux32U_1U_4_17_out1 = fft2_Sub_32Ux32U_32U_4_16_out1 > fft2_GreaterThan_32Ux32U_1U_4_17_in1;
    
// pragma translate_off
    
always @(fft2_Mul_31Ux31U_31U_4_14_out1 or fft2_Sub_32Ux16U_32S_4_124_out1 or gs_ctrl11)
      begin : drive_fft2_GreaterThan_32Ux16U_1U_4_18_in2
        if (gs_ctrl11) 
          begin
            fft2_GreaterThan_32Ux16U_1U_4_18_in2 = fft2_Sub_32Ux16U_32S_4_124_out1;
          end 
        else 
          begin
            fft2_GreaterThan_32Ux16U_1U_4_18_in2 = {fft2_Mul_31Ux31U_31U_4_14_out1, 1'b0};
          end
      end
// pragma translate_on
    
    // resource: fft2_GreaterThan_32Ux16U_1U_4  instance: fft2_GreaterThan_32Ux16U_1U_4_18
    assign fft2_GreaterThan_32Ux16U_1U_4_18_out1 = fft2_GreaterThan_32Ux16U_1U_4_18_in2 > 32'd0000032768;
    
// pragma translate_off
    
always @(s_reg_18 or fft2_Mul_31Ux31U_31U_4_14_out1 or gs_ctrl12)
      begin : drive_fft2_GreaterThan_32Sx17S_1U_4_19_in2
        if (gs_ctrl12) 
          begin
            fft2_GreaterThan_32Sx17S_1U_4_19_in2 = s_reg_18;
          end 
        else 
          begin
            fft2_GreaterThan_32Sx17S_1U_4_19_in2 = {fft2_Mul_31Ux31U_31U_4_14_out1, 1'b0};
          end
      end
// pragma translate_on
    
    // resource: fft2_GreaterThan_32Sx17S_1U_4  instance: fft2_GreaterThan_32Sx17S_1U_4_19
    assign fft2_GreaterThan_32Sx17S_1U_4_19_out1 = fft2_GreaterThan_32Sx17S_1U_4_19_in2[31] ^ fft2_GreaterThan_32Sx17S_1U_4_19_in2 > 32'd0000032768;
    
    // resource: mux_32bx2i0c
    always @(s_reg_18 or fft2_Mul_31Ux31U_31U_4_14_out1 or gs_ctrl13)
      begin : drive_fft2_Sub_32Sx16U_32S_1_20_in2
        if (gs_ctrl13) 
          begin
            fft2_Sub_32Sx16U_32S_1_20_in2 = s_reg_18;
          end 
        else 
          begin
            fft2_Sub_32Sx16U_32S_1_20_in2 = {fft2_Mul_31Ux31U_31U_4_14_out1, 1'b0};
          end
      end
    
    // resource: fft2_Sub_32Sx16U_32S_1  instance: fft2_Sub_32Sx16U_32S_1_20
    assign fft2_Sub_32Sx16U_32S_1_20_out1 = fft2_Sub_32Sx16U_32S_1_20_in2 - 32'd0000032768;
    
// pragma translate_off
    
always @(s_reg_18 or fft2_Mul_31Ux31U_31U_4_14_out1 or gs_ctrl14)
      begin : drive_fft2_N_Mux_32_2_0_4_21_in2
        if (gs_ctrl14) 
          begin
            fft2_N_Mux_32_2_0_4_21_in2 = s_reg_18;
          end 
        else 
          begin
            fft2_N_Mux_32_2_0_4_21_in2 = {fft2_Mul_31Ux31U_31U_4_14_out1, 1'b0};
          end
      end
// pragma translate_on
    
// pragma translate_off
    
    // resource: fft2_N_Mux_32_2_0_4
    always @(fft2_GreaterThan_32Sx17S_1U_4_19_out1 or fft2_N_Mux_32_2_0_4_21_in2)
      begin : fft2_N_Mux_32_2_0_4_21
        if (fft2_GreaterThan_32Sx17S_1U_4_19_out1) 
          begin
            fft2_N_Mux_32_2_0_4_21_out1 = 32'd0000032768;
          end 
        else 
          begin
            fft2_N_Mux_32_2_0_4_21_out1 = fft2_N_Mux_32_2_0_4_21_in2;
          end
      end
// pragma translate_on
    
// pragma translate_off
    
always @(fft2_Mul_31Ux31U_31U_4_14_out1 or fft2_Sub_32Ux16U_32S_4_124_out1 or gs_ctrl15)
      begin : drive_fft2_N_Mux_32_2_0_4_22_in2
        if (gs_ctrl15) 
          begin
            fft2_N_Mux_32_2_0_4_22_in2 = fft2_Sub_32Ux16U_32S_4_124_out1;
          end 
        else 
          begin
            fft2_N_Mux_32_2_0_4_22_in2 = {fft2_Mul_31Ux31U_31U_4_14_out1, 1'b0};
          end
      end
// pragma translate_on
    
// pragma translate_off
    
    // resource: fft2_N_Mux_32_2_0_4
    always @(fft2_GreaterThan_32Ux16U_1U_4_18_out1 or fft2_N_Mux_32_2_0_4_22_in2)
      begin : fft2_N_Mux_32_2_0_4_22
        if (fft2_GreaterThan_32Ux16U_1U_4_18_out1) 
          begin
            fft2_N_Mux_32_2_0_4_22_out1 = 32'd0000032768;
          end 
        else 
          begin
            fft2_N_Mux_32_2_0_4_22_out1 = fft2_N_Mux_32_2_0_4_22_in2;
          end
      end
// pragma translate_on
    
    // resource: fft2_GreaterThan_32Sx17S_1U_4  instance: fft2_GreaterThan_32Sx17S_1U_4_23
    assign fft2_GreaterThan_32Sx17S_1U_4_23_out1 = s_reg_18[31] ^ s_reg_18 > 32'd0000000000;
    
    // resource: fft2_N_Mux_32_2_2_4
    always @(s_reg_13 or s_reg_16 or s_reg_17)
      begin : fft2_N_Mux_32_2_2_4_24
        if (s_reg_17) 
          begin
            fft2_N_Mux_32_2_2_4_24_out1 = s_reg_13;
          end 
        else 
          begin
            fft2_N_Mux_32_2_2_4_24_out1 = s_reg_16;
          end
      end
    
    // resource: mux_32bx2i1c
    always @(s_reg_24 or gs_ctrl16)
      begin : drive_fft2_Add_32Ux1U_32U_4_25_in2
        if (gs_ctrl16) 
          begin
            /* state44 */
            fft2_Add_32Ux1U_32U_4_25_in2 = s_reg_24;
          end 
        else 
          begin
            /* state29 */
            fft2_Add_32Ux1U_32U_4_25_in2 = 32'd0000000000;
          end
      end
    
    // resource: fft2_Add_32Ux1U_32U_4  instance: fft2_Add_32Ux1U_32U_4_25
    assign fft2_Add_32Ux1U_32U_4_25_out1 = fft2_Add_32Ux1U_32U_4_25_in2 + 32'd0000000001;
    
    // resource: mux_32bx2i1c
    always @(s_reg_24 or gs_ctrl17)
      begin : drive_fft2_Mul_32Ux32U_32U_4_26_in2
        if (gs_ctrl17) 
          begin
            fft2_Mul_32Ux32U_32U_4_26_in2 = s_reg_24;
          end 
        else 
          begin
            fft2_Mul_32Ux32U_32U_4_26_in2 = 32'd0000000000;
          end
      end
    
    // instance: drive_fft2_Mul_32Ux32U_32U_4_26_in1
    assign fft2_Mul_32Ux32U_32U_4_26_in1 = s_reg_7;
    
    // resource: mux_14bx2i0c
    always @(s_reg_25[13:0] or fft2_Mul_32Ux32U_32U_4_26_out1[13:0] or gs_ctrl18)
      begin : drive_fft2_Add_14Ux14U_14U_4_27_in2
        if (gs_ctrl18) 
          begin
            /* state48 */
            fft2_Add_14Ux14U_14U_4_27_in2 = s_reg_25[13:0];
          end 
        else 
          begin
            /* state49 */
            fft2_Add_14Ux14U_14U_4_27_in2 = fft2_Mul_32Ux32U_32U_4_26_out1[13:0];
          end
      end
    
    // resource: mux_14bx2i1c
    always @(s_reg_33[13:0] or gs_ctrl19)
      begin : drive_fft2_Add_14Ux14U_14U_4_27_in1
        if (gs_ctrl19) 
          begin
            fft2_Add_14Ux14U_14U_4_27_in1 = s_reg_33[13:0];
          end 
        else 
          begin
            fft2_Add_14Ux14U_14U_4_27_in1 = 14'd00000;
          end
      end
    
    // resource: fft2_Add_14Ux14U_14U_4  instance: fft2_Add_14Ux14U_14U_4_27
    assign fft2_Add_14Ux14U_14U_4_27_out1 = fft2_Add_14Ux14U_14U_4_27_in2 + fft2_Add_14Ux14U_14U_4_27_in1;
    
    // resource: fft2_Add_14Ux14U_14U_4  instance: fft2_Add_14Ux14U_14U_4_28
    assign fft2_Add_14Ux14U_14U_4_28_out1 = s_reg_25[13:0] + s_reg_8_slice[13:0];
    
    // resource: mux_15bx8i0c
    always @(s_reg_58 or fft2_Add_14Ux14U_14U_4_27_out1 or fft2_Add_14Ux14U_14U_4_30_out1 or fft2_Add_14Ux14U_14U_4_69_out1 or fft2_Add_14Ux14U_14U_4_90_out1 or fft2_Add_14Ux14U_14U_4_99_out1 or fft2_Add_14Ux14U_14U_4_117_out1 or fft2_Add_14Ux14U_14U_4_121_out1 or gs_ctrl20)
      begin : drive_A0_compute_kernel_A3
        case (gs_ctrl20) 
          3'd1: 
            begin
              A0_compute_kernel_A3 = {fft2_Add_14Ux14U_14U_4_30_out1, 1'b0};
            end
          3'd2: 
            begin
              A0_compute_kernel_A3 = {fft2_Add_14Ux14U_14U_4_69_out1, 1'b0};
            end
          3'd3: 
            begin
              A0_compute_kernel_A3 = {s_reg_58, 1'b0};
            end
          3'd4: 
            begin
              A0_compute_kernel_A3 = {fft2_Add_14Ux14U_14U_4_90_out1, 1'b0};
            end
          3'd5: 
            begin
              A0_compute_kernel_A3 = {fft2_Add_14Ux14U_14U_4_99_out1, 1'b1};
            end
          3'd6: 
            begin
              A0_compute_kernel_A3 = {fft2_Add_14Ux14U_14U_4_117_out1, 1'b0};
            end
          3'd7: 
            begin
              A0_compute_kernel_A3 = {fft2_Add_14Ux14U_14U_4_121_out1, 1'b0};
            end
          default: 
            begin
              A0_compute_kernel_A3 = {fft2_Add_14Ux14U_14U_4_27_out1, 1'b0};
            end
        endcase
      end
    
    // resource: mux_1bx2i2c
    always @(s_reg_21 or s_reg_40 or s_reg_45 or s_reg_9 or fft2_LessThan_6Sx6S_1U_4_68_out1 or gs_ctrl21)
      begin : drive_A0_compute_kernel_CE3
        case (gs_ctrl21) 
          2'd1: 
            begin
              if (s_reg_9) 
                begin
                  A0_compute_kernel_CE3 = 1'd1;
                end 
              else 
                begin
                  A0_compute_kernel_CE3 = 1'd0;
                end
            end
          2'd2: 
            begin
              A0_compute_kernel_CE3 = 1'd1;
            end
          2'd3: 
            begin
              if (s_reg_45) 
                begin
                  if (!fft2_LessThan_6Sx6S_1U_4_68_out1 && (s_reg_21 != 32'd0000000000 && s_reg_40 != 32'd0000000000)) 
                    begin
                      A0_compute_kernel_CE3 = 1'd1;
                    end 
                  else 
                    begin
                      A0_compute_kernel_CE3 = 1'd0;
                    end
                end 
              else 
                begin
                  if (s_reg_21 != 32'd0000000000 && s_reg_40 != 32'd0000000000) 
                    begin
                      A0_compute_kernel_CE3 = 1'd1;
                    end 
                  else 
                    begin
                      A0_compute_kernel_CE3 = 1'd0;
                    end
                end
            end
          default: 
            begin
              A0_compute_kernel_CE3 = 1'd0;
            end
        endcase
      end
    
    // resource: mux_15bx8i0c
    always @(s_reg_58 or fft2_Add_14Ux14U_14U_4_27_out1 or fft2_Add_14Ux14U_14U_4_30_out1 or fft2_Add_14Ux14U_14U_4_69_out1 or fft2_Add_14Ux14U_14U_4_90_out1 or fft2_Add_14Ux14U_14U_4_99_out1 or fft2_Add_14Ux14U_14U_4_117_out1 or fft2_Add_14Ux14U_14U_4_121_out1 or gs_ctrl22)
      begin : drive_A0_compute_kernel_A2
        case (gs_ctrl22) 
          3'd1: 
            begin
              A0_compute_kernel_A2 = {fft2_Add_14Ux14U_14U_4_30_out1, 1'b1};
            end
          3'd2: 
            begin
              A0_compute_kernel_A2 = {fft2_Add_14Ux14U_14U_4_69_out1, 1'b1};
            end
          3'd3: 
            begin
              A0_compute_kernel_A2 = {s_reg_58, 1'b1};
            end
          3'd4: 
            begin
              A0_compute_kernel_A2 = {fft2_Add_14Ux14U_14U_4_90_out1, 1'b1};
            end
          3'd5: 
            begin
              A0_compute_kernel_A2 = {fft2_Add_14Ux14U_14U_4_99_out1, 1'b0};
            end
          3'd6: 
            begin
              A0_compute_kernel_A2 = {fft2_Add_14Ux14U_14U_4_117_out1, 1'b1};
            end
          3'd7: 
            begin
              A0_compute_kernel_A2 = {fft2_Add_14Ux14U_14U_4_121_out1, 1'b1};
            end
          default: 
            begin
              A0_compute_kernel_A2 = {fft2_Add_14Ux14U_14U_4_27_out1, 1'b1};
            end
        endcase
      end
    
    // resource: mux_1bx2i2c
    always @(s_reg_21 or s_reg_40 or s_reg_45 or s_reg_9 or fft2_LessThan_6Sx6S_1U_4_68_out1 or gs_ctrl23)
      begin : drive_A0_compute_kernel_CE2
        case (gs_ctrl23) 
          2'd1: 
            begin
              if (s_reg_9) 
                begin
                  A0_compute_kernel_CE2 = 1'd1;
                end 
              else 
                begin
                  A0_compute_kernel_CE2 = 1'd0;
                end
            end
          2'd2: 
            begin
              A0_compute_kernel_CE2 = 1'd1;
            end
          2'd3: 
            begin
              if (s_reg_45) 
                begin
                  if (!fft2_LessThan_6Sx6S_1U_4_68_out1 && (s_reg_21 != 32'd0000000000 && s_reg_40 != 32'd0000000000)) 
                    begin
                      A0_compute_kernel_CE2 = 1'd1;
                    end 
                  else 
                    begin
                      A0_compute_kernel_CE2 = 1'd0;
                    end
                end 
              else 
                begin
                  if (s_reg_21 != 32'd0000000000 && s_reg_40 != 32'd0000000000) 
                    begin
                      A0_compute_kernel_CE2 = 1'd1;
                    end 
                  else 
                    begin
                      A0_compute_kernel_CE2 = 1'd0;
                    end
                end
            end
          default: 
            begin
              A0_compute_kernel_CE2 = 1'd0;
            end
        endcase
      end
    
    // resource: fft2_Add_32Ux1U_32U_4  instance: fft2_Add_32Ux1U_32U_4_29
    assign fft2_Add_32Ux1U_32U_4_29_out1 = s_reg_26 + 32'd0000000001;
    
    // resource: fft2_Add_14Ux14U_14U_4  instance: fft2_Add_14Ux14U_14U_4_30
    assign fft2_Add_14Ux14U_14U_4_30_out1 = s_reg_30 + s_reg_26[13:0];
    
    // resource: fft2_LessThan_32Ux32U_1U_4  instance: fft2_LessThan_32Ux32U_1U_4_31
    assign fft2_LessThan_32Ux32U_1U_4_31_out1 = s_reg_33 < {1'b0, s_reg_8_slice};
    
    // resource: mux_15bx8i0c
    always @(s_reg_103 or s_reg_111 or s_reg_27 or s_reg_34 or s_reg_53 or s_reg_58 or s_reg_81 or s_reg_88 or gs_ctrl24)
      begin : drive_A0_compute_kernel_A1
        case (gs_ctrl24) 
          3'd1: 
            begin
              A0_compute_kernel_A1 = {s_reg_34, 1'b1};
            end
          3'd2: 
            begin
              A0_compute_kernel_A1 = {s_reg_53, 1'b0};
            end
          3'd3: 
            begin
              A0_compute_kernel_A1 = {s_reg_58, 1'b1};
            end
          3'd4: 
            begin
              A0_compute_kernel_A1 = {s_reg_88, 1'b0};
            end
          3'd5: 
            begin
              A0_compute_kernel_A1 = {s_reg_81, 1'b0};
            end
          3'd6: 
            begin
              A0_compute_kernel_A1 = {s_reg_103, 1'b0};
            end
          3'd7: 
            begin
              A0_compute_kernel_A1 = {s_reg_111, 1'b0};
            end
          default: 
            begin
              A0_compute_kernel_A1 = {s_reg_27, 1'b0};
            end
        endcase
      end
    
    // resource: mux_32bx8i0c
    always @(s_reg_108 or s_reg_114 or s_reg_32 or s_reg_37 or s_reg_60 or s_reg_64 or s_reg_99 or fft2_Sub_32Ux32U_32U_4_114_out1 or gs_ctrl25)
      begin : drive_A0_compute_kernel_D1
        case (gs_ctrl25) 
          3'd1: 
            begin
              A0_compute_kernel_D1 = s_reg_32;
            end
          3'd2: 
            begin
              A0_compute_kernel_D1 = s_reg_64;
            end
          3'd3: 
            begin
              A0_compute_kernel_D1 = s_reg_60;
            end
          3'd4: 
            begin
              A0_compute_kernel_D1 = s_reg_99;
            end
          3'd5: 
            begin
              A0_compute_kernel_D1 = {fft2_Sub_32Ux32U_32U_4_114_out1[31:1], fft2_Sub_32Ux32U_32U_4_114_out1[0]};
            end
          3'd6: 
            begin
              A0_compute_kernel_D1 = s_reg_114;
            end
          3'd7: 
            begin
              A0_compute_kernel_D1 = s_reg_108;
            end
          default: 
            begin
              A0_compute_kernel_D1 = s_reg_37;
            end
        endcase
      end
    
    // resource: mux_1bx2i2c
    always @(gs_ctrl26)
      begin : drive_A0_compute_kernel_WE1
        if (gs_ctrl26) 
          begin
            A0_compute_kernel_WE1 = 1'd1;
          end 
        else 
          begin
            A0_compute_kernel_WE1 = 1'd0;
          end
      end
    
    // resource: mux_1bx2i2c
    always @(gs_ctrl27)
      begin : drive_A0_compute_kernel_CE1
        if (gs_ctrl27) 
          begin
            A0_compute_kernel_CE1 = 1'd1;
          end 
        else 
          begin
            A0_compute_kernel_CE1 = 1'd0;
          end
      end
    
    // resource: mux_32bx2i2c
    always @(gs_ctrl28)
      begin : drive_A0_compute_kernel_WEM1
        if (gs_ctrl28) 
          begin
            A0_compute_kernel_WEM1 = 32'd4294967295;
          end 
        else 
          begin
            A0_compute_kernel_WEM1 = 32'd4294967295;
          end
      end
    
    // resource: mux_15bx8i0c
    always @(s_reg_103 or s_reg_111 or s_reg_27 or s_reg_34 or s_reg_53 or s_reg_58 or s_reg_81 or s_reg_88 or gs_ctrl29)
      begin : drive_A0_compute_kernel_A0
        case (gs_ctrl29) 
          3'd1: 
            begin
              A0_compute_kernel_A0 = {s_reg_34, 1'b0};
            end
          3'd2: 
            begin
              A0_compute_kernel_A0 = {s_reg_53, 1'b1};
            end
          3'd3: 
            begin
              A0_compute_kernel_A0 = {s_reg_58, 1'b0};
            end
          3'd4: 
            begin
              A0_compute_kernel_A0 = {s_reg_88, 1'b1};
            end
          3'd5: 
            begin
              A0_compute_kernel_A0 = {s_reg_81, 1'b1};
            end
          3'd6: 
            begin
              A0_compute_kernel_A0 = {s_reg_103, 1'b1};
            end
          3'd7: 
            begin
              A0_compute_kernel_A0 = {s_reg_111, 1'b1};
            end
          default: 
            begin
              A0_compute_kernel_A0 = {s_reg_27, 1'b1};
            end
        endcase
      end
    
    // resource: mux_32bx8i0c
    always @(s_reg_101 or s_reg_109 or s_reg_115 or s_reg_31 or s_reg_38 or s_reg_59 or s_reg_65 or fft2_Add_32Ux32U_32U_4_112_out1 or gs_ctrl30)
      begin : drive_A0_compute_kernel_D0
        case (gs_ctrl30) 
          3'd1: 
            begin
              A0_compute_kernel_D0 = s_reg_31;
            end
          3'd2: 
            begin
              A0_compute_kernel_D0 = s_reg_65;
            end
          3'd3: 
            begin
              A0_compute_kernel_D0 = s_reg_59;
            end
          3'd4: 
            begin
              A0_compute_kernel_D0 = {fft2_Add_32Ux32U_32U_4_112_out1[31:1], fft2_Add_32Ux32U_32U_4_112_out1[0]};
            end
          3'd5: 
            begin
              A0_compute_kernel_D0 = s_reg_101;
            end
          3'd6: 
            begin
              A0_compute_kernel_D0 = s_reg_115;
            end
          3'd7: 
            begin
              A0_compute_kernel_D0 = s_reg_109;
            end
          default: 
            begin
              A0_compute_kernel_D0 = s_reg_38;
            end
        endcase
      end
    
    // resource: mux_1bx2i2c
    always @(gs_ctrl31)
      begin : drive_A0_compute_kernel_WE0
        if (gs_ctrl31) 
          begin
            A0_compute_kernel_WE0 = 1'd1;
          end 
        else 
          begin
            A0_compute_kernel_WE0 = 1'd0;
          end
      end
    
    // resource: mux_1bx2i2c
    always @(gs_ctrl32)
      begin : drive_A0_compute_kernel_CE0
        if (gs_ctrl32) 
          begin
            A0_compute_kernel_CE0 = 1'd1;
          end 
        else 
          begin
            A0_compute_kernel_CE0 = 1'd0;
          end
      end
    
    // resource: mux_32bx2i2c
    always @(gs_ctrl33)
      begin : drive_A0_compute_kernel_WEM0
        if (gs_ctrl33) 
          begin
            A0_compute_kernel_WEM0 = 32'd4294967295;
          end 
        else 
          begin
            A0_compute_kernel_WEM0 = 32'd4294967295;
          end
      end
    
    // resource: mux_5bx2i1c
    always @(s_reg_46[4:0] or gs_ctrl34)
      begin : drive_fft2_Add_5Ux3U_6U_4_32_in2
        if (gs_ctrl34) 
          begin
            fft2_Add_5Ux3U_6U_4_32_in2 = s_reg_46[4:0];
          end 
        else 
          begin
            fft2_Add_5Ux3U_6U_4_32_in2 = 5'd00;
          end
      end
    
    // resource: fft2_Add_5Ux3U_6U_4  instance: fft2_Add_5Ux3U_6U_4_32
    assign fft2_Add_5Ux3U_6U_4_32_out1 = {1'b0, fft2_Add_5Ux3U_6U_4_32_in2} + 6'd07;
    
    // resource: mux_25bx3i1c
    always @(s_reg_51[31:7] or gs_ctrl35 or s_reg_48_slice[23:7])
      begin : drive_fft2_OrReduction_29U_1U_4_33_in1_slice
        case (gs_ctrl35) 
          2'd1: 
            begin
              fft2_OrReduction_29U_1U_4_33_in1_slice = {8'b00000000, s_reg_48_slice[23:7]};
            end
          2'd2: 
            begin
              fft2_OrReduction_29U_1U_4_33_in1_slice = s_reg_51[31:7];
            end
          default: 
            begin
              fft2_OrReduction_29U_1U_4_33_in1_slice = 25'd00000000;
            end
        endcase
      end
    
    // resource: fft2_OrReduction_29U_1U_4  instance: fft2_OrReduction_29U_1U_4_33
    assign fft2_OrReduction_29U_1U_4_33_out1 = (|{4'd00, fft2_OrReduction_29U_1U_4_33_in1_slice});
    
    // resource: fft2_LessThan_6Sx6S_1U_4  instance: fft2_LessThan_6Sx6S_1U_4_34
    assign fft2_LessThan_6Sx6S_1U_4_34_out1 = fft2_Add_5Ux3U_6U_4_32_out1[5] ^ fft2_Add_5Ux3U_6U_4_32_out1 < 6'd31;
    
    // resource: mux_26bx3i1c
    always @(s_reg_51[31:6] or gs_ctrl36 or s_reg_48_slice[23:6])
      begin : drive_fft2_OrReduction_29U_1U_4_35_in1_slice
        case (gs_ctrl36) 
          2'd1: 
            begin
              fft2_OrReduction_29U_1U_4_35_in1_slice = {8'b00000000, s_reg_48_slice[23:6]};
            end
          2'd2: 
            begin
              fft2_OrReduction_29U_1U_4_35_in1_slice = s_reg_51[31:6];
            end
          default: 
            begin
              fft2_OrReduction_29U_1U_4_35_in1_slice = 26'd00000000;
            end
        endcase
      end
    
    // resource: fft2_OrReduction_29U_1U_4  instance: fft2_OrReduction_29U_1U_4_35
    assign fft2_OrReduction_29U_1U_4_35_out1 = (|{3'd0, fft2_OrReduction_29U_1U_4_35_in1_slice});
    
    // resource: fft2_Add_5Ux1U_6U_4  instance: fft2_Add_5Ux1U_6U_4_36
    assign fft2_Add_5Ux1U_6U_4_36_out1 = {1'b0, fft2_Add_5Ux3U_6U_4_32_out1[4:0]} + 6'd01;
    
    // resource: mux_27bx3i1c
    always @(s_reg_51[31:5] or gs_ctrl37 or s_reg_48_slice[23:5])
      begin : drive_fft2_OrReduction_29U_1U_4_37_in1_slice
        case (gs_ctrl37) 
          2'd1: 
            begin
              fft2_OrReduction_29U_1U_4_37_in1_slice = {8'b00000000, s_reg_48_slice[23:5]};
            end
          2'd2: 
            begin
              fft2_OrReduction_29U_1U_4_37_in1_slice = s_reg_51[31:5];
            end
          default: 
            begin
              fft2_OrReduction_29U_1U_4_37_in1_slice = 27'd000000000;
            end
        endcase
      end
    
    // resource: fft2_OrReduction_29U_1U_4  instance: fft2_OrReduction_29U_1U_4_37
    assign fft2_OrReduction_29U_1U_4_37_out1 = (|{2'd0, fft2_OrReduction_29U_1U_4_37_in1_slice});
    
    // resource: mux_28bx3i1c
    always @(s_reg_51[31:4] or gs_ctrl38 or s_reg_48_slice[23:4])
      begin : drive_fft2_OrReduction_29U_1U_4_38_in1_slice
        case (gs_ctrl38) 
          2'd1: 
            begin
              fft2_OrReduction_29U_1U_4_38_in1_slice = {8'b00000000, s_reg_48_slice[23:4]};
            end
          2'd2: 
            begin
              fft2_OrReduction_29U_1U_4_38_in1_slice = s_reg_51[31:4];
            end
          default: 
            begin
              fft2_OrReduction_29U_1U_4_38_in1_slice = 28'd000000000;
            end
        endcase
      end
    
    // resource: fft2_OrReduction_29U_1U_4  instance: fft2_OrReduction_29U_1U_4_38
    assign fft2_OrReduction_29U_1U_4_38_out1 = (|{1'b0, fft2_OrReduction_29U_1U_4_38_in1_slice});
    
    // resource: mux_29bx3i1c
    always @(s_reg_51[31:3] or gs_ctrl39 or s_reg_48_slice[23:3])
      begin : drive_fft2_OrReduction_29U_1U_4_39_in1
        case (gs_ctrl39) 
          2'd1: 
            begin
              fft2_OrReduction_29U_1U_4_39_in1 = {8'd000, s_reg_48_slice[23:3]};
            end
          2'd2: 
            begin
              fft2_OrReduction_29U_1U_4_39_in1 = s_reg_51[31:3];
            end
          default: 
            begin
              fft2_OrReduction_29U_1U_4_39_in1 = 29'd000000000;
            end
        endcase
      end
    
    // resource: fft2_OrReduction_29U_1U_4  instance: fft2_OrReduction_29U_1U_4_39
    assign fft2_OrReduction_29U_1U_4_39_out1 = (|fft2_OrReduction_29U_1U_4_39_in1);
    
    // resource: mux_30bx3i1c
    always @(s_reg_51[31:2] or gs_ctrl40 or s_reg_48_slice[23:2])
      begin : drive_fft2_OrReduction_31U_1U_4_40_in1_slice
        case (gs_ctrl40) 
          2'd1: 
            begin
              fft2_OrReduction_31U_1U_4_40_in1_slice = {8'b00000000, s_reg_48_slice[23:2]};
            end
          2'd2: 
            begin
              fft2_OrReduction_31U_1U_4_40_in1_slice = s_reg_51[31:2];
            end
          default: 
            begin
              fft2_OrReduction_31U_1U_4_40_in1_slice = 30'd0000000000;
            end
        endcase
      end
    
    // resource: fft2_OrReduction_31U_1U_4  instance: fft2_OrReduction_31U_1U_4_40
    assign fft2_OrReduction_31U_1U_4_40_out1 = (|{1'b0, fft2_OrReduction_31U_1U_4_40_in1_slice});
    
    // resource: mux_31bx3i1c
    always @(s_reg_51[31:1] or gs_ctrl41 or s_reg_48_slice[23:1])
      begin : drive_fft2_OrReduction_31U_1U_4_41_in1
        case (gs_ctrl41) 
          2'd1: 
            begin
              fft2_OrReduction_31U_1U_4_41_in1 = {8'd000, s_reg_48_slice[23:1]};
            end
          2'd2: 
            begin
              fft2_OrReduction_31U_1U_4_41_in1 = s_reg_51[31:1];
            end
          default: 
            begin
              fft2_OrReduction_31U_1U_4_41_in1 = 31'd0000000000;
            end
        endcase
      end
    
    // resource: fft2_OrReduction_31U_1U_4  instance: fft2_OrReduction_31U_1U_4_41
    assign fft2_OrReduction_31U_1U_4_41_out1 = (|fft2_OrReduction_31U_1U_4_41_in1);
    
    // resource: mux_31bx3i1c
    always @(s_reg_51[31:1] or gs_ctrl42 or s_reg_48_slice[23:1])
      begin : drive_fft2_OrReduction_31U_1U_4_42_in1
        case (gs_ctrl42) 
          2'd1: 
            begin
              fft2_OrReduction_31U_1U_4_42_in1 = {8'd000, s_reg_48_slice[23:1]};
            end
          2'd2: 
            begin
              fft2_OrReduction_31U_1U_4_42_in1 = s_reg_51[31:1];
            end
          default: 
            begin
              fft2_OrReduction_31U_1U_4_42_in1 = 31'd0000000000;
            end
        endcase
      end
    
    // resource: fft2_OrReduction_31U_1U_4  instance: fft2_OrReduction_31U_1U_4_42
    assign fft2_OrReduction_31U_1U_4_42_out1 = (|fft2_OrReduction_31U_1U_4_42_in1);
    
    // resource: mux_32bx3i1c
    always @(s_reg_50 or s_reg_51 or gs_ctrl43)
      begin : drive_fft2_N_Mux_32_2_2_4_43_in3
        case (gs_ctrl43) 
          2'd1: 
            begin
              fft2_N_Mux_32_2_2_4_43_in3 = s_reg_50;
            end
          2'd2: 
            begin
              fft2_N_Mux_32_2_2_4_43_in3 = s_reg_51;
            end
          default: 
            begin
              fft2_N_Mux_32_2_2_4_43_in3 = 32'd0000000000;
            end
        endcase
      end
    
    // resource: mux_32bx3i1c
    always @(s_reg_50[30:0] or s_reg_51[30:0] or gs_ctrl44 or s_reg_48_slice[1])
      begin : drive_fft2_N_Mux_32_2_2_4_43_in2
        case (gs_ctrl44) 
          2'd1: 
            begin
              fft2_N_Mux_32_2_2_4_43_in2 = {s_reg_50[30:0], s_reg_48_slice[1]};
            end
          2'd2: 
            begin
              fft2_N_Mux_32_2_2_4_43_in2 = {s_reg_51[30:0], s_reg_51[1]};
            end
          default: 
            begin
              fft2_N_Mux_32_2_2_4_43_in2 = 32'd0000000000;
            end
        endcase
      end
    
    // resource: fft2_N_Mux_32_2_2_4
    always @(fft2_OrReduction_31U_1U_4_41_out1 or fft2_N_Mux_32_2_2_4_43_in3 or fft2_N_Mux_32_2_2_4_43_in2)
      begin : fft2_N_Mux_32_2_2_4_43
        if (fft2_OrReduction_31U_1U_4_41_out1) 
          begin
            fft2_N_Mux_32_2_2_4_43_out1 = fft2_N_Mux_32_2_2_4_43_in2;
          end 
        else 
          begin
            fft2_N_Mux_32_2_2_4_43_out1 = fft2_N_Mux_32_2_2_4_43_in3;
          end
      end
    
    // resource: mux_30bx3i1c
    always @(s_reg_51[31:2] or gs_ctrl45 or s_reg_48_slice[23:2])
      begin : drive_fft2_OrReduction_31U_1U_4_44_in1_slice
        case (gs_ctrl45) 
          2'd1: 
            begin
              fft2_OrReduction_31U_1U_4_44_in1_slice = {8'b00000000, s_reg_48_slice[23:2]};
            end
          2'd2: 
            begin
              fft2_OrReduction_31U_1U_4_44_in1_slice = s_reg_51[31:2];
            end
          default: 
            begin
              fft2_OrReduction_31U_1U_4_44_in1_slice = 30'd0000000000;
            end
        endcase
      end
    
    // resource: fft2_OrReduction_31U_1U_4  instance: fft2_OrReduction_31U_1U_4_44
    assign fft2_OrReduction_31U_1U_4_44_out1 = (|{1'b0, fft2_OrReduction_31U_1U_4_44_in1_slice});
    
    // resource: mux_32bx2i1c
    always @(s_reg_52 or gs_ctrl46)
      begin : drive_fft2_Sub_32Sx1U_32S_1_45_in2
        if (gs_ctrl46) 
          begin
            fft2_Sub_32Sx1U_32S_1_45_in2 = s_reg_52;
          end 
        else 
          begin
            fft2_Sub_32Sx1U_32S_1_45_in2 = 32'd0000000031;
          end
      end
    
    // resource: fft2_Sub_32Sx1U_32S_1  instance: fft2_Sub_32Sx1U_32S_1_45
    assign fft2_Sub_32Sx1U_32S_1_45_out1 = fft2_Sub_32Sx1U_32S_1_45_in2 - {31'b0000000000000000000000000000000, fft2_OrReduction_31U_1U_4_42_out1};
    
    // resource: mux_32bx3i0c
    always @(s_reg_51[2] or fft2_N_Mux_32_2_2_4_43_out1[30:0] or gs_ctrl47 or s_reg_48_slice[2])
      begin : drive_fft2_N_Mux_32_2_2_4_46_in2
        case (gs_ctrl47) 
          2'd1: 
            begin
              fft2_N_Mux_32_2_2_4_46_in2 = {fft2_N_Mux_32_2_2_4_43_out1[30:0], s_reg_48_slice[2]};
            end
          2'd2: 
            begin
              fft2_N_Mux_32_2_2_4_46_in2 = {fft2_N_Mux_32_2_2_4_43_out1[30:0], s_reg_51[2]};
            end
          default: 
            begin
              fft2_N_Mux_32_2_2_4_46_in2 = {fft2_N_Mux_32_2_2_4_43_out1[30:0], 1'b0};
            end
        endcase
      end
    
    // resource: fft2_N_Mux_32_2_2_4
    always @(fft2_OrReduction_31U_1U_4_40_out1 or fft2_N_Mux_32_2_2_4_43_out1 or fft2_N_Mux_32_2_2_4_46_in2)
      begin : fft2_N_Mux_32_2_2_4_46
        if (fft2_OrReduction_31U_1U_4_40_out1) 
          begin
            fft2_N_Mux_32_2_2_4_46_out1 = fft2_N_Mux_32_2_2_4_46_in2;
          end 
        else 
          begin
            fft2_N_Mux_32_2_2_4_46_out1 = fft2_N_Mux_32_2_2_4_43_out1;
          end
      end
    
    // resource: mux_29bx3i1c
    always @(s_reg_51[31:3] or gs_ctrl48 or s_reg_48_slice[23:3])
      begin : drive_fft2_OrReduction_29U_1U_4_47_in1
        case (gs_ctrl48) 
          2'd1: 
            begin
              fft2_OrReduction_29U_1U_4_47_in1 = {8'd000, s_reg_48_slice[23:3]};
            end
          2'd2: 
            begin
              fft2_OrReduction_29U_1U_4_47_in1 = s_reg_51[31:3];
            end
          default: 
            begin
              fft2_OrReduction_29U_1U_4_47_in1 = 29'd000000000;
            end
        endcase
      end
    
    // resource: fft2_OrReduction_29U_1U_4  instance: fft2_OrReduction_29U_1U_4_47
    assign fft2_OrReduction_29U_1U_4_47_out1 = (|fft2_OrReduction_29U_1U_4_47_in1);
    
    // resource: fft2_Sub_32Sx1U_32S_1  instance: fft2_Sub_32Sx1U_32S_1_48
    assign fft2_Sub_32Sx1U_32S_1_48_out1 = fft2_Sub_32Sx1U_32S_1_45_out1 - {31'b0000000000000000000000000000000, fft2_OrReduction_31U_1U_4_44_out1};
    
    // resource: mux_32bx3i0c
    always @(s_reg_51[3] or fft2_N_Mux_32_2_2_4_46_out1[30:0] or gs_ctrl49 or s_reg_48_slice[3])
      begin : drive_fft2_N_Mux_32_2_2_4_49_in2
        case (gs_ctrl49) 
          2'd1: 
            begin
              fft2_N_Mux_32_2_2_4_49_in2 = {fft2_N_Mux_32_2_2_4_46_out1[30:0], s_reg_48_slice[3]};
            end
          2'd2: 
            begin
              fft2_N_Mux_32_2_2_4_49_in2 = {fft2_N_Mux_32_2_2_4_46_out1[30:0], s_reg_51[3]};
            end
          default: 
            begin
              fft2_N_Mux_32_2_2_4_49_in2 = {fft2_N_Mux_32_2_2_4_46_out1[30:0], 1'b0};
            end
        endcase
      end
    
    // resource: fft2_N_Mux_32_2_2_4
    always @(fft2_OrReduction_29U_1U_4_39_out1 or fft2_N_Mux_32_2_2_4_46_out1 or fft2_N_Mux_32_2_2_4_49_in2)
      begin : fft2_N_Mux_32_2_2_4_49
        if (fft2_OrReduction_29U_1U_4_39_out1) 
          begin
            fft2_N_Mux_32_2_2_4_49_out1 = fft2_N_Mux_32_2_2_4_49_in2;
          end 
        else 
          begin
            fft2_N_Mux_32_2_2_4_49_out1 = fft2_N_Mux_32_2_2_4_46_out1;
          end
      end
    
    // resource: mux_28bx3i1c
    always @(s_reg_51[31:4] or gs_ctrl50 or s_reg_48_slice[23:4])
      begin : drive_fft2_OrReduction_29U_1U_4_50_in1_slice
        case (gs_ctrl50) 
          2'd1: 
            begin
              fft2_OrReduction_29U_1U_4_50_in1_slice = {8'b00000000, s_reg_48_slice[23:4]};
            end
          2'd2: 
            begin
              fft2_OrReduction_29U_1U_4_50_in1_slice = s_reg_51[31:4];
            end
          default: 
            begin
              fft2_OrReduction_29U_1U_4_50_in1_slice = 28'd000000000;
            end
        endcase
      end
    
    // resource: fft2_OrReduction_29U_1U_4  instance: fft2_OrReduction_29U_1U_4_50
    assign fft2_OrReduction_29U_1U_4_50_out1 = (|{1'b0, fft2_OrReduction_29U_1U_4_50_in1_slice});
    
    // resource: fft2_Sub_32Sx1U_32S_1  instance: fft2_Sub_32Sx1U_32S_1_51
    assign fft2_Sub_32Sx1U_32S_1_51_out1 = fft2_Sub_32Sx1U_32S_1_48_out1 - {31'b0000000000000000000000000000000, fft2_OrReduction_29U_1U_4_47_out1};
    
    // resource: mux_32bx3i0c
    always @(s_reg_51[4] or fft2_N_Mux_32_2_2_4_49_out1[30:0] or gs_ctrl51 or s_reg_48_slice[4])
      begin : drive_fft2_N_Mux_32_2_2_4_52_in2
        case (gs_ctrl51) 
          2'd1: 
            begin
              fft2_N_Mux_32_2_2_4_52_in2 = {fft2_N_Mux_32_2_2_4_49_out1[30:0], s_reg_48_slice[4]};
            end
          2'd2: 
            begin
              fft2_N_Mux_32_2_2_4_52_in2 = {fft2_N_Mux_32_2_2_4_49_out1[30:0], s_reg_51[4]};
            end
          default: 
            begin
              fft2_N_Mux_32_2_2_4_52_in2 = {fft2_N_Mux_32_2_2_4_49_out1[30:0], 1'b0};
            end
        endcase
      end
    
    // resource: fft2_N_Mux_32_2_2_4
    always @(fft2_OrReduction_29U_1U_4_38_out1 or fft2_N_Mux_32_2_2_4_49_out1 or fft2_N_Mux_32_2_2_4_52_in2)
      begin : fft2_N_Mux_32_2_2_4_52
        if (fft2_OrReduction_29U_1U_4_38_out1) 
          begin
            fft2_N_Mux_32_2_2_4_52_out1 = fft2_N_Mux_32_2_2_4_52_in2;
          end 
        else 
          begin
            fft2_N_Mux_32_2_2_4_52_out1 = fft2_N_Mux_32_2_2_4_49_out1;
          end
      end
    
    // resource: fft2_Sub_32Sx1U_32S_1  instance: fft2_Sub_32Sx1U_32S_1_53
    assign fft2_Sub_32Sx1U_32S_1_53_out1 = fft2_Sub_32Sx1U_32S_1_51_out1 - {31'b0000000000000000000000000000000, fft2_OrReduction_29U_1U_4_50_out1};
    
    // resource: mux_32bx3i0c
    always @(s_reg_51[5] or fft2_N_Mux_32_2_2_4_52_out1[30:0] or gs_ctrl52 or s_reg_48_slice[5])
      begin : drive_fft2_N_Mux_32_2_2_4_54_in2
        case (gs_ctrl52) 
          2'd1: 
            begin
              fft2_N_Mux_32_2_2_4_54_in2 = {fft2_N_Mux_32_2_2_4_52_out1[30:0], s_reg_48_slice[5]};
            end
          2'd2: 
            begin
              fft2_N_Mux_32_2_2_4_54_in2 = {fft2_N_Mux_32_2_2_4_52_out1[30:0], s_reg_51[5]};
            end
          default: 
            begin
              fft2_N_Mux_32_2_2_4_54_in2 = {fft2_N_Mux_32_2_2_4_52_out1[30:0], 1'b0};
            end
        endcase
      end
    
    // resource: fft2_N_Mux_32_2_2_4
    always @(fft2_OrReduction_29U_1U_4_37_out1 or fft2_N_Mux_32_2_2_4_52_out1 or fft2_N_Mux_32_2_2_4_54_in2)
      begin : fft2_N_Mux_32_2_2_4_54
        if (fft2_OrReduction_29U_1U_4_37_out1) 
          begin
            fft2_N_Mux_32_2_2_4_54_out1 = fft2_N_Mux_32_2_2_4_54_in2;
          end 
        else 
          begin
            fft2_N_Mux_32_2_2_4_54_out1 = fft2_N_Mux_32_2_2_4_52_out1;
          end
      end
    
    // resource: mux_32bx3i0c
    always @(s_reg_51[6] or fft2_N_Mux_32_2_2_4_54_out1[30:0] or gs_ctrl53 or s_reg_48_slice[6])
      begin : drive_fft2_N_Mux_32_2_2_4_55_in2
        case (gs_ctrl53) 
          2'd1: 
            begin
              fft2_N_Mux_32_2_2_4_55_in2 = {fft2_N_Mux_32_2_2_4_54_out1[30:0], s_reg_48_slice[6]};
            end
          2'd2: 
            begin
              fft2_N_Mux_32_2_2_4_55_in2 = {fft2_N_Mux_32_2_2_4_54_out1[30:0], s_reg_51[6]};
            end
          default: 
            begin
              fft2_N_Mux_32_2_2_4_55_in2 = {fft2_N_Mux_32_2_2_4_54_out1[30:0], 1'b0};
            end
        endcase
      end
    
    // resource: fft2_N_Mux_32_2_2_4
    always @(fft2_OrReduction_29U_1U_4_35_out1 or fft2_N_Mux_32_2_2_4_54_out1 or fft2_N_Mux_32_2_2_4_55_in2)
      begin : fft2_N_Mux_32_2_2_4_55
        if (fft2_OrReduction_29U_1U_4_35_out1) 
          begin
            fft2_N_Mux_32_2_2_4_55_out1 = fft2_N_Mux_32_2_2_4_55_in2;
          end 
        else 
          begin
            fft2_N_Mux_32_2_2_4_55_out1 = fft2_N_Mux_32_2_2_4_54_out1;
          end
      end
    
    // resource: mux_24bx3i1c
    always @(s_reg_51[31:8] or gs_ctrl54 or s_reg_48_slice[23:8])
      begin : drive_fft2_OrReduction_29U_1U_4_56_in1_slice
        case (gs_ctrl54) 
          2'd1: 
            begin
              fft2_OrReduction_29U_1U_4_56_in1_slice = {8'b00000000, s_reg_48_slice[23:8]};
            end
          2'd2: 
            begin
              fft2_OrReduction_29U_1U_4_56_in1_slice = s_reg_51[31:8];
            end
          default: 
            begin
              fft2_OrReduction_29U_1U_4_56_in1_slice = 24'd00000000;
            end
        endcase
      end
    
    // resource: fft2_OrReduction_29U_1U_4  instance: fft2_OrReduction_29U_1U_4_56
    assign fft2_OrReduction_29U_1U_4_56_out1 = (|{5'd00, fft2_OrReduction_29U_1U_4_56_in1_slice});
    
    // resource: mux_32bx3i0c
    always @(s_reg_51[7] or fft2_N_Mux_32_2_2_4_55_out1[30:0] or gs_ctrl55 or s_reg_48_slice[7])
      begin : drive_fft2_N_Mux_32_2_2_4_57_in2
        case (gs_ctrl55) 
          2'd1: 
            begin
              fft2_N_Mux_32_2_2_4_57_in2 = {fft2_N_Mux_32_2_2_4_55_out1[30:0], s_reg_48_slice[7]};
            end
          2'd2: 
            begin
              fft2_N_Mux_32_2_2_4_57_in2 = {fft2_N_Mux_32_2_2_4_55_out1[30:0], s_reg_51[7]};
            end
          default: 
            begin
              fft2_N_Mux_32_2_2_4_57_in2 = {fft2_N_Mux_32_2_2_4_55_out1[30:0], 1'b0};
            end
        endcase
      end
    
    // resource: fft2_N_Mux_32_2_2_4
    always @(fft2_OrReduction_29U_1U_4_33_out1 or fft2_N_Mux_32_2_2_4_55_out1 or fft2_N_Mux_32_2_2_4_57_in2)
      begin : fft2_N_Mux_32_2_2_4_57
        if (fft2_OrReduction_29U_1U_4_33_out1) 
          begin
            fft2_N_Mux_32_2_2_4_57_out1 = fft2_N_Mux_32_2_2_4_57_in2;
          end 
        else 
          begin
            fft2_N_Mux_32_2_2_4_57_out1 = fft2_N_Mux_32_2_2_4_55_out1;
          end
      end
    
    // resource: mux_32bx3i0c
    always @(s_reg_51[8] or fft2_N_Mux_32_2_2_4_57_out1[30:0] or gs_ctrl56 or s_reg_48_slice[8])
      begin : drive_fft2_N_Mux_32_2_2_4_58_in2
        case (gs_ctrl56) 
          2'd1: 
            begin
              fft2_N_Mux_32_2_2_4_58_in2 = {fft2_N_Mux_32_2_2_4_57_out1[30:0], s_reg_48_slice[8]};
            end
          2'd2: 
            begin
              fft2_N_Mux_32_2_2_4_58_in2 = {fft2_N_Mux_32_2_2_4_57_out1[30:0], s_reg_51[8]};
            end
          default: 
            begin
              fft2_N_Mux_32_2_2_4_58_in2 = {fft2_N_Mux_32_2_2_4_57_out1[30:0], 1'b0};
            end
        endcase
      end
    
    // resource: fft2_N_Mux_32_2_2_4
    always @(fft2_OrReduction_29U_1U_4_56_out1 or fft2_N_Mux_32_2_2_4_57_out1 or fft2_N_Mux_32_2_2_4_58_in2)
      begin : fft2_N_Mux_32_2_2_4_58
        if (fft2_OrReduction_29U_1U_4_56_out1) 
          begin
            fft2_N_Mux_32_2_2_4_58_out1 = fft2_N_Mux_32_2_2_4_58_in2;
          end 
        else 
          begin
            fft2_N_Mux_32_2_2_4_58_out1 = fft2_N_Mux_32_2_2_4_57_out1;
          end
      end
    
    // resource: fft2_OrReduction_29U_1U_1  instance: fft2_OrReduction_29U_1U_1_59
    assign fft2_OrReduction_29U_1U_1_59_out1 = (|s_reg_42);
    
    // resource: fft2_OrReduction_29U_1U_4  instance: fft2_OrReduction_29U_1U_4_60
    assign fft2_OrReduction_29U_1U_4_60_out1 = (|s_reg_43);
    
    // resource: fft2_OrReduction_29U_1U_4  instance: fft2_OrReduction_29U_1U_4_61
    assign fft2_OrReduction_29U_1U_4_61_out1 = (|s_reg_44);
    
    // resource: fft2_Sub_32Sx1U_32S_1  instance: fft2_Sub_32Sx1U_32S_1_62
    assign fft2_Sub_32Sx1U_32S_1_62_out1 = s_reg_47 - {31'b0000000000000000000000000000000, fft2_OrReduction_29U_1U_1_59_out1};
    
    // resource: fft2_Sub_32Sx1U_32S_1  instance: fft2_Sub_32Sx1U_32S_1_63
    assign fft2_Sub_32Sx1U_32S_1_63_out1 = fft2_Sub_32Sx1U_32S_1_62_out1 - {31'b0000000000000000000000000000000, fft2_OrReduction_29U_1U_4_60_out1};
    
    // resource: fft2_Sub_32Sx1U_32S_1  instance: fft2_Sub_32Sx1U_32S_1_64
    assign fft2_Sub_32Sx1U_32S_1_64_out1 = fft2_Sub_32Sx1U_32S_1_63_out1 - {31'b0000000000000000000000000000000, fft2_OrReduction_29U_1U_4_61_out1};
    
    // resource: fft2_Add_32Ux1U_32U_4  instance: fft2_Add_32Ux1U_32U_4_65
    assign fft2_Add_32Ux1U_32U_4_65_out1 = s_reg_41 + 32'd0000000001;
    
    // resource: fft2_OrReduction_29U_1U_4  instance: fft2_OrReduction_29U_1U_4_66
    assign fft2_OrReduction_29U_1U_4_66_out1 = (|s_reg_48_slice);
    
    // resource: fft2_Sub_32Sx1U_32S_1  instance: fft2_Sub_32Sx1U_32S_1_67
    assign fft2_Sub_32Sx1U_32S_1_67_out1 = fft2_Sub_32Sx1U_32S_1_64_out1 - {31'b0000000000000000000000000000000, fft2_OrReduction_29U_1U_4_66_out1};
    
    // resource: fft2_LessThan_6Sx6S_1U_4  instance: fft2_LessThan_6Sx6S_1U_4_68
    assign fft2_LessThan_6Sx6S_1U_4_68_out1 = s_reg_46[5] ^ s_reg_46 < 6'd31;
    
    // resource: fft2_Add_14Ux14U_14U_4  instance: fft2_Add_14Ux14U_14U_4_69
    assign fft2_Add_14Ux14U_14U_4_69_out1 = s_reg_25[13:0] + s_reg_41[13:0];
    
    // resource: mux_32bx2i0c
    always @(s_reg_45 or s_reg_49 or s_reg_50)
      begin : drive_fft2_LeftShift_32Ux5U_32U_1_70_in2
        if (s_reg_45) 
          begin
            fft2_LeftShift_32Ux5U_32U_1_70_in2 = s_reg_50;
          end 
        else 
          begin
            fft2_LeftShift_32Ux5U_32U_1_70_in2 = s_reg_49;
          end
      end
    
    // resource: mux_5bx2i0c
    always @(s_reg_45 or fft2_Sub_32Sx1U_32S_1_64_out1[4:0] or fft2_Sub_32Sx1U_32S_1_67_out1[4:0])
      begin : drive_fft2_LeftShift_32Ux5U_32U_1_70_in1
        if (s_reg_45) 
          begin
            fft2_LeftShift_32Ux5U_32U_1_70_in1 = fft2_Sub_32Sx1U_32S_1_67_out1[4:0];
          end 
        else 
          begin
            fft2_LeftShift_32Ux5U_32U_1_70_in1 = fft2_Sub_32Sx1U_32S_1_64_out1[4:0];
          end
      end
    
    // resource: fft2_LeftShift_32Ux5U_32U_1  instance: fft2_LeftShift_32Ux5U_32U_1_70
    assign fft2_LeftShift_32Ux5U_32U_1_70_out1 = fft2_LeftShift_32Ux5U_32U_1_70_in2 << fft2_LeftShift_32Ux5U_32U_1_70_in1;
    
    // resource: fft2_Minus_5U_5S_4  instance: fft2_Minus_5U_5S_4_71
    assign fft2_Minus_5U_5S_4_71_out1 = -s_reg_5[4:0];
    
    // resource: fft2_RightShift_32Ux5U_32U_4  instance: fft2_RightShift_32Ux5U_32U_4_72
    assign fft2_RightShift_32Ux5U_32U_4_72_out1 = s_reg_56 >> fft2_Minus_5U_5S_4_71_out1;
    
    // resource: fft2_LessThan_32Ux32U_1U_4  instance: fft2_LessThan_32Ux32U_1U_4_73
    assign fft2_LessThan_32Ux32U_1U_4_73_out1 = s_reg_41 < fft2_RightShift_32Ux5U_32U_4_72_out1;
    
    // resource: fft2_Add_14Ux14U_14U_4  instance: fft2_Add_14Ux14U_14U_4_74
    assign fft2_Add_14Ux14U_14U_4_74_out1 = s_reg_25[13:0] + fft2_RightShift_32Ux5U_32U_4_72_out1[13:0];
    
    // resource: fft2_LessThan_32Ux32U_1U_4  instance: fft2_LessThan_32Ux32U_1U_4_75
    assign fft2_LessThan_32Ux32U_1U_4_75_out1 = s_reg_51 < s_reg_40;
    
    // resource: fft2_OrReduction_32S_1U_4  instance: fft2_OrReduction_32S_1U_4_76
    assign fft2_OrReduction_32S_1U_4_76_out1 = (|s_reg_6);
    
    // resource: mux_5bx2i1c
    always @(s_reg_68[4:0] or gs_ctrl57)
      begin : drive_fft2_LeftShift_1Ux5U_32S_1_77_in1
        if (gs_ctrl57) 
          begin
            fft2_LeftShift_1Ux5U_32S_1_77_in1 = s_reg_68[4:0];
          end 
        else 
          begin
            fft2_LeftShift_1Ux5U_32S_1_77_in1 = 5'd01;
          end
      end
    
    // resource: fft2_LeftShift_1Ux5U_32S_1  instance: fft2_LeftShift_1Ux5U_32S_1_77
    assign fft2_LeftShift_1Ux5U_32S_1_77_out1 = 32'd0000000001 << fft2_LeftShift_1Ux5U_32S_1_77_in1;
    
    // resource: mux_32bx2i1c
    always @(s_reg_68 or gs_ctrl58)
      begin : drive_fft2_Add_32Ux1U_32U_1_78_in2
        if (gs_ctrl58) 
          begin
            fft2_Add_32Ux1U_32U_1_78_in2 = s_reg_68;
          end 
        else 
          begin
            fft2_Add_32Ux1U_32U_1_78_in2 = 32'd0000000001;
          end
      end
    
    // resource: fft2_Add_32Ux1U_32U_1  instance: fft2_Add_32Ux1U_32U_1_78
    assign fft2_Add_32Ux1U_32U_1_78_out1 = fft2_Add_32Ux1U_32U_1_78_in2 + 32'd0000000001;
    
    // resource: fft2_LessThanEQ_32Ux32U_1U_4  instance: fft2_LessThanEQ_32Ux32U_1U_4_79
    assign fft2_LessThanEQ_32Ux32U_1U_4_79_out1 = fft2_Add_32Ux1U_32U_1_78_out1 <= s_reg_5;
    
    // resource: mux_32bx2i1c
    always @(s_reg_68 or gs_ctrl59)
      begin : drive_fft2_N_Mux_20_12_3_1_80_ctrl1
        if (gs_ctrl59) 
          begin
            fft2_N_Mux_20_12_3_1_80_ctrl1 = s_reg_68;
          end 
        else 
          begin
            fft2_N_Mux_20_12_3_1_80_ctrl1 = 32'd0000000001;
          end
      end
    
    // resource: fft2_N_Mux_20_12_3_1
    always @(fft2_N_Mux_20_12_3_1_80_ctrl1)
      begin : fft2_N_Mux_20_12_3_1_80
        case (fft2_N_Mux_20_12_3_1_80_ctrl1) 
          32'd0000000001: 
            begin
              fft2_N_Mux_20_12_3_1_80_out1 = 20'd0524288;
            end
          32'd0000000002: 
            begin
              fft2_N_Mux_20_12_3_1_80_out1 = 20'd0262144;
            end
          32'd0000000003: 
            begin
              fft2_N_Mux_20_12_3_1_80_out1 = 20'd0076780;
            end
          32'd0000000004: 
            begin
              fft2_N_Mux_20_12_3_1_80_out1 = 20'd0019955;
            end
          32'd0000000005: 
            begin
              fft2_N_Mux_20_12_3_1_80_out1 = 20'd0005037;
            end
          32'd0000000006: 
            begin
              fft2_N_Mux_20_12_3_1_80_out1 = 20'd0001262;
            end
          32'd0000000007: 
            begin
              fft2_N_Mux_20_12_3_1_80_out1 = 20'd0000316;
            end
          32'd0000000008: 
            begin
              fft2_N_Mux_20_12_3_1_80_out1 = 20'd0000079;
            end
          32'd0000000009: 
            begin
              fft2_N_Mux_20_12_3_1_80_out1 = 20'd0000020;
            end
          32'd0000000010: 
            begin
              fft2_N_Mux_20_12_3_1_80_out1 = 20'd0000005;
            end
          32'd0000000011: 
            begin
              fft2_N_Mux_20_12_3_1_80_out1 = 20'd0000001;
            end
          default: 
            begin
              fft2_N_Mux_20_12_3_1_80_out1 = 20'd0000000;
            end
        endcase
      end
    
    // resource: mux_32bx2i1c
    always @(s_reg_68 or gs_ctrl60)
      begin : drive_fft2_N_Mux_19_16_4_1_81_ctrl1
        if (gs_ctrl60) 
          begin
            fft2_N_Mux_19_16_4_1_81_ctrl1 = s_reg_68;
          end 
        else 
          begin
            fft2_N_Mux_19_16_4_1_81_ctrl1 = 32'd0000000001;
          end
      end
    
    // resource: fft2_N_Mux_19_16_4_1
    always @(fft2_N_Mux_19_16_4_1_81_ctrl1)
      begin : fft2_N_Mux_19_16_4_1_81
        case (fft2_N_Mux_19_16_4_1_81_ctrl1) 
          32'd0000000002: 
            begin
              fft2_N_Mux_19_16_4_1_81_out1 = 19'd262144;
            end
          32'd0000000003: 
            begin
              fft2_N_Mux_19_16_4_1_81_out1 = 19'd338924;
            end
          32'd0000000004: 
            begin
              fft2_N_Mux_19_16_4_1_81_out1 = 19'd423970;
            end
          32'd0000000005: 
            begin
              fft2_N_Mux_19_16_4_1_81_out1 = 19'd473146;
            end
          32'd0000000006: 
            begin
              fft2_N_Mux_19_16_4_1_81_out1 = 19'd498593;
            end
          32'd0000000007: 
            begin
              fft2_N_Mux_19_16_4_1_81_out1 = 19'd511425;
            end
          32'd0000000008: 
            begin
              fft2_N_Mux_19_16_4_1_81_out1 = 19'd517855;
            end
          32'd0000000009: 
            begin
              fft2_N_Mux_19_16_4_1_81_out1 = 19'd521071;
            end
          32'd0000000010: 
            begin
              fft2_N_Mux_19_16_4_1_81_out1 = 19'd522680;
            end
          32'd0000000011: 
            begin
              fft2_N_Mux_19_16_4_1_81_out1 = 19'd523484;
            end
          32'd0000000012: 
            begin
              fft2_N_Mux_19_16_4_1_81_out1 = 19'd523886;
            end
          32'd0000000013: 
            begin
              fft2_N_Mux_19_16_4_1_81_out1 = 19'd524087;
            end
          32'd0000000014: 
            begin
              fft2_N_Mux_19_16_4_1_81_out1 = 19'd524187;
            end
          32'd0000000015: 
            begin
              fft2_N_Mux_19_16_4_1_81_out1 = 19'd524238;
            end
          32'd0000000016: 
            begin
              fft2_N_Mux_19_16_4_1_81_out1 = 19'd524263;
            end
          default: 
            begin
              fft2_N_Mux_19_16_4_1_81_out1 = 19'd000000;
            end
        endcase
      end
    
    // resource: mux_1bx2i0c
    always @(s_reg_66 or fft2_OrReduction_32S_1U_4_76_out1 or gs_ctrl61)
      begin : drive_fft2_Mul_19Sx2S_21S_4_82_in1_slice
        if (gs_ctrl61) 
          begin
            fft2_Mul_19Sx2S_21S_4_82_in1_slice = s_reg_66;
          end 
        else 
          begin
            fft2_Mul_19Sx2S_21S_4_82_in1_slice = fft2_OrReduction_32S_1U_4_76_out1;
          end
      end
    
    // resource: fft2_Mul_19Sx2S_21S_4  instance: fft2_Mul_19Sx2S_21S_4_82
    assign fft2_Mul_19Sx2S_21S_4_82_out1 = {{ 2 {fft2_N_Mux_19_16_4_1_81_out1[18]}}, fft2_N_Mux_19_16_4_1_81_out1} * {{ 20 {fft2_Mul_19Sx2S_21S_4_82_in1_slice}}, 1'b1};
    
    // resource: mux_1bx2i0c
    always @(s_reg_67[31] or fft2_LeftShift_1Ux5U_32S_1_77_out1[31] or gs_ctrl62)
      begin : drive_fft2_And_1Ux1U_1U_4_83_in2
        if (gs_ctrl62) 
          begin
            fft2_And_1Ux1U_1U_4_83_in2 = s_reg_67[31];
          end 
        else 
          begin
            fft2_And_1Ux1U_1U_4_83_in2 = fft2_LeftShift_1Ux5U_32S_1_77_out1[31];
          end
      end
    
    // resource: mux_1bx2i0c
    always @(s_reg_67[0] or fft2_LeftShift_1Ux5U_32S_1_77_out1[0] or gs_ctrl63)
      begin : drive_fft2_And_1Ux1U_1U_4_83_in1
        if (gs_ctrl63) 
          begin
            fft2_And_1Ux1U_1U_4_83_in1 = s_reg_67[0];
          end 
        else 
          begin
            fft2_And_1Ux1U_1U_4_83_in1 = fft2_LeftShift_1Ux5U_32S_1_77_out1[0];
          end
      end
    
    // resource: fft2_And_1Ux1U_1U_4  instance: fft2_And_1Ux1U_1U_4_83
    assign fft2_And_1Ux1U_1U_4_83_out1 = fft2_And_1Ux1U_1U_4_83_in2 & fft2_And_1Ux1U_1U_4_83_in1;
    
    // resource: mux_31bx2i0c
    always @(s_reg_67[31:1] or fft2_LeftShift_1Ux5U_32S_1_77_out1[31:1] or gs_ctrl64)
      begin : drive_fft2_Add_31Sx1U_32S_1_84_in2
        if (gs_ctrl64) 
          begin
            fft2_Add_31Sx1U_32S_1_84_in2 = s_reg_67[31:1];
          end 
        else 
          begin
            fft2_Add_31Sx1U_32S_1_84_in2 = fft2_LeftShift_1Ux5U_32S_1_77_out1[31:1];
          end
      end
    
    // resource: fft2_Add_31Sx1U_32S_1  instance: fft2_Add_31Sx1U_32S_1_84
    assign fft2_Add_31Sx1U_32S_1_84_out1 = {fft2_Add_31Sx1U_32S_1_84_in2[30], fft2_Add_31Sx1U_32S_1_84_in2} + {31'b0000000000000000000000000000000, fft2_And_1Ux1U_1U_4_83_out1};
    
    // resource: fft2_LessThan_17Sx33S_1U_4  instance: fft2_LessThan_17Sx33S_1U_4_85
    assign fft2_LessThan_17Sx33S_1U_4_85_out1 = fft2_Add_31Sx1U_32S_1_84_out1[31] ^ 33'd0000000000 < {fft2_Add_31Sx1U_32S_1_84_out1[31], fft2_Add_31Sx1U_32S_1_84_out1};
    
    // resource: mux_32bx2i1c
    always @(s_reg_74 or gs_ctrl65)
      begin : drive_fft2_Add_32Ux32U_32U_1_86_in2
        if (gs_ctrl65) 
          begin
            fft2_Add_32Ux32U_32U_1_86_in2 = s_reg_74;
          end 
        else 
          begin
            fft2_Add_32Ux32U_32U_1_86_in2 = 32'd0000000000;
          end
      end
    
    // resource: mux_32bx2i0c
    always @(s_reg_67 or fft2_LeftShift_1Ux5U_32S_1_77_out1 or gs_ctrl66)
      begin : drive_fft2_Add_32Ux32U_32U_1_86_in1
        if (gs_ctrl66) 
          begin
            fft2_Add_32Ux32U_32U_1_86_in1 = s_reg_67;
          end 
        else 
          begin
            fft2_Add_32Ux32U_32U_1_86_in1 = fft2_LeftShift_1Ux5U_32S_1_77_out1;
          end
      end
    
    // resource: fft2_Add_32Ux32U_32U_1  instance: fft2_Add_32Ux32U_32U_1_86
    assign fft2_Add_32Ux32U_32U_1_86_out1 = fft2_Add_32Ux32U_32U_1_86_in2 + fft2_Add_32Ux32U_32U_1_86_in1;
    
    // resource: fft2_LessThan_32Ux32U_1U_4  instance: fft2_LessThan_32Ux32U_1U_4_87
    assign fft2_LessThan_32Ux32U_1U_4_87_out1 = fft2_Add_32Ux32U_32U_1_86_out1 < s_reg_7;
    
    // resource: mux_14bx3i1c
    always @(s_reg_73[13:0] or s_reg_74[13:0] or gs_ctrl67)
      begin : drive_fft2_Add_14Ux14U_14U_1_88_in1
        case (gs_ctrl67) 
          2'd1: 
            begin
              fft2_Add_14Ux14U_14U_1_88_in1 = s_reg_73[13:0];
            end
          2'd2: 
            begin
              fft2_Add_14Ux14U_14U_1_88_in1 = s_reg_74[13:0];
            end
          default: 
            begin
              fft2_Add_14Ux14U_14U_1_88_in1 = 14'd00000;
            end
        endcase
      end
    
    // resource: fft2_Add_14Ux14U_14U_1  instance: fft2_Add_14Ux14U_14U_1_88
    assign fft2_Add_14Ux14U_14U_1_88_out1 = s_reg_25[13:0] + fft2_Add_14Ux14U_14U_1_88_in1;
    
    // resource: mux_14bx2i1c
    always @(s_reg_85[13:0] or gs_ctrl68)
      begin : drive_fft2_Add_14Ux14U_14U_1_89_in1
        if (gs_ctrl68) 
          begin
            fft2_Add_14Ux14U_14U_1_89_in1 = s_reg_85[13:0];
          end 
        else 
          begin
            fft2_Add_14Ux14U_14U_1_89_in1 = 14'd00000;
          end
      end
    
    // resource: fft2_Add_14Ux14U_14U_1  instance: fft2_Add_14Ux14U_14U_1_89
    assign fft2_Add_14Ux14U_14U_1_89_out1 = fft2_Add_14Ux14U_14U_1_88_out1 + fft2_Add_14Ux14U_14U_1_89_in1;
    
    // resource: fft2_Add_14Ux14U_14U_4  instance: fft2_Add_14Ux14U_14U_4_90
    assign fft2_Add_14Ux14U_14U_4_90_out1 = s_reg_80 + s_reg_72[13:0];
    
    // resource: fft2_Add_14Ux14U_14U_4  instance: fft2_Add_14Ux14U_14U_4_91
    assign fft2_Add_14Ux14U_14U_4_91_out1 = s_reg_25[13:0] + s_reg_73[13:0];
    
    // resource: fft2_Add_32Sx1U_32S_4  instance: fft2_Add_32Sx1U_32S_4_92
    assign fft2_Add_32Sx1U_32S_4_92_out1 = s_reg_79 + 32'd0000000001;
    
    // instance: drive_fft2_Mul_32Sx22S_50S_4_93_in2
    assign fft2_Mul_32Sx22S_50S_4_93_in2 = s_reg_77;
    
    // instance: drive_fft2_Mul_32Sx22S_50S_4_93_in1
    assign fft2_Mul_32Sx22S_50S_4_93_in1 = {2'd0, {s_reg_70[19:18], {1'b0, {s_reg_76, {1'b0, s_reg_70[14:0]}}}}};
    
    // instance: drive_fft2_Mul_32Sx21S_50S_4_94_in2
    assign fft2_Mul_32Sx21S_50S_4_94_in2 = s_reg_78;
    
    // instance: drive_fft2_Mul_32Sx21S_50S_4_94_in1
    assign fft2_Mul_32Sx21S_50S_4_94_in1 = s_reg_71;
    
    // instance: drive_fft2_Mul_32Sx22S_50S_4_95_in2
    assign fft2_Mul_32Sx22S_50S_4_95_in2 = s_reg_78;
    
    // instance: drive_fft2_Mul_32Sx22S_50S_4_95_in1
    assign fft2_Mul_32Sx22S_50S_4_95_in1 = {2'd0, {s_reg_70[19:18], {1'b0, {s_reg_76, {1'b0, s_reg_70[14:0]}}}}};
    
    // instance: drive_fft2_Mul_32Sx21S_50S_4_96_in2
    assign fft2_Mul_32Sx21S_50S_4_96_in2 = s_reg_77;
    
    // instance: drive_fft2_Mul_32Sx21S_50S_4_96_in1
    assign fft2_Mul_32Sx21S_50S_4_96_in1 = s_reg_71;
    
    // resource: fft2_Add_50Ux50U_50U_1  instance: fft2_Add_50Ux50U_50U_1_97
    assign fft2_Add_50Ux50U_50U_1_97_out1 = fft2_Mul_32Sx21S_50S_4_94_out1 + fft2_Mul_32Sx22S_50S_4_93_out1;
    
    // resource: fft2_Sub_50Ux50U_50U_1  instance: fft2_Sub_50Ux50U_50U_1_98
    assign fft2_Sub_50Ux50U_50U_1_98_out1 = fft2_Mul_32Sx21S_50S_4_96_out1 - fft2_Mul_32Sx22S_50S_4_95_out1;
    
    // resource: fft2_Add_14Ux14U_14U_4  instance: fft2_Add_14Ux14U_14U_4_99
    assign fft2_Add_14Ux14U_14U_4_99_out1 = s_reg_84 + s_reg_79[13:0];
    
    // instance: drive_fft2_Mul_32Sx32S_50S_4_100_in2
    assign fft2_Mul_32Sx32S_50S_4_100_in2 = s_reg_78;
    
    // instance: drive_fft2_Mul_32Sx32S_50S_4_100_in1
    assign fft2_Mul_32Sx32S_50S_4_100_in1 = A0_shared_Q3_wire;
    
    // instance: drive_fft2_Mul_32Sx32S_50S_4_101_in2
    assign fft2_Mul_32Sx32S_50S_4_101_in2 = s_reg_77;
    
    // instance: drive_fft2_Mul_32Sx32S_50S_4_101_in1
    assign fft2_Mul_32Sx32S_50S_4_101_in1 = A0_shared_Q2_wire;
    
    // resource: fft2_Add_50Ux50U_50U_1  instance: fft2_Add_50Ux50U_50U_1_102
    assign fft2_Add_50Ux50U_50U_1_102_out1 = fft2_Mul_32Sx32S_50S_4_101_out1 + fft2_Mul_32Sx32S_50S_4_100_out1;
    
    // instance: drive_fft2_Mul_32Sx32S_50S_4_103_in2
    assign fft2_Mul_32Sx32S_50S_4_103_in2 = s_reg_78;
    
    // instance: drive_fft2_Mul_32Sx32S_50S_4_103_in1
    assign fft2_Mul_32Sx32S_50S_4_103_in1 = A0_shared_Q2_wire;
    
    // instance: drive_fft2_Mul_32Sx32S_50S_4_104_in2
    assign fft2_Mul_32Sx32S_50S_4_104_in2 = s_reg_77;
    
    // instance: drive_fft2_Mul_32Sx32S_50S_4_104_in1
    assign fft2_Mul_32Sx32S_50S_4_104_in1 = A0_shared_Q3_wire;
    
    // instance: drive_fft2_Sub_50Ux50U_50U_4_105_in2
    assign fft2_Sub_50Ux50U_50U_4_105_in2 = {s_reg_77, 18'd000000};
    
    // resource: fft2_Sub_50Ux50U_50U_4  instance: fft2_Sub_50Ux50U_50U_4_105
    assign fft2_Sub_50Ux50U_50U_4_105_out1 = fft2_Sub_50Ux50U_50U_4_105_in2 - s_reg_86;
    
    // instance: drive_fft2_Add_32Sx1U_32S_1_106_in2
    assign fft2_Add_32Sx1U_32S_1_106_in2 = fft2_Sub_50Ux50U_50U_4_105_out1[49:18];
    
    // instance: drive_fft2_Add_32Sx1U_32S_1_106_in1
    assign fft2_Add_32Sx1U_32S_1_106_in1 = fft2_Sub_50Ux50U_50U_4_105_out1[17];
    
    // resource: fft2_Add_32Sx1U_32S_1  instance: fft2_Add_32Sx1U_32S_1_106
    assign fft2_Add_32Sx1U_32S_1_106_out1 = fft2_Add_32Sx1U_32S_1_106_in2 + {31'b0000000000000000000000000000000, fft2_Add_32Sx1U_32S_1_106_in1};
    
    // resource: fft2_Sub_50Ux50U_50U_1  instance: fft2_Sub_50Ux50U_50U_1_107
    assign fft2_Sub_50Ux50U_50U_1_107_out1 = s_reg_93 - s_reg_92;
    
    // instance: drive_fft2_Add_32Sx1U_32S_1_108_in2
    assign fft2_Add_32Sx1U_32S_1_108_in2 = fft2_Sub_50Ux50U_50U_1_107_out1[49:18];
    
    // instance: drive_fft2_Add_32Sx1U_32S_1_108_in1
    assign fft2_Add_32Sx1U_32S_1_108_in1 = fft2_Sub_50Ux50U_50U_1_107_out1[17];
    
    // resource: fft2_Add_32Sx1U_32S_1  instance: fft2_Add_32Sx1U_32S_1_108
    assign fft2_Add_32Sx1U_32S_1_108_out1 = fft2_Add_32Sx1U_32S_1_108_in2 + {31'b0000000000000000000000000000000, fft2_Add_32Sx1U_32S_1_108_in1};
    
    // resource: fft2_Add_32Ux32U_32U_1  instance: fft2_Add_32Ux32U_32U_1_109
    assign fft2_Add_32Ux32U_32U_1_109_out1 = A0_compute_kernel_Q2 + fft2_Add_32Sx1U_32S_1_108_out1;
    
    // instance: drive_fft2_Add_32Sx1U_32S_4_110_in2
    assign fft2_Add_32Sx1U_32S_4_110_in2 = s_reg_91[32:1];
    
    // resource: fft2_Add_32Sx1U_32S_4  instance: fft2_Add_32Sx1U_32S_4_110
    assign fft2_Add_32Sx1U_32S_4_110_out1 = fft2_Add_32Sx1U_32S_4_110_in2 + {31'b0000000000000000000000000000000, s_reg_91[0]};
    
    // instance: drive_fft2_Add_50Ux50U_50U_4_111_in1
    assign fft2_Add_50Ux50U_50U_4_111_in1 = {s_reg_78, 18'd000000};
    
    // resource: fft2_Add_50Ux50U_50U_4  instance: fft2_Add_50Ux50U_50U_4_111
    assign fft2_Add_50Ux50U_50U_4_111_out1 = s_reg_87 + fft2_Add_50Ux50U_50U_4_111_in1;
    
    // resource: fft2_Add_32Ux32U_32U_4  instance: fft2_Add_32Ux32U_32U_4_112
    assign fft2_Add_32Ux32U_32U_4_112_out1 = s_reg_97 + s_reg_98;
    
    // resource: fft2_Sub_32Ux32U_32U_4  instance: fft2_Sub_32Ux32U_32U_4_113
    assign fft2_Sub_32Ux32U_32U_4_113_out1 = s_reg_97 - s_reg_98;
    
    // resource: fft2_Sub_32Ux32U_32U_4  instance: fft2_Sub_32Ux32U_32U_4_114
    assign fft2_Sub_32Ux32U_32U_4_114_out1 = s_reg_96 - s_reg_95;
    
    // instance: drive_fft2_Add_32Sx1U_32S_4_115_in2
    assign fft2_Add_32Sx1U_32S_4_115_in2 = s_reg_100[32:1];
    
    // resource: fft2_Add_32Sx1U_32S_4  instance: fft2_Add_32Sx1U_32S_4_115
    assign fft2_Add_32Sx1U_32S_4_115_out1 = fft2_Add_32Sx1U_32S_4_115_in2 + {31'b0000000000000000000000000000000, s_reg_100[0]};
    
    // resource: fft2_LessThan_32Sx33S_1U_4  instance: fft2_LessThan_32Sx33S_1U_4_116
    assign fft2_LessThan_32Sx33S_1U_4_116_out1 = s_reg_85[31] ^ (s_reg_72[31] ^ {s_reg_85[31], s_reg_85} < {s_reg_72[31], s_reg_72});
    
    // resource: fft2_Add_14Ux14U_14U_4  instance: fft2_Add_14Ux14U_14U_4_117
    assign fft2_Add_14Ux14U_14U_4_117_out1 = s_reg_25[13:0] + s_reg_102[13:0];
    
    // resource: fft2_Add_32Ux1U_32U_4  instance: fft2_Add_32Ux1U_32U_4_118
    assign fft2_Add_32Ux1U_32U_4_118_out1 = s_reg_102 + 32'd0000000001;
    
    // resource: fft2_Add_14Ux14U_14U_4  instance: fft2_Add_14Ux14U_14U_4_119
    assign fft2_Add_14Ux14U_14U_4_119_out1 = s_reg_25[13:0] + s_reg_10_slice[13:0];
    
    // resource: fft2_LessThan_32Ux32U_1U_4  instance: fft2_LessThan_32Ux32U_1U_4_120
    assign fft2_LessThan_32Ux32U_1U_4_120_out1 = s_reg_106 < {1'b0, s_reg_10_slice};
    
    // resource: fft2_Add_14Ux14U_14U_4  instance: fft2_Add_14Ux14U_14U_4_121
    assign fft2_Add_14Ux14U_14U_4_121_out1 = s_reg_107 + s_reg_102[13:0];
    
    // resource: fft2_LessThan_32Ux32U_1U_4  instance: fft2_LessThan_32Ux32U_1U_4_122
    assign fft2_LessThan_32Ux32U_1U_4_122_out1 = s_reg_24 < s_reg_21;
    
    // resource: fft2_Add_32Ux1U_32U_4  instance: fft2_Add_32Ux1U_32U_4_123
    assign fft2_Add_32Ux1U_32U_4_123_out1 = s_reg_1 + 32'd0000000001;
    
    // resource: fft2_Sub_32Ux16U_32S_4  instance: fft2_Sub_32Ux16U_32S_4_124
    assign fft2_Sub_32Ux16U_32S_4_124_out1 = s_reg_14 - 32'd0000032768;
    
    // resource: regr_ac_6
    always @(posedge clk)
      begin : drive_global_state1
        if (rst == 1'b0) 
          begin
            global_state1 <= 6'd00;
          end 
        else 
          begin
            global_state1 <= global_state1_next;
          end
      end
    
// pragma translate_off
    
always @(posedge clk)
      begin : drive_printf_2
        if (rst == 1'b0) 
          begin
          end 
        else 
          begin
            case (global_state1) 
              6'd03: 
                begin
                  // source loc: ../src/fft2.cpp:310
                  $write( "COMPUTE: in_len %u : max_in_ffts %u >> %u = %u\n", {fft2_Mul_31Ux31U_31U_4_14_out1, 1'b0}, 4'd14, s_reg_5, fft2_LeftShift_1Ux5U_32S_4_13_out1 );
                end
            endcase
          end
      end
// pragma translate_on
    
// pragma translate_off
    
always @(posedge clk)
      begin : drive_printf_3
        if (rst == 1'b0) 
          begin
          end 
        else 
          begin
            case (global_state1) 
              6'd03: 
                begin
                  if (fft2_GreaterThan_32Sx17S_1U_1_15_out1) 
                    begin
                      // source loc: ../src/fft2.cpp:318
                      $write( "COMPUTE INFO : in_rem %u : in_len %u :: out_rem %u : out_len %u\n", {fft2_Mul_31Ux31U_31U_4_14_out1, 1'b0}, fft2_N_Mux_32_2_0_4_21_out1, {fft2_Mul_31Ux31U_31U_4_14_out1, 1'b0}, fft2_N_Mux_32_2_0_4_22_out1 );
                    end 
                end
              6'd33: 
                begin
                  if (output_ready_channel_valid && s_reg_20) 
                    begin
                      // source loc: ../src/fft2.cpp:318
                      $write( "COMPUTE INFO : in_rem %u : in_len %u :: out_rem %u : out_len %u\n", s_reg_18, fft2_N_Mux_32_2_0_4_21_out1, fft2_Sub_32Ux16U_32S_4_124_out1, fft2_N_Mux_32_2_0_4_22_out1 );
                    end 
                end
            endcase
          end
      end
// pragma translate_on
    
// pragma translate_off
    
always @(posedge clk)
      begin : drive_printf_4
        if (rst == 1'b0) 
          begin
          end 
        else 
          begin
            case (global_state1) 
              6'd03: 
                begin
                  if (fft2_GreaterThan_32Sx17S_1U_1_15_out1) 
                    begin
                      // source loc: ../src/fft2.cpp:319
                      $write( "COMPUTE hit the compute-load handshake...\n" );
                    end 
                end
              6'd33: 
                begin
                  if (output_ready_channel_valid && s_reg_20) 
                    begin
                      // source loc: ../src/fft2.cpp:319
                      $write( "COMPUTE hit the compute-load handshake...\n" );
                    end 
                end
            endcase
          end
      end
// pragma translate_on
    
// pragma translate_off
    
always @(posedge clk)
      begin : drive_printf_5
        if (rst == 1'b0) 
          begin
          end 
        else 
          begin
            case (global_state1) 
              6'd04: 
                begin
                  if (input_ready_channel_ready) 
                    begin
                      // source loc: ../src/fft2.cpp:323
                      $write( "COMPUTE has %u rem_ffts : proceeding to the next %u FFT computations...\n", s_reg_16, fft2_N_Mux_32_2_2_4_24_out1 );
                    end 
                end
            endcase
          end
      end
// pragma translate_on
    
// pragma translate_off
    
always @(posedge clk)
      begin : drive_printf_6
        if (rst == 1'b0) 
          begin
          end 
        else 
          begin
            case (global_state1) 
              6'd04: 
                begin
                  if (input_ready_channel_ready && fft2_N_Mux_32_2_2_4_24_out1 == 32'd0000000000) 
                    begin
                      /* state318 */
                      // source loc: ../src/fft2.cpp:415
                      $write( "COMPUTE hit the compute-store handshake...\n" );
                    end 
                end
              6'd05: 
                begin
                  if (!(s_reg_9 || s_reg_7 != 32'd0000000000)) 
                    begin
                      case (s_reg_5) 
                        32'd0000000000: 
                          begin
                            if (!(s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1)) 
                              begin
                                /* state331 */
                                // source loc: ../src/fft2.cpp:415
                                $write( "COMPUTE hit the compute-store handshake...\n" );
                              end 
                          end
                        default: 
                          begin
                            if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))) 
                              begin
                                /* state333 */
                                // source loc: ../src/fft2.cpp:415
                                $write( "COMPUTE hit the compute-store handshake...\n" );
                              end 
                          end
                      endcase
                    end 
                end
              6'd10: 
                begin
                  if (!(s_reg_39 || s_reg_7 != 32'd0000000000)) 
                    begin
                      case (s_reg_5) 
                        32'd0000000000: 
                          begin
                            if (!(s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1)) 
                              begin
                                /* state319 */
                                // source loc: ../src/fft2.cpp:415
                                $write( "COMPUTE hit the compute-store handshake...\n" );
                              end 
                          end
                        default: 
                          begin
                            if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))) 
                              begin
                                /* state321 */
                                // source loc: ../src/fft2.cpp:415
                                $write( "COMPUTE hit the compute-store handshake...\n" );
                              end 
                          end
                      endcase
                    end 
                end
              6'd16: 
                begin
                  if (!(s_reg_57 || s_reg_61)) 
                    begin
                      case (s_reg_5) 
                        32'd0000000000: 
                          begin
                            if (!(s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1)) 
                              begin
                                /* state326 */
                                // source loc: ../src/fft2.cpp:415
                                $write( "COMPUTE hit the compute-store handshake...\n" );
                              end 
                          end
                        default: 
                          begin
                            case (s_reg_7) 
                              32'd0000000000: 
                                begin
                                  if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))) 
                                    begin
                                      /* state328 */
                                      // source loc: ../src/fft2.cpp:415
                                      $write( "COMPUTE hit the compute-store handshake...\n" );
                                    end 
                                end
                              default: 
                                begin
                                  if (!(fft2_LessThan_17Sx33S_1U_4_85_out1 || (fft2_LessThan_32Ux32U_1U_4_87_out1 || (fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))))) 
                                    begin
                                      /* state327 */
                                      // source loc: ../src/fft2.cpp:415
                                      $write( "COMPUTE hit the compute-store handshake...\n" );
                                    end 
                                end
                            endcase
                          end
                      endcase
                    end 
                end
              6'd18: 
                begin
                  if (s_reg_61) 
                    begin
                    end 
                  else 
                    begin
                      case (s_reg_5) 
                        32'd0000000000: 
                          begin
                            if (!(s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1)) 
                              begin
                                /* state323 */
                                // source loc: ../src/fft2.cpp:415
                                $write( "COMPUTE hit the compute-store handshake...\n" );
                              end 
                          end
                        default: 
                          begin
                            case (s_reg_7) 
                              32'd0000000000: 
                                begin
                                  if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))) 
                                    begin
                                      /* state325 */
                                      // source loc: ../src/fft2.cpp:415
                                      $write( "COMPUTE hit the compute-store handshake...\n" );
                                    end 
                                end
                              default: 
                                begin
                                  if (!(fft2_LessThan_17Sx33S_1U_4_85_out1 || (fft2_LessThan_32Ux32U_1U_4_87_out1 || (fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))))) 
                                    begin
                                      /* state324 */
                                      // source loc: ../src/fft2.cpp:415
                                      $write( "COMPUTE hit the compute-store handshake...\n" );
                                    end 
                                end
                            endcase
                          end
                      endcase
                    end
                end
              6'd24: 
                begin
                  if (!(fft2_LessThan_32Sx33S_1U_4_116_out1 || (s_reg_75 || (s_reg_69 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))))) 
                    begin
                      /* state330 */
                      // source loc: ../src/fft2.cpp:415
                      $write( "COMPUTE hit the compute-store handshake...\n" );
                    end 
                end
              6'd25: 
                begin
                  if (!(fft2_LessThan_17Sx33S_1U_4_85_out1 || (fft2_LessThan_32Ux32U_1U_4_87_out1 || (s_reg_69 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))))) 
                    begin
                      /* state329 */
                      // source loc: ../src/fft2.cpp:415
                      $write( "COMPUTE hit the compute-store handshake...\n" );
                    end 
                end
              6'd26: 
                begin
                  case (s_reg_7) 
                    32'd0000000000: 
                      begin
                        if (!(fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))) 
                          begin
                            /* state317 */
                            // source loc: ../src/fft2.cpp:415
                            $write( "COMPUTE hit the compute-store handshake...\n" );
                          end 
                      end
                    default: 
                      begin
                        if (!(fft2_LessThan_17Sx33S_1U_4_85_out1 || (fft2_LessThan_32Ux32U_1U_4_87_out1 || (fft2_LessThanEQ_32Ux32U_1U_4_79_out1 || (s_reg_11 || fft2_LessThan_32Ux32U_1U_4_122_out1))))) 
                          begin
                            /* state316 */
                            // source loc: ../src/fft2.cpp:415
                            $write( "COMPUTE hit the compute-store handshake...\n" );
                          end 
                      end
                  endcase
                end
              6'd32: 
                begin
                  if (!(s_reg_110 || fft2_LessThan_32Ux32U_1U_4_122_out1)) 
                    begin
                      /* state322 */
                      // source loc: ../src/fft2.cpp:415
                      $write( "COMPUTE hit the compute-store handshake...\n" );
                    end 
                end
            endcase
          end
      end
// pragma translate_on
    
// pragma translate_off
    
always @(posedge clk)
      begin : drive_printf_7
        if (rst == 1'b0) 
          begin
          end 
        else 
          begin
            case (global_state1) 
              6'd05: 
                begin
                  // source loc: ../src/fft2.cpp:326
                  $write( "COMPUTE: starting FFT %u of %u = %u : offset = %u\n", s_reg_23, s_reg_21, s_reg_1, fft2_Mul_32Ux32U_32U_4_26_out1 );
                end
            endcase
          end
      end
// pragma translate_on
    
    // resource: mux_6bx14i13c
    always @(cfg_done or input_ready_channel_ready or output_ready_channel_valid or s_reg_11 or s_reg_110 or s_reg_20 or s_reg_39 or s_reg_45 or s_reg_5 or s_reg_57 or s_reg_61 or s_reg_69 or s_reg_7 or s_reg_75 or s_reg_9 or fft2_GreaterThan_32Sx17S_1U_1_15_out1 or fft2_N_Mux_32_2_2_4_24_out1 or fft2_LessThan_6Sx6S_1U_4_68_out1 or fft2_LessThanEQ_32Ux32U_1U_4_79_out1 or fft2_LessThan_17Sx33S_1U_4_85_out1 or fft2_LessThan_32Ux32U_1U_4_87_out1 or fft2_LessThan_32Sx33S_1U_4_116_out1 or 
fft2_LessThan_32Ux32U_1U_4_122_out1
     or global_state1)
      begin : drive_global_state1_next
        case (global_state1) 
          6'd00, 6'd01: 
            begin
              if (cfg_done) 
                begin
                  global_state1_next = 6'd02;
                end 
              else 
                begin
                  global_state1_next = 6'd01;
                end
            end
          6'd03: 
            begin
              if (fft2_GreaterThan_32Sx17S_1U_1_15_out1) 
                begin
                  global_state1_next = global_state1 + 6'd01;
                end 
              else 
                begin
                  global_state1_next = 6'd34;
                end
            end
          6'd04: 
            begin
              if (input_ready_channel_ready) 
                begin
                  case (fft2_N_Mux_32_2_2_4_24_out1) 
                    32'd0000000000: 
                      begin
                        global_state1_next = 6'd33;
                      end
                    default: 
                      begin
                        global_state1_next = global_state1 + 6'd01;
                      end
                  endcase
                end 
              else 
                begin
                  global_state1_next = 6'd04;
                end
            end
          6'd05: 
            begin
              if (s_reg_9) 
                begin
                  global_state1_next = global_state1 + 6'd01;
                end 
              else 
                begin
                  /* state60 */
                  case (s_reg_7) 
                    32'd0000000000: 
                      begin
                        case (s_reg_5) 
                          32'd0000000000: 
                            begin
                              if (s_reg_11) 
                                begin
                                  global_state1_next = 6'd27;
                                end 
                              else 
                                begin
                                  if (fft2_LessThan_32Ux32U_1U_4_122_out1) 
                                    begin
                                      global_state1_next = 6'd05;
                                    end 
                                  else 
                                    begin
                                      global_state1_next = 6'd33;
                                    end
                                end
                            end
                          default: 
                            begin
                              if (fft2_LessThanEQ_32Ux32U_1U_4_79_out1) 
                                begin
                                  global_state1_next = 6'd26;
                                end 
                              else 
                                begin
                                  if (s_reg_11) 
                                    begin
                                      global_state1_next = 6'd27;
                                    end 
                                  else 
                                    begin
                                      if (fft2_LessThan_32Ux32U_1U_4_122_out1) 
                                        begin
                                          global_state1_next = 6'd05;
                                        end 
                                      else 
                                        begin
                                          global_state1_next = 6'd33;
                                        end
                                    end
                                end
                            end
                        endcase
                      end
                    default: 
                      begin
                        global_state1_next = 6'd12;
                      end
                  endcase
                end
            end
          6'd10: 
            begin
              if (s_reg_39) 
                begin
                  global_state1_next = global_state1 + 6'd01;
                end 
              else 
                begin
                  /* state59 */
                  case (s_reg_7) 
                    32'd0000000000: 
                      begin
                        case (s_reg_5) 
                          32'd0000000000: 
                            begin
                              if (s_reg_11) 
                                begin
                                  global_state1_next = 6'd27;
                                end 
                              else 
                                begin
                                  if (fft2_LessThan_32Ux32U_1U_4_122_out1) 
                                    begin
                                      global_state1_next = 6'd05;
                                    end 
                                  else 
                                    begin
                                      global_state1_next = 6'd33;
                                    end
                                end
                            end
                          default: 
                            begin
                              if (fft2_LessThanEQ_32Ux32U_1U_4_79_out1) 
                                begin
                                  global_state1_next = 6'd26;
                                end 
                              else 
                                begin
                                  if (s_reg_11) 
                                    begin
                                      global_state1_next = 6'd27;
                                    end 
                                  else 
                                    begin
                                      if (fft2_LessThan_32Ux32U_1U_4_122_out1) 
                                        begin
                                          global_state1_next = 6'd05;
                                        end 
                                      else 
                                        begin
                                          global_state1_next = 6'd33;
                                        end
                                    end
                                end
                            end
                        endcase
                      end
                    default: 
                      begin
                        global_state1_next = 6'd12;
                      end
                  endcase
                end
            end
          6'd11: 
            begin
              global_state1_next = 6'd06;
            end
          6'd12: 
            begin
              if (s_reg_45) 
                begin
                  if (fft2_LessThan_6Sx6S_1U_4_68_out1) 
                    begin
                      global_state1_next = global_state1 + 6'd01;
                    end 
                  else 
                    begin
                      global_state1_next = 6'd14;
                    end
                end 
              else 
                begin
                  global_state1_next = 6'd14;
                end
            end
          6'd13: 
            begin
              global_state1_next = 6'd12;
            end
          6'd16: 
            begin
              if (s_reg_57) 
                begin
                  global_state1_next = global_state1 + 6'd01;
                end 
              else 
                begin
                  if (s_reg_61) 
                    begin
                      global_state1_next = 6'd12;
                    end 
                  else 
                    begin
                      case (s_reg_5) 
                        32'd0000000000: 
                          begin
                            if (s_reg_11) 
                              begin
                                global_state1_next = 6'd27;
                              end 
                            else 
                              begin
                                if (fft2_LessThan_32Ux32U_1U_4_122_out1) 
                                  begin
                                    global_state1_next = 6'd05;
                                  end 
                                else 
                                  begin
                                    global_state1_next = 6'd33;
                                  end
                              end
                          end
                        default: 
                          begin
                            case (s_reg_7) 
                              32'd0000000000: 
                                begin
                                  if (fft2_LessThanEQ_32Ux32U_1U_4_79_out1) 
                                    begin
                                      global_state1_next = 6'd26;
                                    end 
                                  else 
                                    begin
                                      if (s_reg_11) 
                                        begin
                                          global_state1_next = 6'd27;
                                        end 
                                      else 
                                        begin
                                          if (fft2_LessThan_32Ux32U_1U_4_122_out1) 
                                            begin
                                              global_state1_next = 6'd05;
                                            end 
                                          else 
                                            begin
                                              global_state1_next = 6'd33;
                                            end
                                        end
                                    end
                                end
                              default: 
                                begin
                                  if (fft2_LessThan_17Sx33S_1U_4_85_out1) 
                                    begin
                                      global_state1_next = 6'd19;
                                    end 
                                  else 
                                    begin
                                      if (fft2_LessThan_32Ux32U_1U_4_87_out1) 
                                        begin
                                          global_state1_next = 6'd25;
                                        end 
                                      else 
                                        begin
                                          if (fft2_LessThanEQ_32Ux32U_1U_4_79_out1) 
                                            begin
                                              global_state1_next = 6'd26;
                                            end 
                                          else 
                                            begin
                                              if (s_reg_11) 
                                                begin
                                                  global_state1_next = 6'd27;
                                                end 
                                              else 
                                                begin
                                                  if (fft2_LessThan_32Ux32U_1U_4_122_out1) 
                                                    begin
                                                      global_state1_next = 6'd05;
                                                    end 
                                                  else 
                                                    begin
                                                      global_state1_next = 6'd33;
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            endcase
                          end
                      endcase
                    end
                end
            end
          6'd18: 
            begin
              if (s_reg_61) 
                begin
                  global_state1_next = 6'd12;
                end 
              else 
                begin
                  case (s_reg_5) 
                    32'd0000000000: 
                      begin
                        if (s_reg_11) 
                          begin
                            global_state1_next = 6'd27;
                          end 
                        else 
                          begin
                            if (fft2_LessThan_32Ux32U_1U_4_122_out1) 
                              begin
                                global_state1_next = 6'd05;
                              end 
                            else 
                              begin
                                global_state1_next = 6'd33;
                              end
                          end
                      end
                    default: 
                      begin
                        case (s_reg_7) 
                          32'd0000000000: 
                            begin
                              if (fft2_LessThanEQ_32Ux32U_1U_4_79_out1) 
                                begin
                                  global_state1_next = 6'd26;
                                end 
                              else 
                                begin
                                  if (s_reg_11) 
                                    begin
                                      global_state1_next = 6'd27;
                                    end 
                                  else 
                                    begin
                                      if (fft2_LessThan_32Ux32U_1U_4_122_out1) 
                                        begin
                                          global_state1_next = 6'd05;
                                        end 
                                      else 
                                        begin
                                          global_state1_next = 6'd33;
                                        end
                                    end
                                end
                            end
                          default: 
                            begin
                              if (fft2_LessThan_17Sx33S_1U_4_85_out1) 
                                begin
                                  global_state1_next = global_state1 + 6'd01;
                                end 
                              else 
                                begin
                                  if (fft2_LessThan_32Ux32U_1U_4_87_out1) 
                                    begin
                                      global_state1_next = 6'd25;
                                    end 
                                  else 
                                    begin
                                      if (fft2_LessThanEQ_32Ux32U_1U_4_79_out1) 
                                        begin
                                          global_state1_next = 6'd26;
                                        end 
                                      else 
                                        begin
                                          if (s_reg_11) 
                                            begin
                                              global_state1_next = 6'd27;
                                            end 
                                          else 
                                            begin
                                              if (fft2_LessThan_32Ux32U_1U_4_122_out1) 
                                                begin
                                                  global_state1_next = 6'd05;
                                                end 
                                              else 
                                                begin
                                                  global_state1_next = 6'd33;
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        endcase
                      end
                  endcase
                end
            end
          6'd24: 
            begin
              if (fft2_LessThan_32Sx33S_1U_4_116_out1) 
                begin
                  global_state1_next = 6'd19;
                end 
              else 
                begin
                  if (s_reg_75) 
                    begin
                      global_state1_next = global_state1 + 6'd01;
                    end 
                  else 
                    begin
                      if (s_reg_69) 
                        begin
                          global_state1_next = 6'd26;
                        end 
                      else 
                        begin
                          if (s_reg_11) 
                            begin
                              global_state1_next = 6'd27;
                            end 
                          else 
                            begin
                              if (fft2_LessThan_32Ux32U_1U_4_122_out1) 
                                begin
                                  global_state1_next = 6'd05;
                                end 
                              else 
                                begin
                                  global_state1_next = 6'd33;
                                end
                            end
                        end
                    end
                end
            end
          6'd25: 
            begin
              if (fft2_LessThan_17Sx33S_1U_4_85_out1) 
                begin
                  global_state1_next = 6'd19;
                end 
              else 
                begin
                  if (fft2_LessThan_32Ux32U_1U_4_87_out1) 
                    begin
                      global_state1_next = 6'd25;
                    end 
                  else 
                    begin
                      if (s_reg_69) 
                        begin
                          global_state1_next = global_state1 + 6'd01;
                        end 
                      else 
                        begin
                          if (s_reg_11) 
                            begin
                              global_state1_next = 6'd27;
                            end 
                          else 
                            begin
                              if (fft2_LessThan_32Ux32U_1U_4_122_out1) 
                                begin
                                  global_state1_next = 6'd05;
                                end 
                              else 
                                begin
                                  global_state1_next = 6'd33;
                                end
                            end
                        end
                    end
                end
            end
          6'd26: 
            begin
              case (s_reg_7) 
                32'd0000000000: 
                  begin
                    if (fft2_LessThanEQ_32Ux32U_1U_4_79_out1) 
                      begin
                        global_state1_next = 6'd26;
                      end 
                    else 
                      begin
                        if (s_reg_11) 
                          begin
                            global_state1_next = global_state1 + 6'd01;
                          end 
                        else 
                          begin
                            if (fft2_LessThan_32Ux32U_1U_4_122_out1) 
                              begin
                                global_state1_next = 6'd05;
                              end 
                            else 
                              begin
                                global_state1_next = 6'd33;
                              end
                          end
                      end
                  end
                default: 
                  begin
                    if (fft2_LessThan_17Sx33S_1U_4_85_out1) 
                      begin
                        global_state1_next = 6'd19;
                      end 
                    else 
                      begin
                        if (fft2_LessThan_32Ux32U_1U_4_87_out1) 
                          begin
                            global_state1_next = 6'd25;
                          end 
                        else 
                          begin
                            if (fft2_LessThanEQ_32Ux32U_1U_4_79_out1) 
                              begin
                                global_state1_next = 6'd26;
                              end 
                            else 
                              begin
                                if (s_reg_11) 
                                  begin
                                    global_state1_next = global_state1 + 6'd01;
                                  end 
                                else 
                                  begin
                                    if (fft2_LessThan_32Ux32U_1U_4_122_out1) 
                                      begin
                                        global_state1_next = 6'd05;
                                      end 
                                    else 
                                      begin
                                        global_state1_next = 6'd33;
                                      end
                                  end
                              end
                          end
                      end
                  end
              endcase
            end
          6'd32: 
            begin
              if (s_reg_110) 
                begin
                  global_state1_next = 6'd27;
                end 
              else 
                begin
                  if (fft2_LessThan_32Ux32U_1U_4_122_out1) 
                    begin
                      global_state1_next = 6'd05;
                    end 
                  else 
                    begin
                      global_state1_next = global_state1 + 6'd01;
                    end
                end
            end
          6'd33: 
            begin
              if (output_ready_channel_valid) 
                begin
                  if (s_reg_20) 
                    begin
                      global_state1_next = 6'd04;
                    end 
                  else 
                    begin
                      global_state1_next = global_state1 + 6'd01;
                    end
                end 
              else 
                begin
                  global_state1_next = 6'd33;
                end
            end
          6'd34: 
            begin
              global_state1_next = 6'd34;
            end
          default: 
            begin
              global_state1_next = global_state1 + 6'd01;
            end
        endcase
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl9
        if (rst == 1'b0) 
          begin
            gs_ctrl9 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd33: 
                begin
                  gs_ctrl9 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl9 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl10
        if (rst == 1'b0) 
          begin
            gs_ctrl10 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd33: 
                begin
                  gs_ctrl10 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl10 <= 1'b0;
                end
            endcase
          end
      end
    
// pragma translate_off
    
always @(posedge clk)
      begin : drive_gs_ctrl11
        if (rst == 1'b0) 
          begin
            gs_ctrl11 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd33: 
                begin
                  gs_ctrl11 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl11 <= 1'b0;
                end
            endcase
          end
      end
// pragma translate_on
    
// pragma translate_off
    
always @(posedge clk)
      begin : drive_gs_ctrl12
        if (rst == 1'b0) 
          begin
            gs_ctrl12 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd33: 
                begin
                  gs_ctrl12 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl12 <= 1'b0;
                end
            endcase
          end
      end
// pragma translate_on
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl13
        if (rst == 1'b0) 
          begin
            gs_ctrl13 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd33: 
                begin
                  gs_ctrl13 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl13 <= 1'b0;
                end
            endcase
          end
      end
    
// pragma translate_off
    
always @(posedge clk)
      begin : drive_gs_ctrl14
        if (rst == 1'b0) 
          begin
            gs_ctrl14 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd33: 
                begin
                  gs_ctrl14 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl14 <= 1'b0;
                end
            endcase
          end
      end
// pragma translate_on
    
// pragma translate_off
    
always @(posedge clk)
      begin : drive_gs_ctrl15
        if (rst == 1'b0) 
          begin
            gs_ctrl15 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd33: 
                begin
                  gs_ctrl15 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl15 <= 1'b0;
                end
            endcase
          end
      end
// pragma translate_on
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl16
        if (rst == 1'b0) 
          begin
            gs_ctrl16 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd05, 6'd10, 6'd16, 6'd18, 6'd24, 6'd25, 6'd26, 6'd32: 
                begin
                  gs_ctrl16 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl16 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl17
        if (rst == 1'b0) 
          begin
            gs_ctrl17 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd05, 6'd10, 6'd16, 6'd18, 6'd24, 6'd25, 6'd26, 6'd32: 
                begin
                  gs_ctrl17 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl17 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl18
        if (rst == 1'b0) 
          begin
            gs_ctrl18 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd11: 
                begin
                  gs_ctrl18 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl18 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl19
        if (rst == 1'b0) 
          begin
            gs_ctrl19 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd11: 
                begin
                  gs_ctrl19 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl19 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_3bx8i8c
    // resource: regr_ac_3
    always @(posedge clk)
      begin : drive_gs_ctrl20
        if (rst == 1'b0) 
          begin
            gs_ctrl20 <= 3'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd07: 
                begin
                  gs_ctrl20 <= 3'd1;
                end
              6'd12: 
                begin
                  gs_ctrl20 <= 3'd2;
                end
              6'd15: 
                begin
                  gs_ctrl20 <= 3'd3;
                end
              6'd19: 
                begin
                  gs_ctrl20 <= 3'd4;
                end
              6'd21: 
                begin
                  gs_ctrl20 <= 3'd5;
                end
              6'd27: 
                begin
                  gs_ctrl20 <= 3'd6;
                end
              6'd29: 
                begin
                  gs_ctrl20 <= 3'd7;
                end
              default: 
                begin
                  gs_ctrl20 <= 3'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx4i4c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl21
        if (rst == 1'b0) 
          begin
            gs_ctrl21 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd05: 
                begin
                  gs_ctrl21 <= 2'd1;
                end
              6'd07, 6'd11, 6'd15, 6'd19, 6'd21, 6'd27, 6'd29: 
                begin
                  gs_ctrl21 <= 2'd2;
                end
              6'd12: 
                begin
                  gs_ctrl21 <= 2'd3;
                end
              default: 
                begin
                  gs_ctrl21 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_3bx8i8c
    // resource: regr_ac_3
    always @(posedge clk)
      begin : drive_gs_ctrl22
        if (rst == 1'b0) 
          begin
            gs_ctrl22 <= 3'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd07: 
                begin
                  gs_ctrl22 <= 3'd1;
                end
              6'd12: 
                begin
                  gs_ctrl22 <= 3'd2;
                end
              6'd15: 
                begin
                  gs_ctrl22 <= 3'd3;
                end
              6'd19: 
                begin
                  gs_ctrl22 <= 3'd4;
                end
              6'd21: 
                begin
                  gs_ctrl22 <= 3'd5;
                end
              6'd27: 
                begin
                  gs_ctrl22 <= 3'd6;
                end
              6'd29: 
                begin
                  gs_ctrl22 <= 3'd7;
                end
              default: 
                begin
                  gs_ctrl22 <= 3'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx4i4c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl23
        if (rst == 1'b0) 
          begin
            gs_ctrl23 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd05: 
                begin
                  gs_ctrl23 <= 2'd1;
                end
              6'd07, 6'd11, 6'd15, 6'd19, 6'd21, 6'd27, 6'd29: 
                begin
                  gs_ctrl23 <= 2'd2;
                end
              6'd12: 
                begin
                  gs_ctrl23 <= 2'd3;
                end
              default: 
                begin
                  gs_ctrl23 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_3bx8i8c
    // resource: regr_ac_3
    always @(posedge clk)
      begin : drive_gs_ctrl24
        if (rst == 1'b0) 
          begin
            gs_ctrl24 <= 3'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd10: 
                begin
                  gs_ctrl24 <= 3'd1;
                end
              6'd17: 
                begin
                  gs_ctrl24 <= 3'd2;
                end
              6'd18: 
                begin
                  gs_ctrl24 <= 3'd3;
                end
              6'd23: 
                begin
                  gs_ctrl24 <= 3'd4;
                end
              6'd24: 
                begin
                  gs_ctrl24 <= 3'd5;
                end
              6'd31: 
                begin
                  gs_ctrl24 <= 3'd6;
                end
              6'd32: 
                begin
                  gs_ctrl24 <= 3'd7;
                end
              default: 
                begin
                  gs_ctrl24 <= 3'd0;
                end
            endcase
          end
      end
    
    // resource: mux_3bx8i8c
    // resource: regr_ac_3
    always @(posedge clk)
      begin : drive_gs_ctrl25
        if (rst == 1'b0) 
          begin
            gs_ctrl25 <= 3'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd10: 
                begin
                  gs_ctrl25 <= 3'd1;
                end
              6'd17: 
                begin
                  gs_ctrl25 <= 3'd2;
                end
              6'd18: 
                begin
                  gs_ctrl25 <= 3'd3;
                end
              6'd23: 
                begin
                  gs_ctrl25 <= 3'd4;
                end
              6'd24: 
                begin
                  gs_ctrl25 <= 3'd5;
                end
              6'd31: 
                begin
                  gs_ctrl25 <= 3'd6;
                end
              6'd32: 
                begin
                  gs_ctrl25 <= 3'd7;
                end
              default: 
                begin
                  gs_ctrl25 <= 3'd0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl26
        if (rst == 1'b0) 
          begin
            gs_ctrl26 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd09, 6'd10, 6'd17, 6'd18, 6'd23, 6'd24, 6'd31, 6'd32: 
                begin
                  gs_ctrl26 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl26 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl27
        if (rst == 1'b0) 
          begin
            gs_ctrl27 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd09, 6'd10, 6'd17, 6'd18, 6'd23, 6'd24, 6'd31, 6'd32: 
                begin
                  gs_ctrl27 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl27 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl28
        if (rst == 1'b0) 
          begin
            gs_ctrl28 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd09, 6'd10, 6'd17, 6'd18, 6'd23, 6'd24, 6'd31, 6'd32: 
                begin
                  gs_ctrl28 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl28 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_3bx8i8c
    // resource: regr_ac_3
    always @(posedge clk)
      begin : drive_gs_ctrl29
        if (rst == 1'b0) 
          begin
            gs_ctrl29 <= 3'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd10: 
                begin
                  gs_ctrl29 <= 3'd1;
                end
              6'd17: 
                begin
                  gs_ctrl29 <= 3'd2;
                end
              6'd18: 
                begin
                  gs_ctrl29 <= 3'd3;
                end
              6'd23: 
                begin
                  gs_ctrl29 <= 3'd4;
                end
              6'd24: 
                begin
                  gs_ctrl29 <= 3'd5;
                end
              6'd31: 
                begin
                  gs_ctrl29 <= 3'd6;
                end
              6'd32: 
                begin
                  gs_ctrl29 <= 3'd7;
                end
              default: 
                begin
                  gs_ctrl29 <= 3'd0;
                end
            endcase
          end
      end
    
    // resource: mux_3bx8i8c
    // resource: regr_ac_3
    always @(posedge clk)
      begin : drive_gs_ctrl30
        if (rst == 1'b0) 
          begin
            gs_ctrl30 <= 3'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd10: 
                begin
                  gs_ctrl30 <= 3'd1;
                end
              6'd17: 
                begin
                  gs_ctrl30 <= 3'd2;
                end
              6'd18: 
                begin
                  gs_ctrl30 <= 3'd3;
                end
              6'd23: 
                begin
                  gs_ctrl30 <= 3'd4;
                end
              6'd24: 
                begin
                  gs_ctrl30 <= 3'd5;
                end
              6'd31: 
                begin
                  gs_ctrl30 <= 3'd6;
                end
              6'd32: 
                begin
                  gs_ctrl30 <= 3'd7;
                end
              default: 
                begin
                  gs_ctrl30 <= 3'd0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl31
        if (rst == 1'b0) 
          begin
            gs_ctrl31 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd09, 6'd10, 6'd17, 6'd18, 6'd23, 6'd24, 6'd31, 6'd32: 
                begin
                  gs_ctrl31 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl31 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl32
        if (rst == 1'b0) 
          begin
            gs_ctrl32 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd09, 6'd10, 6'd17, 6'd18, 6'd23, 6'd24, 6'd31, 6'd32: 
                begin
                  gs_ctrl32 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl32 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl33
        if (rst == 1'b0) 
          begin
            gs_ctrl33 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd09, 6'd10, 6'd17, 6'd18, 6'd23, 6'd24, 6'd31, 6'd32: 
                begin
                  gs_ctrl33 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl33 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl34
        if (rst == 1'b0) 
          begin
            gs_ctrl34 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl34 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl34 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl35
        if (rst == 1'b0) 
          begin
            gs_ctrl35 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl35 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl35 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl35 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl36
        if (rst == 1'b0) 
          begin
            gs_ctrl36 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl36 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl36 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl36 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl37
        if (rst == 1'b0) 
          begin
            gs_ctrl37 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl37 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl37 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl37 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl38
        if (rst == 1'b0) 
          begin
            gs_ctrl38 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl38 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl38 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl38 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl39
        if (rst == 1'b0) 
          begin
            gs_ctrl39 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl39 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl39 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl39 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl40
        if (rst == 1'b0) 
          begin
            gs_ctrl40 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl40 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl40 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl40 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl41
        if (rst == 1'b0) 
          begin
            gs_ctrl41 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl41 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl41 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl41 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl42
        if (rst == 1'b0) 
          begin
            gs_ctrl42 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl42 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl42 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl42 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl43
        if (rst == 1'b0) 
          begin
            gs_ctrl43 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl43 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl43 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl43 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl44
        if (rst == 1'b0) 
          begin
            gs_ctrl44 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl44 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl44 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl44 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl45
        if (rst == 1'b0) 
          begin
            gs_ctrl45 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl45 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl45 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl45 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl46
        if (rst == 1'b0) 
          begin
            gs_ctrl46 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl46 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl46 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl47
        if (rst == 1'b0) 
          begin
            gs_ctrl47 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl47 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl47 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl47 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl48
        if (rst == 1'b0) 
          begin
            gs_ctrl48 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl48 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl48 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl48 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl49
        if (rst == 1'b0) 
          begin
            gs_ctrl49 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl49 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl49 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl49 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl50
        if (rst == 1'b0) 
          begin
            gs_ctrl50 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl50 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl50 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl50 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl51
        if (rst == 1'b0) 
          begin
            gs_ctrl51 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl51 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl51 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl51 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl52
        if (rst == 1'b0) 
          begin
            gs_ctrl52 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl52 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl52 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl52 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl53
        if (rst == 1'b0) 
          begin
            gs_ctrl53 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl53 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl53 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl53 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl54
        if (rst == 1'b0) 
          begin
            gs_ctrl54 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl54 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl54 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl54 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl55
        if (rst == 1'b0) 
          begin
            gs_ctrl55 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl55 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl55 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl55 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl56
        if (rst == 1'b0) 
          begin
            gs_ctrl56 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd13: 
                begin
                  gs_ctrl56 <= 2'd1;
                end
              6'd16, 6'd18: 
                begin
                  gs_ctrl56 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl56 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl57
        if (rst == 1'b0) 
          begin
            gs_ctrl57 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd26: 
                begin
                  gs_ctrl57 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl57 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl58
        if (rst == 1'b0) 
          begin
            gs_ctrl58 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd26: 
                begin
                  gs_ctrl58 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl58 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl59
        if (rst == 1'b0) 
          begin
            gs_ctrl59 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd26: 
                begin
                  gs_ctrl59 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl59 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl60
        if (rst == 1'b0) 
          begin
            gs_ctrl60 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd26: 
                begin
                  gs_ctrl60 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl60 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl61
        if (rst == 1'b0) 
          begin
            gs_ctrl61 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd26: 
                begin
                  gs_ctrl61 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl61 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl62
        if (rst == 1'b0) 
          begin
            gs_ctrl62 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd25: 
                begin
                  gs_ctrl62 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl62 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl63
        if (rst == 1'b0) 
          begin
            gs_ctrl63 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd25: 
                begin
                  gs_ctrl63 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl63 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl64
        if (rst == 1'b0) 
          begin
            gs_ctrl64 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd25: 
                begin
                  gs_ctrl64 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl64 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl65
        if (rst == 1'b0) 
          begin
            gs_ctrl65 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd25: 
                begin
                  gs_ctrl65 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl65 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl66
        if (rst == 1'b0) 
          begin
            gs_ctrl66 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd25: 
                begin
                  gs_ctrl66 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl66 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl67
        if (rst == 1'b0) 
          begin
            gs_ctrl67 <= 2'd0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd24: 
                begin
                  gs_ctrl67 <= 2'd1;
                end
              6'd25: 
                begin
                  gs_ctrl67 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl67 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl68
        if (rst == 1'b0) 
          begin
            gs_ctrl68 <= 1'b0;
          end 
        else 
          begin
            case (global_state1_next) 
              6'd24: 
                begin
                  gs_ctrl68 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl68 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_64bx2i0c
    // resource: regr_en_ac_64
    always @(posedge clk)
      begin : drive_dma_write_chnl_data
        if (rst == 1'b0) 
          begin
            dma_write_chnl_data <= 64'd00000000000000000000;
          end 
        else 
          begin
            case (global_state2) 
              4'd06: 
                begin
                  if (fft2_Or_1Ux1U_1U_1_164_out1) 
                    begin
                      dma_write_chnl_data <= {A0_shared_Q2_wire, A0_shared_Q3_wire};
                    end 
                end
              4'd07: 
                begin
                  if (fft2_Or_1Ux1U_1U_1_164_out1) 
                    begin
                      dma_write_chnl_data <= s_reg_166;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_dma_write_ctrl_data_size_slice
        if (rst == 1'b0) 
          begin
            dma_write_ctrl_data_size_slice <= 1'b0;
          end 
        else 
          begin
            case (global_state2) 
              4'd04: 
                begin
                  if (output_ready_channel_ready) 
                    begin
                      dma_write_ctrl_data_size_slice <= 1'b1;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_31
    always @(posedge clk)
      begin : drive_dma_write_ctrl_data_length_slice
        if (rst == 1'b0) 
          begin
            dma_write_ctrl_data_length_slice <= 31'd0000000000;
          end 
        else 
          begin
            case (global_state2) 
              4'd04: 
                begin
                  if (output_ready_channel_ready) 
                    begin
                      dma_write_ctrl_data_length_slice <= fft2_N_Mux_32_2_0_4_172_out1[31:1];
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_31
    always @(posedge clk)
      begin : drive_dma_write_ctrl_data_index_slice
        if (rst == 1'b0) 
          begin
            dma_write_ctrl_data_index_slice <= 31'd0000000000;
          end 
        else 
          begin
            case (global_state2) 
              4'd04: 
                begin
                  if (output_ready_channel_ready) 
                    begin
                      dma_write_ctrl_data_index_slice <= s_reg_147[31:1];
                    end 
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_dma_write_ctrl_valid
        if (rst == 1'b0) 
          begin
            dma_write_ctrl_valid <= 1'd0;
          end 
        else 
          begin
            case (global_state2) 
              4'd04: 
                begin
                  if (output_ready_channel_ready) 
                    begin
                      dma_write_ctrl_valid <= 1'd1;
                    end 
                end
              4'd05: 
                begin
                  if (dma_write_ctrl_ready) 
                    begin
                      dma_write_ctrl_valid <= 1'd0;
                    end 
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_acc_done
        if (rst == 1'b0) 
          begin
            acc_done <= 1'd0;
          end 
        else 
          begin
            case (global_state2) 
              4'd03: 
                begin
                  if (fft2_GreaterThan_32Sx17S_1U_1_170_out1) 
                    begin
                    end 
                  else 
                    begin
                      acc_done <= 1'd1;
                    end
                end
              4'd08: 
                begin
                  if (store_to_load_channel_ready && !fft2_GreaterThan_32Sx17S_1U_4_178_out1) 
                    begin
                      acc_done <= 1'd1;
                    end 
                end
              4'd09: 
                begin
                  acc_done <= 1'd0;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_dma_write_chnl_set_valid_curr
        if (rst == 1'b0) 
          begin
            dma_write_chnl_set_valid_curr <= 1'd0;
          end 
        else 
          begin
            case (global_state2) 
              4'd06, 4'd07: 
                begin
                  if (fft2_Or_1Ux1U_1U_1_164_out1) 
                    begin
                      dma_write_chnl_set_valid_curr <= fft2_Not_1U_1U_4_177_out1;
                    end 
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_output_ready_channel_valid
        if (rst == 1'b0) 
          begin
            output_ready_channel_valid <= 1'd0;
          end 
        else 
          begin
            case (global_state2) 
              4'd03: 
                begin
                  if (fft2_GreaterThan_32Sx17S_1U_1_170_out1) 
                    begin
                      output_ready_channel_valid <= 1'd1;
                    end 
                end
              4'd04: 
                begin
                  if (output_ready_channel_ready) 
                    begin
                      output_ready_channel_valid <= 1'd0;
                    end 
                end
              4'd08: 
                begin
                  if (store_to_load_channel_ready && fft2_GreaterThan_32Sx17S_1U_4_178_out1) 
                    begin
                      output_ready_channel_valid <= 1'd1;
                    end 
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_store_to_load_channel_valid
        if (rst == 1'b0) 
          begin
            store_to_load_channel_valid <= 1'd0;
          end 
        else 
          begin
            case (global_state2) 
              4'd05: 
                begin
                  if (dma_write_ctrl_ready && s_reg_158 == 32'd0000000000) 
                    begin
                      store_to_load_channel_valid <= 1'd1;
                    end 
                end
              4'd06, 4'd07: 
                begin
                  if (fft2_Or_1Ux1U_1U_1_164_out1 && !fft2_LessThan_16Ux32U_1U_4_176_out1) 
                    begin
                      store_to_load_channel_valid <= 1'd1;
                    end 
                end
              4'd08: 
                begin
                  if (store_to_load_channel_ready) 
                    begin
                      store_to_load_channel_valid <= 1'd0;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_147
        if (rst == 1'b0) 
          begin
            s_reg_147 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state2) 
              4'd08: 
                begin
                  if (store_to_load_channel_ready) 
                    begin
                      s_reg_147 <= fft2_Add_32Ux32U_32U_4_179_out1;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_ac_5
    always @(posedge clk)
      begin : drive_s_reg_153
        if (rst == 1'b0) 
          begin
            s_reg_153 <= 5'd00;
          end 
        else 
          begin
            s_reg_153 <= conf_info_logn_samples[4:0];
          end
      end
    
    // resource: regr_ac_31
    always @(posedge clk)
      begin : drive_s_reg_154
        if (rst == 1'b0) 
          begin
            s_reg_154 <= 31'd0000000000;
          end 
        else 
          begin
            s_reg_154 <= conf_info_num_ffts[30:0];
          end
      end
    
    // resource: mux_32bx2i0c
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_157
        if (rst == 1'b0) 
          begin
            s_reg_157 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state2) 
              4'd03: 
                begin
                  s_reg_157 <= fft2_Add_32Sx1U_32S_1_169_out1;
                end
              4'd08: 
                begin
                  s_reg_157 <= s_reg_159;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_158
        if (rst == 1'b0) 
          begin
            s_reg_158 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state2) 
              4'd04: 
                begin
                  s_reg_158 <= fft2_N_Mux_32_2_0_4_172_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_32
    always @(posedge clk)
      begin : drive_s_reg_159
        if (rst == 1'b0) 
          begin
            s_reg_159 <= 32'd0000000000;
          end 
        else 
          begin
            case (global_state2) 
              4'd04: 
                begin
                  s_reg_159 <= fft2_Sub_32Sx16U_32S_4_173_out1;
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_16
    always @(posedge clk)
      begin : drive_s_reg_164
        if (rst == 1'b0) 
          begin
            s_reg_164 <= 16'd00000;
          end 
        else 
          begin
            case (global_state2) 
              4'd05: 
                begin
                  if (s_reg_158 != 32'd0000000000) 
                    begin
                      s_reg_164 <= fft2_Add_16Ux2U_16U_4_174_out1;
                    end 
                end
              4'd06, 4'd07: 
                begin
                  if (fft2_Or_1Ux1U_1U_1_164_out1) 
                    begin
                      s_reg_164 <= fft2_Add_16Ux2U_16U_4_174_out1;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_en_ac_64
    always @(posedge clk)
      begin : drive_s_reg_166
        if (rst == 1'b0) 
          begin
            s_reg_166 <= 64'd00000000000000000000;
          end 
        else 
          begin
            case (global_state2) 
              4'd06: 
                begin
                  s_reg_166 <= {A0_shared_Q2_wire, A0_shared_Q3_wire};
                end
            endcase
          end
      end
    
    // resource: fft2_LeftShift_1Ux5U_31S_1  instance: fft2_LeftShift_1Ux5U_31S_1_165
    assign fft2_LeftShift_1Ux5U_31S_1_165_out1 = 31'd0000000001 << s_reg_153;
    
    // instance: drive_fft2_Mul_31Ux31U_31U_4_166_in2
    assign fft2_Mul_31Ux31U_31U_4_166_in2 = s_reg_154;
    
    // instance: drive_fft2_Mul_31Ux31U_31U_4_166_in1
    assign fft2_Mul_31Ux31U_31U_4_166_in1 = fft2_LeftShift_1Ux5U_31S_1_165_out1;
    
    // instance: drive_fft2_Sub_32Sx1U_32S_1_167_in2
    assign fft2_Sub_32Sx1U_32S_1_167_in2 = {fft2_Mul_31Ux31U_31U_4_166_out1, 1'b0};
    
    // resource: fft2_Sub_32Sx1U_32S_1  instance: fft2_Sub_32Sx1U_32S_1_167
    assign fft2_Sub_32Sx1U_32S_1_167_out1 = fft2_Sub_32Sx1U_32S_1_167_in2 - 32'd0000000001;
    
    // resource: fft2_Or_32Sx1U_32S_1  instance: fft2_Or_32Sx1U_32S_1_168
    assign fft2_Or_32Sx1U_32S_1_168_out1 = fft2_Sub_32Sx1U_32S_1_167_out1 | 32'd0000000001;
    
    // resource: fft2_Add_32Sx1U_32S_1  instance: fft2_Add_32Sx1U_32S_1_169
    assign fft2_Add_32Sx1U_32S_1_169_out1 = fft2_Or_32Sx1U_32S_1_168_out1 + 32'd0000000001;
    
    // resource: fft2_GreaterThan_32Sx17S_1U_1  instance: fft2_GreaterThan_32Sx17S_1U_1_170
    assign fft2_GreaterThan_32Sx17S_1U_1_170_out1 = fft2_Add_32Sx1U_32S_1_169_out1[31] ^ fft2_Add_32Sx1U_32S_1_169_out1 > 32'd0000000000;
    
    // resource: fft2_GreaterThan_32Sx17S_1U_4  instance: fft2_GreaterThan_32Sx17S_1U_4_171
    assign fft2_GreaterThan_32Sx17S_1U_4_171_out1 = s_reg_157[31] ^ s_reg_157 > 32'd0000032768;
    
    // resource: fft2_N_Mux_32_2_0_4
    always @(s_reg_157 or fft2_GreaterThan_32Sx17S_1U_4_171_out1)
      begin : fft2_N_Mux_32_2_0_4_172
        if (fft2_GreaterThan_32Sx17S_1U_4_171_out1) 
          begin
            fft2_N_Mux_32_2_0_4_172_out1 = 32'd0000032768;
          end 
        else 
          begin
            fft2_N_Mux_32_2_0_4_172_out1 = s_reg_157;
          end
      end
    
    // resource: fft2_Sub_32Sx16U_32S_4  instance: fft2_Sub_32Sx16U_32S_4_173
    assign fft2_Sub_32Sx16U_32S_4_173_out1 = s_reg_157 - 32'd0000032768;
    
    // resource: mux_16bx2i1c
    always @(s_reg_164 or gs_ctrl69)
      begin : drive_fft2_Add_16Ux2U_16U_4_174_in2
        if (gs_ctrl69) 
          begin
            fft2_Add_16Ux2U_16U_4_174_in2 = s_reg_164;
          end 
        else 
          begin
            fft2_Add_16Ux2U_16U_4_174_in2 = 16'd00000;
          end
      end
    
    // resource: fft2_Add_16Ux2U_16U_4  instance: fft2_Add_16Ux2U_16U_4_174
    assign fft2_Add_16Ux2U_16U_4_174_out1 = fft2_Add_16Ux2U_16U_4_174_in2 + 16'd00002;
    
    // resource: mux_15bx2i1c
    always @(s_reg_164[14:0] or gs_ctrl70)
      begin : drive_fft2_Add_15Ux1U_15U_4_175_in2
        if (gs_ctrl70) 
          begin
            fft2_Add_15Ux1U_15U_4_175_in2 = s_reg_164[14:0];
          end 
        else 
          begin
            fft2_Add_15Ux1U_15U_4_175_in2 = 15'd00000;
          end
      end
    
    // resource: fft2_Add_15Ux1U_15U_4  instance: fft2_Add_15Ux1U_15U_4_175
    assign fft2_Add_15Ux1U_15U_4_175_out1 = fft2_Add_15Ux1U_15U_4_175_in2 + 15'd00001;
    
    // resource: mux_15bx2i1c
    always @(s_reg_164[14:0] or gs_ctrl71)
      begin : drive_A0_store_output_A3
        if (gs_ctrl71) 
          begin
            A0_store_output_A3 = s_reg_164[14:0];
          end 
        else 
          begin
            A0_store_output_A3 = 15'd00000;
          end
      end
    
    // resource: mux_1bx2i2c
    always @(dma_write_ctrl_ready or fft2_Or_1Ux1U_1U_1_164_out1 or s_reg_158 or fft2_LessThan_16Ux32U_1U_4_176_out1 or gs_ctrl72)
      begin : drive_A0_store_output_CE3
        case (gs_ctrl72) 
          2'd1: 
            begin
              if (dma_write_ctrl_ready && s_reg_158 != 32'd0000000000) 
                begin
                  A0_store_output_CE3 = 1'd1;
                end 
              else 
                begin
                  A0_store_output_CE3 = 1'd0;
                end
            end
          2'd2: 
            begin
              if (fft2_Or_1Ux1U_1U_1_164_out1 && fft2_LessThan_16Ux32U_1U_4_176_out1) 
                begin
                  A0_store_output_CE3 = 1'd1;
                end 
              else 
                begin
                  A0_store_output_CE3 = 1'd0;
                end
            end
          default: 
            begin
              A0_store_output_CE3 = 1'd0;
            end
        endcase
      end
    
    // instance: drive_A0_store_output_A2
    assign A0_store_output_A2 = fft2_Add_15Ux1U_15U_4_175_out1;
    
    // resource: mux_1bx2i2c
    always @(dma_write_ctrl_ready or fft2_Or_1Ux1U_1U_1_164_out1 or s_reg_158 or fft2_LessThan_16Ux32U_1U_4_176_out1 or gs_ctrl73)
      begin : drive_A0_store_output_CE2
        case (gs_ctrl73) 
          2'd1: 
            begin
              if (dma_write_ctrl_ready && s_reg_158 != 32'd0000000000) 
                begin
                  A0_store_output_CE2 = 1'd1;
                end 
              else 
                begin
                  A0_store_output_CE2 = 1'd0;
                end
            end
          2'd2: 
            begin
              if (fft2_Or_1Ux1U_1U_1_164_out1 && fft2_LessThan_16Ux32U_1U_4_176_out1) 
                begin
                  A0_store_output_CE2 = 1'd1;
                end 
              else 
                begin
                  A0_store_output_CE2 = 1'd0;
                end
            end
          default: 
            begin
              A0_store_output_CE2 = 1'd0;
            end
        endcase
      end
    
    // resource: fft2_LessThan_16Ux32U_1U_4  instance: fft2_LessThan_16Ux32U_1U_4_176
    assign fft2_LessThan_16Ux32U_1U_4_176_out1 = {16'b0000000000000000, s_reg_164} < s_reg_158;
    
    // resource: fft2_Not_1U_1U_4  instance: fft2_Not_1U_1U_4_177
    assign fft2_Not_1U_1U_4_177_out1 = !dma_write_chnl_set_valid_curr;
    
    // resource: fft2_GreaterThan_32Sx17S_1U_4  instance: fft2_GreaterThan_32Sx17S_1U_4_178
    assign fft2_GreaterThan_32Sx17S_1U_4_178_out1 = s_reg_159[31] ^ s_reg_159 > 32'd0000000000;
    
    // resource: fft2_Add_32Ux32U_32U_4  instance: fft2_Add_32Ux32U_32U_4_179
    assign fft2_Add_32Ux32U_32U_4_179_out1 = s_reg_147 + s_reg_158;
    
    // resource: regr_ac_4
    always @(posedge clk)
      begin : drive_global_state2
        if (rst == 1'b0) 
          begin
            global_state2 <= 4'd00;
          end 
        else 
          begin
            global_state2 <= global_state2_next;
          end
      end
    
// pragma translate_off
    
always @(posedge clk)
      begin : drive_printf_8
        if (rst == 1'b0) 
          begin
          end 
        else 
          begin
            case (global_state2) 
              4'd03: 
                begin
                  if (fft2_GreaterThan_32Sx17S_1U_1_170_out1) 
                    begin
                      // source loc: ../src/fft2.cpp:194
                      $write( "STORE hit the store-compute handshake...\n" );
                    end 
                end
              4'd08: 
                begin
                  if (store_to_load_channel_ready && fft2_GreaterThan_32Sx17S_1U_4_178_out1) 
                    begin
                      // source loc: ../src/fft2.cpp:194
                      $write( "STORE hit the store-compute handshake...\n" );
                    end 
                end
            endcase
          end
      end
// pragma translate_on
    
// pragma translate_off
    
always @(posedge clk)
      begin : drive_printf_9
        if (rst == 1'b0) 
          begin
          end 
        else 
          begin
            case (global_state2) 
              4'd04: 
                begin
                  if (output_ready_channel_ready) 
                    begin
                      // source loc: ../src/fft2.cpp:203
                      $write( "STORE DMA INFO : rem %u : off = %u , len = %u\n", s_reg_157, s_reg_147[31:1], fft2_N_Mux_32_2_0_4_172_out1[31:1] );
                    end 
                end
            endcase
          end
      end
// pragma translate_on
    
    // resource: mux_4bx10i9c
    always @(dma_write_ctrl_ready or cfg_done or output_ready_channel_ready or store_to_load_channel_ready or fft2_Or_1Ux1U_1U_1_164_out1 or s_reg_158 or fft2_GreaterThan_32Sx17S_1U_1_170_out1 or fft2_LessThan_16Ux32U_1U_4_176_out1 or fft2_GreaterThan_32Sx17S_1U_4_178_out1 or global_state2)
      begin : drive_global_state2_next
        case (global_state2) 
          4'd00, 4'd01: 
            begin
              if (cfg_done) 
                begin
                  global_state2_next = 4'd02;
                end 
              else 
                begin
                  global_state2_next = 4'd01;
                end
            end
          4'd03: 
            begin
              if (fft2_GreaterThan_32Sx17S_1U_1_170_out1) 
                begin
                  global_state2_next = global_state2 + 4'd01;
                end 
              else 
                begin
                  global_state2_next = 4'd09;
                end
            end
          4'd04: 
            begin
              if (output_ready_channel_ready) 
                begin
                  global_state2_next = global_state2 + 4'd01;
                end 
              else 
                begin
                  global_state2_next = 4'd04;
                end
            end
          4'd05: 
            begin
              if (dma_write_ctrl_ready) 
                begin
                  case (s_reg_158) 
                    32'd0000000000: 
                      begin
                        global_state2_next = 4'd08;
                      end
                    default: 
                      begin
                        global_state2_next = global_state2 + 4'd01;
                      end
                  endcase
                end 
              else 
                begin
                  global_state2_next = 4'd05;
                end
            end
          4'd06, 4'd07: 
            begin
              if (fft2_Or_1Ux1U_1U_1_164_out1) 
                begin
                  if (fft2_LessThan_16Ux32U_1U_4_176_out1) 
                    begin
                      global_state2_next = 4'd06;
                    end 
                  else 
                    begin
                      global_state2_next = 4'd08;
                    end
                end 
              else 
                begin
                  global_state2_next = 4'd07;
                end
            end
          4'd08: 
            begin
              if (store_to_load_channel_ready) 
                begin
                  if (fft2_GreaterThan_32Sx17S_1U_4_178_out1) 
                    begin
                      global_state2_next = 4'd04;
                    end 
                  else 
                    begin
                      global_state2_next = global_state2 + 4'd01;
                    end
                end 
              else 
                begin
                  global_state2_next = 4'd08;
                end
            end
          4'd09, 4'd10: 
            begin
              global_state2_next = 4'd10;
            end
          default: 
            begin
              global_state2_next = global_state2 + 4'd01;
            end
        endcase
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl69
        if (rst == 1'b0) 
          begin
            gs_ctrl69 <= 1'b0;
          end 
        else 
          begin
            case (global_state2_next) 
              4'd06, 4'd07: 
                begin
                  gs_ctrl69 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl69 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl70
        if (rst == 1'b0) 
          begin
            gs_ctrl70 <= 1'b0;
          end 
        else 
          begin
            case (global_state2_next) 
              4'd06, 4'd07: 
                begin
                  gs_ctrl70 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl70 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_ac_1
    always @(posedge clk)
      begin : drive_gs_ctrl71
        if (rst == 1'b0) 
          begin
            gs_ctrl71 <= 1'b0;
          end 
        else 
          begin
            case (global_state2_next) 
              4'd06, 4'd07: 
                begin
                  gs_ctrl71 <= 1'b1;
                end
              default: 
                begin
                  gs_ctrl71 <= 1'b0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl72
        if (rst == 1'b0) 
          begin
            gs_ctrl72 <= 2'd0;
          end 
        else 
          begin
            case (global_state2_next) 
              4'd05: 
                begin
                  gs_ctrl72 <= 2'd1;
                end
              4'd06, 4'd07: 
                begin
                  gs_ctrl72 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl72 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_gs_ctrl73
        if (rst == 1'b0) 
          begin
            gs_ctrl73 <= 2'd0;
          end 
        else 
          begin
            case (global_state2_next) 
              4'd05: 
                begin
                  gs_ctrl73 <= 2'd1;
                end
              4'd06, 4'd07: 
                begin
                  gs_ctrl73 <= 2'd2;
                end
              default: 
                begin
                  gs_ctrl73 <= 2'd0;
                end
            endcase
          end
      end
    
    // resource: regr_ac_64
    always @(posedge clk or negedge rst)
      begin : drive_dma_read_chnl_data_buf
        if (rst == 1'b0) 
          begin
            dma_read_chnl_data_buf <= 64'd00000000000000000000;
          end 
        else 
          begin
            dma_read_chnl_data_buf <= fft2_N_MuxB_64_2_1_4_135_out1;
          end
      end
    
    // resource: regr_ac_1
    always @(posedge clk or negedge rst)
      begin : drive_dma_read_chnl_ready_mask
        if (rst == 1'b0) 
          begin
            dma_read_chnl_ready_mask <= 1'd0;
          end 
        else 
          begin
            dma_read_chnl_ready_mask <= 1'd1;
          end
      end
    
    // resource: regr_ac_1
    always @(posedge clk or negedge rst)
      begin : drive_dma_read_chnl_sync_rcv_set_ready_prev
        if (rst == 1'b0) 
          begin
            dma_read_chnl_sync_rcv_set_ready_prev <= 1'd0;
          end 
        else 
          begin
            dma_read_chnl_sync_rcv_set_ready_prev <= dma_read_chnl_set_ready_curr;
          end
      end
    
    // resource: regr_ac_1
    always @(posedge clk or negedge rst)
      begin : drive_dma_read_chnl_sync_rcv_reset_ready_prev
        if (rst == 1'b0) 
          begin
            dma_read_chnl_sync_rcv_reset_ready_prev <= 1'd0;
          end 
        else 
          begin
            dma_read_chnl_sync_rcv_reset_ready_prev <= dma_read_chnl_sync_rcv_reset_ready_curr;
          end
      end
    
    // resource: regr_ac_1
    always @(posedge clk or negedge rst)
      begin : drive_dma_read_chnl_sync_rcv_reset_ready_curr
        if (rst == 1'b0) 
          begin
            dma_read_chnl_sync_rcv_reset_ready_curr <= 1'd0;
          end 
        else 
          begin
            dma_read_chnl_sync_rcv_reset_ready_curr <= fft2_N_Muxb_1_2_5_4_134_out1;
          end
      end
    
    // resource: regr_ac_1
    always @(posedge clk or negedge rst)
      begin : drive_dma_read_chnl_sync_rcv_ready_flop
        if (rst == 1'b0) 
          begin
            dma_read_chnl_sync_rcv_ready_flop <= 1'd0;
          end 
        else 
          begin
            dma_read_chnl_sync_rcv_ready_flop <= fft2_Or_1Ux1U_1U_4_132_out1;
          end
      end
    
    // resource: fft2_Not_1U_1U_4  instance: fft2_Not_1U_1U_4_130
    assign fft2_Not_1U_1U_4_130_out1 = !dma_read_chnl_ready_mask;
    
    // resource: fft2_Not_1U_1U_4  instance: fft2_Not_1U_1U_4_131
    assign fft2_Not_1U_1U_4_131_out1 = !dma_read_chnl_sync_rcv_reset_ready_curr;
    
    // resource: fft2_Or_1Ux1U_1U_4  instance: fft2_Or_1Ux1U_1U_4_132
    assign fft2_Or_1Ux1U_1U_4_132_out1 = fft2_Not_1U_1U_4_130_out1 | dma_read_chnl_ready;
    
    // resource: fft2_And_1Ux1U_1U_4  instance: fft2_And_1Ux1U_1U_4_133
    assign fft2_And_1Ux1U_1U_4_133_out1 = dma_read_chnl_valid & dma_read_chnl_ready;
    
    // resource: fft2_N_Muxb_1_2_5_4
    always @(dma_read_chnl_sync_rcv_reset_ready_curr or fft2_Not_1U_1U_4_131_out1 or fft2_And_1Ux1U_1U_4_133_out1)
      begin : fft2_N_Muxb_1_2_5_4_134
        if (fft2_And_1Ux1U_1U_4_133_out1) 
          begin
            fft2_N_Muxb_1_2_5_4_134_out1 = fft2_Not_1U_1U_4_131_out1;
          end 
        else 
          begin
            fft2_N_Muxb_1_2_5_4_134_out1 = dma_read_chnl_sync_rcv_reset_ready_curr;
          end
      end
    
    // resource: fft2_N_MuxB_64_2_1_4
    always @(dma_read_chnl_data or dma_read_chnl_data_buf or fft2_And_1Ux1U_1U_4_133_out1)
      begin : fft2_N_MuxB_64_2_1_4_135
        if (fft2_And_1Ux1U_1U_4_133_out1) 
          begin
            fft2_N_MuxB_64_2_1_4_135_out1 = dma_read_chnl_data;
          end 
        else 
          begin
            fft2_N_MuxB_64_2_1_4_135_out1 = dma_read_chnl_data_buf;
          end
      end
    
    // instance: drive_dma_read_chnl_ready
    assign dma_read_chnl_ready = fft2_Or_1Ux1U_1U_4_129_out1;
    
    // resource: fft2_Xor_1Ux1U_1U_4  instance: fft2_Xor_1Ux1U_1U_4_125
    assign fft2_Xor_1Ux1U_1U_4_125_out1 = dma_read_chnl_sync_rcv_reset_ready_curr ^ dma_read_chnl_sync_rcv_reset_ready_prev;
    
    // resource: fft2_Not_1U_1U_4  instance: fft2_Not_1U_1U_4_126
    assign fft2_Not_1U_1U_4_126_out1 = !fft2_Xor_1Ux1U_1U_4_125_out1;
    
    // resource: fft2_And_1Ux1U_1U_4  instance: fft2_And_1Ux1U_1U_4_127
    assign fft2_And_1Ux1U_1U_4_127_out1 = fft2_Not_1U_1U_4_126_out1 & dma_read_chnl_sync_rcv_ready_flop;
    
    // resource: fft2_Xor_1Ux1U_1U_4  instance: fft2_Xor_1Ux1U_1U_4_128
    assign fft2_Xor_1Ux1U_1U_4_128_out1 = dma_read_chnl_set_ready_curr ^ dma_read_chnl_sync_rcv_set_ready_prev;
    
    // resource: fft2_Or_1Ux1U_1U_4  instance: fft2_Or_1Ux1U_1U_4_129
    assign fft2_Or_1Ux1U_1U_4_129_out1 = fft2_Xor_1Ux1U_1U_4_128_out1 | fft2_And_1Ux1U_1U_4_127_out1;
    
    // resource: fft2_Not_1U_1U_1  instance: fft2_Not_1U_1U_1_136
    assign fft2_Not_1U_1U_1_136_out1 = !dma_read_chnl_ready;
    
    // resource: fft2_And_1Ux1U_1U_1  instance: fft2_And_1Ux1U_1U_1_137
    assign fft2_And_1Ux1U_1U_1_137_out1 = fft2_Not_1U_1U_1_136_out1 & dma_read_chnl_ready_mask;
    
    // resource: fft2_And_1Ux1U_1U_1  instance: fft2_And_1Ux1U_1U_1_138
    assign fft2_And_1Ux1U_1U_1_138_out1 = dma_read_chnl_valid & dma_read_chnl_ready;
    
    // resource: fft2_Or_1Ux1U_1U_1  instance: fft2_Or_1Ux1U_1U_1_139
    assign fft2_Or_1Ux1U_1U_1_139_out1 = fft2_And_1Ux1U_1U_1_138_out1 | fft2_And_1Ux1U_1U_1_137_out1;
    
    // resource: regr_ac_1
    always @(posedge clk or negedge rst)
      begin : drive_dma_write_chnl_sync_snd_set_valid_prev
        if (rst == 1'b0) 
          begin
            dma_write_chnl_sync_snd_set_valid_prev <= 1'd0;
          end 
        else 
          begin
            dma_write_chnl_sync_snd_set_valid_prev <= dma_write_chnl_set_valid_curr;
          end
      end
    
    // resource: regr_ac_1
    always @(posedge clk or negedge rst)
      begin : drive_dma_write_chnl_sync_snd_reset_valid_prev
        if (rst == 1'b0) 
          begin
            dma_write_chnl_sync_snd_reset_valid_prev <= 1'd0;
          end 
        else 
          begin
            dma_write_chnl_sync_snd_reset_valid_prev <= dma_write_chnl_sync_snd_reset_valid_curr;
          end
      end
    
    // resource: regr_ac_1
    always @(posedge clk or negedge rst)
      begin : drive_dma_write_chnl_sync_snd_reset_valid_curr
        if (rst == 1'b0) 
          begin
            dma_write_chnl_sync_snd_reset_valid_curr <= 1'd0;
          end 
        else 
          begin
            dma_write_chnl_sync_snd_reset_valid_curr <= fft2_N_Muxb_1_2_5_4_162_out1;
          end
      end
    
    // resource: regr_ac_1
    always @(posedge clk or negedge rst)
      begin : drive_dma_write_chnl_sync_snd_valid_flop
        if (rst == 1'b0) 
          begin
            dma_write_chnl_sync_snd_valid_flop <= 1'd0;
          end 
        else 
          begin
            dma_write_chnl_sync_snd_valid_flop <= dma_write_chnl_valid;
          end
      end
    
    // resource: fft2_Not_1U_1U_4  instance: fft2_Not_1U_1U_4_161
    assign fft2_Not_1U_1U_4_161_out1 = !dma_write_chnl_sync_snd_reset_valid_curr;
    
    // resource: fft2_N_Muxb_1_2_5_4
    always @(dma_write_chnl_ready or dma_write_chnl_sync_snd_reset_valid_curr or fft2_Not_1U_1U_4_161_out1)
      begin : fft2_N_Muxb_1_2_5_4_162
        if (dma_write_chnl_ready) 
          begin
            fft2_N_Muxb_1_2_5_4_162_out1 = fft2_Not_1U_1U_4_161_out1;
          end 
        else 
          begin
            fft2_N_Muxb_1_2_5_4_162_out1 = dma_write_chnl_sync_snd_reset_valid_curr;
          end
      end
    
    // instance: drive_dma_write_chnl_valid
    assign dma_write_chnl_valid = fft2_Or_1Ux1U_1U_4_160_out1;
    
    // resource: fft2_Xor_1Ux1U_1U_4  instance: fft2_Xor_1Ux1U_1U_4_156
    assign fft2_Xor_1Ux1U_1U_4_156_out1 = dma_write_chnl_sync_snd_reset_valid_curr ^ dma_write_chnl_sync_snd_reset_valid_prev;
    
    // resource: fft2_Not_1U_1U_4  instance: fft2_Not_1U_1U_4_157
    assign fft2_Not_1U_1U_4_157_out1 = !fft2_Xor_1Ux1U_1U_4_156_out1;
    
    // resource: fft2_And_1Ux1U_1U_4  instance: fft2_And_1Ux1U_1U_4_158
    assign fft2_And_1Ux1U_1U_4_158_out1 = fft2_Not_1U_1U_4_157_out1 & dma_write_chnl_sync_snd_valid_flop;
    
    // resource: fft2_Xor_1Ux1U_1U_4  instance: fft2_Xor_1Ux1U_1U_4_159
    assign fft2_Xor_1Ux1U_1U_4_159_out1 = dma_write_chnl_set_valid_curr ^ dma_write_chnl_sync_snd_set_valid_prev;
    
    // resource: fft2_Or_1Ux1U_1U_4  instance: fft2_Or_1Ux1U_1U_4_160
    assign fft2_Or_1Ux1U_1U_4_160_out1 = fft2_Xor_1Ux1U_1U_4_159_out1 | fft2_And_1Ux1U_1U_4_158_out1;
    
    // resource: fft2_Not_1U_1U_1  instance: fft2_Not_1U_1U_1_163
    assign fft2_Not_1U_1U_1_163_out1 = !dma_write_chnl_valid;
    
    // resource: fft2_Or_1Ux1U_1U_1  instance: fft2_Or_1Ux1U_1U_1_164
    assign fft2_Or_1Ux1U_1U_1_164_out1 = fft2_Not_1U_1U_1_163_out1 | dma_write_chnl_ready;
    
    // resource: regr_en_ac_1
    always @(posedge clk)
      begin : drive_cfg_done
        if (rst == 1'b0) 
          begin
            cfg_done <= 1'd0;
          end 
        else 
          begin
            case (global_state3) 
              2'd1: 
                begin
                  if (conf_done) 
                    begin
                      cfg_done <= 1'd1;
                    end 
                end
            endcase
          end
      end
    
    // resource: regr_ac_2
    always @(posedge clk)
      begin : drive_global_state3
        if (rst == 1'b0) 
          begin
            global_state3 <= 2'd0;
          end 
        else 
          begin
            global_state3 <= cfg_config_accelerator_next;
          end
      end
    
    // resource: mux_2bx3i2c
    always @(conf_done or global_state3)
      begin : drive_cfg_config_accelerator_next
        case (global_state3) 
          2'd1: 
            begin
              if (conf_done) 
                begin
                  cfg_config_accelerator_next = global_state3 + 2'd1;
                end 
              else 
                begin
                  cfg_config_accelerator_next = 2'd1;
                end
            end
          2'd2: 
            begin
              cfg_config_accelerator_next = 2'd2;
            end
          default: 
            begin
              cfg_config_accelerator_next = global_state3 + 2'd1;
            end
        endcase
      end
    fft2_plm_block_in_fx32 A0_shared( 
                             .CLK( clk ),
                             .WE0( A0_shared_WE0_wire ),
                             .CE0( A0_shared_CE0_wire ),
                             .D0( A0_shared_D0_wire ),
                             .A0( A0_shared_A0_wire ),
                             .WEM0( A0_shared_WEM0_wire ),
                             .WE1( A0_shared_WE1_wire ),
                             .CE1( A0_shared_CE1_wire ),
                             .D1( A0_shared_D1_wire ),
                             .A1( A0_shared_A1_wire ),
                             .WEM1( A0_shared_WEM1_wire ),
                             .CE2( A0_shared_CE2_wire ),
                             .Q2( A0_shared_Q2_wire ),
                             .A2( A0_shared_A2_wire ),
                             .CE3( A0_shared_CE3_wire ),
                             .Q3( A0_shared_Q3_wire ),
                             .A3( A0_shared_A3_wire )
                           );
    
    // resource: mux_15bx2i0c
    always @(A0_compute_kernel_A3 or A0_store_output_A3 or A0_store_output_CE3)
      begin : mux_A0_shared_3_inputs_A0_shared_A3_wire
        if (A0_store_output_CE3) 
          begin
            A0_shared_A3_wire = A0_store_output_A3;
          end 
        else 
          begin
            A0_shared_A3_wire = A0_compute_kernel_A3;
          end
      end
    
    // resource: mux_1bx2i0c
    always @(A0_compute_kernel_CE3 or A0_store_output_CE3)
      begin : mux_A0_shared_3_inputs_A0_shared_CE3_wire
        if (A0_store_output_CE3) 
          begin
            A0_shared_CE3_wire = A0_store_output_CE3;
          end 
        else 
          begin
            A0_shared_CE3_wire = A0_compute_kernel_CE3;
          end
      end
    
    // instance: drive_A0_compute_kernel_Q2
    assign A0_compute_kernel_Q2 = A0_shared_Q2_wire;
    
    // resource: mux_15bx2i0c
    always @(A0_compute_kernel_A2 or A0_store_output_A2 or A0_store_output_CE2)
      begin : mux_A0_shared_2_inputs_A0_shared_A2_wire
        if (A0_store_output_CE2) 
          begin
            A0_shared_A2_wire = A0_store_output_A2;
          end 
        else 
          begin
            A0_shared_A2_wire = A0_compute_kernel_A2;
          end
      end
    
    // resource: mux_1bx2i0c
    always @(A0_compute_kernel_CE2 or A0_store_output_CE2)
      begin : mux_A0_shared_2_inputs_A0_shared_CE2_wire
        if (A0_store_output_CE2) 
          begin
            A0_shared_CE2_wire = A0_store_output_CE2;
          end 
        else 
          begin
            A0_shared_CE2_wire = A0_compute_kernel_CE2;
          end
      end
    
    // resource: mux_32bx2i0c
    always @(A0_compute_kernel_WEM1 or A0_load_input_CE1 or A0_load_input_WEM1)
      begin : mux_A0_shared_1_inputs_A0_shared_WEM1_wire
        if (A0_load_input_CE1) 
          begin
            A0_shared_WEM1_wire = A0_load_input_WEM1;
          end 
        else 
          begin
            A0_shared_WEM1_wire = A0_compute_kernel_WEM1;
          end
      end
    
    // resource: mux_15bx2i0c
    always @(A0_compute_kernel_A1 or A0_load_input_A1 or A0_load_input_CE1)
      begin : mux_A0_shared_1_inputs_A0_shared_A1_wire
        if (A0_load_input_CE1) 
          begin
            A0_shared_A1_wire = A0_load_input_A1;
          end 
        else 
          begin
            A0_shared_A1_wire = A0_compute_kernel_A1;
          end
      end
    
    // resource: mux_32bx2i0c
    always @(A0_compute_kernel_D1 or A0_load_input_D1 or A0_load_input_CE1)
      begin : mux_A0_shared_1_inputs_A0_shared_D1_wire
        if (A0_load_input_CE1) 
          begin
            A0_shared_D1_wire = A0_load_input_D1;
          end 
        else 
          begin
            A0_shared_D1_wire = A0_compute_kernel_D1;
          end
      end
    
    // resource: mux_1bx2i0c
    always @(A0_compute_kernel_CE1 or A0_load_input_CE1)
      begin : mux_A0_shared_1_inputs_A0_shared_CE1_wire
        if (A0_load_input_CE1) 
          begin
            A0_shared_CE1_wire = A0_load_input_CE1;
          end 
        else 
          begin
            A0_shared_CE1_wire = A0_compute_kernel_CE1;
          end
      end
    
    // resource: mux_1bx2i0c
    always @(A0_compute_kernel_WE1 or A0_load_input_WE1 or A0_load_input_CE1)
      begin : mux_A0_shared_1_inputs_A0_shared_WE1_wire
        if (A0_load_input_CE1) 
          begin
            A0_shared_WE1_wire = A0_load_input_WE1;
          end 
        else 
          begin
            A0_shared_WE1_wire = A0_compute_kernel_WE1;
          end
      end
    
    // resource: mux_32bx2i0c
    always @(A0_compute_kernel_WEM0 or A0_load_input_CE0 or A0_load_input_WEM0)
      begin : mux_A0_shared_0_inputs_A0_shared_WEM0_wire
        if (A0_load_input_CE0) 
          begin
            A0_shared_WEM0_wire = A0_load_input_WEM0;
          end 
        else 
          begin
            A0_shared_WEM0_wire = A0_compute_kernel_WEM0;
          end
      end
    
    // resource: mux_15bx2i0c
    always @(A0_compute_kernel_A0 or A0_load_input_A0 or A0_load_input_CE0)
      begin : mux_A0_shared_0_inputs_A0_shared_A0_wire
        if (A0_load_input_CE0) 
          begin
            A0_shared_A0_wire = A0_load_input_A0;
          end 
        else 
          begin
            A0_shared_A0_wire = A0_compute_kernel_A0;
          end
      end
    
    // resource: mux_32bx2i0c
    always @(A0_compute_kernel_D0 or A0_load_input_D0 or A0_load_input_CE0)
      begin : mux_A0_shared_0_inputs_A0_shared_D0_wire
        if (A0_load_input_CE0) 
          begin
            A0_shared_D0_wire = A0_load_input_D0;
          end 
        else 
          begin
            A0_shared_D0_wire = A0_compute_kernel_D0;
          end
      end
    
    // resource: mux_1bx2i0c
    always @(A0_compute_kernel_CE0 or A0_load_input_CE0)
      begin : mux_A0_shared_0_inputs_A0_shared_CE0_wire
        if (A0_load_input_CE0) 
          begin
            A0_shared_CE0_wire = A0_load_input_CE0;
          end 
        else 
          begin
            A0_shared_CE0_wire = A0_compute_kernel_CE0;
          end
      end
    
    // resource: mux_1bx2i0c
    always @(A0_compute_kernel_WE0 or A0_load_input_WE0 or A0_load_input_CE0)
      begin : mux_A0_shared_0_inputs_A0_shared_WE0_wire
        if (A0_load_input_CE0) 
          begin
            A0_shared_WE0_wire = A0_load_input_WE0;
          end 
        else 
          begin
            A0_shared_WE0_wire = A0_compute_kernel_WE0;
          end
      end
    
    // instance: drive_dma_read_ctrl_data_index
    assign dma_read_ctrl_data_index = {1'b0, dma_read_ctrl_data_index_slice};
    
    // instance: drive_dma_read_ctrl_data_length
    assign dma_read_ctrl_data_length = {1'b0, dma_read_ctrl_data_length_slice};
    
    // instance: drive_dma_read_ctrl_data_size
    assign dma_read_ctrl_data_size = {{1'b0, dma_read_ctrl_data_size_slice}, 1'b0};
    
    // instance: drive_dma_write_ctrl_data_index
    assign dma_write_ctrl_data_index = {1'b0, dma_write_ctrl_data_index_slice};
    
    // instance: drive_dma_write_ctrl_data_length
    assign dma_write_ctrl_data_length = {1'b0, dma_write_ctrl_data_length_slice};
    
    // instance: drive_dma_write_ctrl_data_size
    assign dma_write_ctrl_data_size = {{1'b0, dma_write_ctrl_data_size_slice}, 1'b0};

endmodule

